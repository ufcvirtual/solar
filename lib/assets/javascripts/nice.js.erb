/*********************************************
 * Funcoes genericas - extensoes do jQuery
 *********************************************/

$.fn.nice_checkbox = function(options) {
  var parent = this, children_names = $(this).data("children-names"), parent_block_div;
  var can_enable_or_disable    = (typeof(options) == "undefined" || typeof(options.cant_enable_elements) == "undefined" || !options.cant_enable_elements); // para nao habilitar opcoes, passar parametro cant_enable_elements
  var check_invisible_children = !(typeof(options) == "undefined" || typeof(options.check_invisible_children) == "undefined");

  // para englobar apenas os filhos do parent
  if (typeof(options) != "undefined" && typeof(options.parent_div) != "undefined")
    parent_block_div = options.parent_div;
  else{
    if (!((parent_block_div = $(parent).parents("table").parent()).length))
      parent_block_div = $(parent).parents(":nth-of-type(1)");
  }

  /**
   * Habilita ou desabilita os elementos passados verificando se aceita um ou múltimos itens checkados
   * O default é aceitar multiplos. caso o elemento aceite apenas um, deverá conter um "data-single"
   */
  var enable_other_elements = function(children_checked_length) {
    if (typeof(options) == "undefined" || typeof(options.objects_to_change_status) == "undefined")
      return false;

    // se nenhum ckb filho for selecionado, elemento é desabilitado
    // se mais de um ckb filho for selecionado, mas elemento só aceitar um, este é desabilitado
    // caso contrário, habilita
    $.each(options.objects_to_change_status, function(i, el) {
      var element = $(el, parent_block_div);
      element.attr("disabled", (children_checked_length == 0 || (children_checked_length > 1 && element.data("single") != undefined)));
    });
  };

  /**
   * Capturando evento de click nos filhos
   */
  var f_kids = function(children) {

    /**
     * Funcoes para habilitar/desabilitar edicao/delecao
     */
    var enable_edition = function() { $(".btn_edit", parent_block_div).attr("disabled", false); };
    var disable_edition = function() { $(".btn_edit", parent_block_div).attr("disabled", true); };
    var enable_deletion = function() { $(".btn_del", parent_block_div).attr("disabled", false); };
    var disable_deletion = function() { $(".btn_del", parent_block_div).attr("disabled", true); };

    children.click(function(){
      var kid = this;
      var children_checked = $('input:checkbox[name*="' + children_names + '"]:checked:not(".disabled")', parent_block_div);

      if (can_enable_or_disable) {
        enable_other_elements(children_checked.length);
        if (kid.checked) { // filho selecionado
          enable_deletion();
          enable_edition();
          enable_edition();
          if (children_checked.length == 0 || children_checked.length > 1)
            disable_edition();
        } else { // o evento de click tirou selecao do filho
          if (children_checked.length == 0) { // nenhum filho selecionado
            disable_deletion();
            disable_edition();
          } else if (children_checked.length == 1) { // apenas um filho selecionado
            enable_deletion();
            enable_edition();
          } else if (children_checked.length > 1) { // mais de um filho selecionado
            enable_deletion();
            disable_edition();
          }
        }
      } // end if

      children = $('input:checkbox[name*="' + children_names + '"]:not(".disabled")', parent_block_div);

      var icon = $('i', parent), check_parent = (kid.checked && children.length == children_checked.length);
      if (icon.length) { // checkbox como botão
        if (check_parent)
          $(icon).removeClass('icon-checkbox-unchecked').addClass('icon-checkbox-checked');
        else
          $(icon).addClass('icon-checkbox-unchecked').removeClass('icon-checkbox-checked');
      } else { // checkbox normal
        $(parent).prop("checked", check_parent); // atualiza o pai verificando o status dos filhos
      }

    }); // end kid click
  }; // end f_kids

  var children = $('input:checkbox[name*="' + children_names + '"]:not(".disabled")', parent_block_div);
  f_kids(children); // eventos nos filhos

  /***
   * Capturando evento de click no parent
   */
  $(parent).click(function() {
    var parent = this, icon, check;
    if ((icon = $('i', parent)).length) {
      $(icon).toggleClass('icon-checkbox-unchecked').toggleClass('icon-checkbox-checked');
      check = !( icon.prop('class') == 'icon-checkbox-unchecked' );
    } else
      check = parent.checked;

    children.each(function(i){ if (!$(this).hasClass('disabled') && (check_invisible_children || $(this).is(':visible'))) $(this).prop("checked", check); });
    if (can_enable_or_disable) {
      // o botao de edicao devera ser habilitado apenas para um unico objeto
      var children_checked = $('input:checkbox[name*="' + children_names + '"]:checked:not(".disabled")');
      $(".btn_edit", parent_block_div).attr("disabled", !(children_checked.length == 1));
      $(".btn_del", parent_block_div).attr("disabled", !check);

      enable_other_elements(children_checked.length);
    }
  }); // end click

  return this;
}

// recupera dados do filtro, consulta, atualiza dados
$.fn.nice_filter = function(options) {
  var filter = $(this);
  $('#search', filter).click(function(){
    erase_flash_messages();

    var load_to = $(this).data("load-to");
    var combos  = $('.filter:last select', filter);

    if (combos.length) {
      // pegar todas as obrigatorias e checar se tem alguma vazia
      var required = $('.filter:last select:not([data-optional])', filter);
      $('.filter:last select[data-optional="false"]', filter).each(function(){ required.push(this); });

      var filled   = required.map(function(){ if (!$(this).is_empty()) return $(this).combobox("value"); });

      if (required.length == filled.length) {
        var combos = combos.map(function(){ if (!$(this).is_empty()) return $(this).prop('name')+'_id: ' + '"' + $(this).combobox("value") + '"'; }).toArray().join(', ');
        if ($('[name="curriculum_unit_type"]:last').val() != undefined)
          combos    += ', curriculum_unit_type_id: "' + $('[name="curriculum_unit_type"]:last').val() + '"';
        var data   = eval("({" + combos + "})"); // transformando os valores dos filtros em json
        var url    = $(this).data("url-search");

        if (typeof(options) != "undefined" && typeof(options.data_function) == "function") {
          // se selecionou groups, mas não selecionou nenhuma turma, impede de prosseguir
          if(options.data_function().radio_option == "group" && !options.data_function().groups_id.length){
            flash_message("<%= I18n.t(:alert, scope: [:editions]) %>", "alert");
            $('.' + load_to + ':first').html('');
            return false;
          }

          // adiciona os dados das turmas selecionadas, caso haja alguma
          data = $.extend(data, options.data_function());
        }

        $.get(url, data, function(result){
          $('.' + load_to + ':first').html(result);
        }).fail(function(data){
          $('.' + load_to + ':first').html('');

          var data = $.parseJSON(data.responseText);
          if (typeof(data.alert) != "undefined"){
            if ($(".fancybox-inner").is(":visible"))
              flash_message(data.alert, 'alert', "fancybox-inner .flash_message_wrapper");
            else
              flash_message(data.alert, 'alert');
          }
        });
      } else {
        if ($(".fancybox-inner").is(":visible"))
          flash_message("<%= I18n.t(:alert, scope: [:editions]) %>", "alert", "fancybox-inner .flash_message_wrapper");
        else
          flash_message("<%= I18n.t(:alert, scope: [:editions]) %>", "alert");
        $('.' + load_to + ':first').html('');
      }

    } else
      console.error("Classes não encontradas");
  });

  return false;
}

/**
 * Deleta um objeto retirando sua tr da tabela
 * Apresenta msg (notice, alert) como flash messages
 **/
$.fn.nice_delete = function(options) {
  if (!confirm("<%= I18n.t(:message_confirm) %>"))
    return this;
  if (typeof(options) == "undefined")
    options = {};

  options = $.extend({ parent: 'tr', url: $(this).data("link-delete"), method_delete: "DELETE" }, options);
  var parent = $(this).closest(options.parent);

  if (typeof(options) != "undefined" && typeof(options.success) == "undefined") { // definir success
    options.success = function(data) {
      if (typeof(data.notice) != "undefined")
        flash_message(data.notice, 'notice');

      parent.slideUp().remove();
      update_tables_with_no_data();

      if (typeof(options.complement_success) == "function")
        options.complement_success(data);
    }
  }

  if (typeof(options.error) == "undefined") {
    options.error = function(data) {
      var data = $.parseJSON(data.responseText);
      if (typeof(data.alert) != "undefined")
        flash_message(data.alert, 'alert');
    }
  }

  if (typeof(options.complete) == "undefined")
    options.complete = function(data) {
      // default: faz nada
    }

  $.ajax({
    method: options.method_delete,
    url: options.url,
    success: options.success,
    fail: options.error,
    complete: options.complete
  })

  return this;
}

/**
 * Define uma funcao pra fazer submit de um form serializando os dados.
 *  - Em caso de erro:
 *     -- O form é exibido novamente, depois do submit, mostrando os erros
 *  - Em caso de sucesso
 *    -- O lightbox fecha (caso não haja opção dizendo o contrário)
 *    -- Exibe msg de notice (caso exista)
 **/
$.fn.serialize_and_submit = function(options) {
  var form_id = ["form#", $(this).attr('id'), ":first"].join('');
  var name = $(this).attr('id');

  if (typeof(options) == "undefined")
    options = {};
  if (typeof(options) != "undefined" && typeof(options.success) == "undefined") { // definir success
    options.success = function(data) {
      if (typeof(data) == "string" && data.search(".field_with_errors") != -1){
        $('' + form_id).replaceWith(data);
      } else {
        // se nao houver opção indicando que o lightbox deve se manter aberto, o default é fechá-lo
        if (typeof(options.complement_success) == "function")
          options.complement_success(data);

        if((typeof(options.dont_remove_lightbox) == "undefined" || !options.dont_remove_lightbox) && (typeof($("span.error:first")) == "undefined" || ($("span.error").is_empty()))){
          $.fancybox.close();
        }

        if (typeof(options.replace_list) != "undefined"){
          $.get(options.replace_list.data("link-list"), function(data2){
            options.replace_list.replaceWith(data2);
            if (typeof(data) != "undefined" && typeof(data.notice) != "undefined")
              flash_message(data.notice, 'notice', options.flash_msg);
          });
        }

        if (typeof(options.replace_html_content) != "undefined"){
          $.get(data.url, function(data2){
            options.replace_html_content.html(data2);
            if (typeof(data) != "undefined" && typeof(data.notice) != "undefined")
              flash_message(data.notice, 'notice');
          });
        }

        if (typeof(options.replace_with) != "undefined"){
          options.replace_with.replaceWith(data);
        }

        if (typeof(options.prepend_to_list) != "undefined"){
          if(typeof(data.prepend_to_list_url) != "undefined"){
            $.get(data.prepend_to_list_url, function(data2){
              options.prepend_to_list.prepend(data2);
            });
          }else{
            if($(data).prop('id'))
              $('#'+$(data).prop('id')).remove();
            options.prepend_to_list.prepend(data);
          }
          $('.empty_message.text_none').addClass('invisible');

        }

        else if (typeof(data) != "undefined" && typeof(data.notice) != "undefined"){
          flash_message(data.notice, 'notice', options.outer);
        }
      }

      if (typeof(options.call_function) != "undefined"){
        window[options.call_function]();
      }

      update_tables_with_no_data();
      $(".block_toolbar_right a").attr('disabled', true); // desabilita os botoes da barra superior

     // if(CKEDITOR.instances){
     //   for(name in CKEDITOR.instances){
     //     CKEDITOR.instances[name].destroy()
      //  }
     // }  
    }
  }

  if (typeof(options) != "undefined" && typeof(options.error) == "undefined") { // definir error
    if (typeof(options) != "undefined" && typeof(options.error_message) != "undefined")
      name = options.error_message;

    options.error = function(data) {
      var response = JSON.parse(data.responseText);
      if (typeof(response.alert) != "undefined"){
        if (typeof(response.object) != "undefined"){
          flash_message(response.alert, 'alert', name, null, response.object);
        }else if(options.outer != undefined){
          flash_message(response.alert, 'alert', options.outer);
        }else if(response.outer != "undefined"){
          flash_message(response.alert, 'alert', response.outer);
        }else{
          flash_message(response.alert, 'alert', name);
        }
      }

      if (typeof(options.complement_error) == "function"){
          options.complement_error(data);
        }
    }
  }

  if (typeof(options) != "undefined" && typeof(options.files) != "undefined")
    var data = (new FormData($(this)[0]));
  else
    var data = $(this).serialize();

  var ajax_options = {
    type: $(this).attr('method'),
    url: $(this).attr('action'),
    data: data,
    success: options.success,
    error: options.error
  };

  if (typeof(options.files) != "undefined") {
    $.extend(ajax_options, {
      cache: false,
      contentType: false,
      processData: false
    });
  }

  $.ajax(ajax_options);
  setTimeout(function() {
    focuInpuErro();
    loadFocus();
  }, 700); 
  return this;
}

/**
 * Filtra uma tabela com o conteúdo de um input.
 * A tabela é passada através de options como {table: '#table'}
 */
$.fn.nice_table_filter = function(options) {
  $(this).keyup(function(){
    var term = $(this).val().toLowerCase(), table = $(options.table);
    if (term != "") {
      $('tbody > tr', table).hide(); // esconde todas as tr
      $('tbody td', table).filter(function(){ return $(this).text().toLowerCase().indexOf(term) > -1 }).closest('tr').show(); // exibe apenas as que contem o texto da busca
    } else
      $('tbody > tr', $(options.table)).show();
  });
}

$.fn.nice_open_lesson = function(options) {
 
  if (typeof(options) == "undefined")
    options = {};

  var default_options = {
    minHeight: '95%',
    minWidth: '95%',
    autoScale: true,
    autoSize: true,
    afterShow: function() {
      $("<a class='fancybox-item fancybox-minimize'  title=<%=I18n.t('fancybox.minimize')%> aria-label=<%=I18n.t('fancybox.minimize')%>></a>").appendTo(this.skin).click(minimize_lesson);

      add_description_to_close_fancybox_btn("<%=I18n.t(:menu_lesson)%>");
      focus_on_fancybox_element(undefined, undefined, "<%=I18n.t(:menu_lesson)%>");
      remove_focus_from_back();

      $('iframe').prop('title', "<%=I18n.t(:menu_lesson)%>");
      $('iframe').contents().find('html').prop('lang', "<%=I18n.locale.to_s.gsub('_', '-')%>");
    },
    afterClose:  function(event) {
      $(event.element).prop('tabindex', 0);
      $(event.element).focus();
      give_focus_to_back();
    }
  };

  options = $.extend(default_options, options, {live: false} );
  $.fancybox.open($(this), options);
}
