// = require jquery.cookie
// = require jquery.dynatree.min
// = require jquery.qtip.min

jQuery(function($){

  /* Para não efetuar logout após ações */
  jQuery(document).ajaxSend(function(e, xhr, options) {
    var token =$("meta[name='csrf-token']").attr("content");
    xhr.setRequestHeader("X-CSRF-Token", token);  
  });

  /* Inicialização de variáveis utilizadas neste arquivo e configuração dos cookies */
  var selNodes;
  var initial_file_node = null;

  // recupera o id da aula em questão
  var lesson_id = $("#move_path").attr("value").split("/")[2];


  // se os cookies armazenados forem de uma aula diferente, são "zerados"
  if(lesson_id != $.cookie("lesson_id")){
    $.cookie("dynatree-expand", new Array());
    $.cookie("dynatree-select", new Array());
  }

  // seta o valor da aula atual
  $.cookie("lesson_id",lesson_id);

  // recupera os nós já expandidos existentes nos cookies
  if (($.cookie("dynatree-expand") == undefined)){
    var nodes_expanded = $.cookie("dynatree-expand", new Array());
  }else{
    var expand = $.cookie("dynatree-expand").toString();
    var nodes_expanded = (expand == "" ? expand : expand.split(","));
  }
  // recupera os nós selecionados existentes nos cookies
  if (($.cookie("dynatree-select") == undefined)){
    var nodes_selected = $.cookie("dynatree-select", new Array());
  }else{
    var select = $.cookie("dynatree-select").toString();
    var nodes_selected = (select == "" ? select : select.split(","));
  }

  /* Inicialização da árvore de arquivos */
  jQuery("#tree").dynatree({
    persist: true,
    minExpandLevel: 1,
    checkbox: true,
    selectMode: 2, // alterado para o 2 para melhorar/facilitar a deleção de nós
    children: treeData,
    imagePath: "/assets/lesson/",
    generateIds: true,
    autoCollapse: true,
    activeVisible: false,
    onSelect: function(select, node) {
      if(select && jQuery(node.span).hasClass("dont_visit_children"))
        jQuery(node.span).removeClass("dont_visit_children");

      if(!jQuery(node.span).hasClass("dont_visit_children") && node.childList != null){ // se for uma pasta
        node.visit(function(child){
          child.select(select); // seleciona ou desseleciona nós filhos
        });
      }

      if(!select){ // se nó foi desselecionado, desseleciona o pai caso todos os filhos estivessem selecionados
        jQuery(jQuery(node.span).find("a").css("class", "dynatree-title")).attr("id", "no_child_selected");
        if(node.parent!= null && node.parent.isSelected){
          // adiciona classe apenas para informar quando reexecutar no "onSelect" que ele não deve repassar ação para os filhos
          jQuery(node.parent.span).addClass("dont_visit_children"); 
          node.parent.select(false);
        }
      }else
          jQuery(jQuery(node.span).find("a").css("class", "dynatree-title")).removeAttr("id");

      selNodes = node.tree.getSelectedNodes();
      if(node.parent!= null)
        has_child_selected(node.parent); // define estilo do nó pai de acordo com os filhos selecionados
    },
    onActivate: function(node){
      node.deactivate();
    },
    onDblClick: function(node, event) {
      editNode(node);
      return false;
    },
    onKeydown: function(node, event) {
      if(folder_or_file_selected()){
        erase_flash_messages();
        node = selNodes[0];
        switch( event.which ) {
          case 113: // [F2]
            editNode(node);
            return false;
          case 32: // barra
            node.toggleSelect();
            return false;
          case 46: // [delete]
            deleteNodes([node]);
        }
      }else
        flash_message("<%=I18n.t(:item_must_be_selected, :scope => [:lesson_files])%>", "alert", "flash_messages");
    },
    onPostInit: function(){ // ao carregar a árvore

      // recupera os nós selecionados (os cookies armazenam apenas os data.key)
      selNodes = jQuery.map(nodes_selected, function(selected){
        if(selected != "") 
          return (jQuery("#tree").dynatree("getTree").getNodeByKey(selected));
      });

      $(selNodes).each(function() { if(this.parent != null){has_child_selected(this.parent);} }); // exibe indicação de que pasta possui algum arquivo interno selecionado
      if(nodes_expanded.length > 0){ // se houver nós expandidos
        intern_level = jQuery("#tree").dynatree("getTree").getNodeByKey(nodes_expanded[nodes_expanded.length-1]).getLevel(); // recupera o nível mais interno

        jQuery("#tree").dynatree("getTree").visit(function(node) {
          if(node.getLevel() <= intern_level)
            hide_checkboxes(true, node);   
        });

      }

      initial_file_node = get_initial_file(); // verifica se há arquivo inicial e o associa à variável
      if(initial_file_node != null)
        set_initial_file_visual_path(initial_file_node); // define caminho visual
    },
    onQueryExpand:  function(flag, node){ 
      var some_child_selected = jQuery(jQuery(node.span).find("a").css("class", "dynatree-title")).attr("id") == "some_child_selected";
    }, // Callback(flag, dtnode) before a node is expanded/collpsed.
    onExpand: function(flag, node){ 
      if(flag && initial_file_node != null) // ao expandir um nó
        set_initial_file_visual_path(); // é necessário redefinir caminho visual do arquivo inicial, pois os nós mais internos são ficam realmente acessíveis antes da expansão do pai
      expand_folder(flag, node); // define nível a ser exibido

      has_child_selected(node, true); // define estilo do nó pai de acordo com os filhos selecionados
    }
  });

  /* Inicialização da árvore de pastas para movimentação de arquivos e pastas */
  jQuery("#folders_tree").dynatree({
    minExpandLevel: 2,
    selectMode: 1,
    children: folderTreeData,
    imagePath: "/assets/lesson/",
    checkbox: true,
    activeVisible: false,
    classNames: {checkbox: "dynatree-radio"}, // Override class name for checkbox icon:
    onKeydown: function(node, event) {
      switch( event.which ) {
        case 27: // [F2]
          jQuery("#folder_dropdown").hide();
        case 13: // enter
          node.select();
      }
    },
    onActivate: function(node){
      node.deactivate();
    },
    onDblClick: function(node, event) {
      node.deactivate();
    }
  });

  /* Eventos de botões */
  
  /* Criar novo folder com texto padrao e foco para editar */
  jQuery("#lesson_new_folder").click(function() { 
    if(folder_or_file_selected() && selNodes[0].data.isFolder){
      node_path = getPath(selNodes[0]);
      newFolder(node_path); // cria pasta no sistema
    }else
      flash_message("<%=I18n.t(:one_folder_must_be_selected, :scope => [:lesson_files])%>", "alert", "flash_messages");

    return false;
  });

  /* Selecionar ou deselecionar todos os itens */
  jQuery("#all_items_selector").click(function(){
    jQuery("#tree").dynatree("getRoot").toggleSelect();
  });

  jQuery("#btn-remove-node").click(function(){
    if(typeof selNodes == "undefined" || selNodes.length == 0)
      flash_message("<%= I18n.t(:at_least_one, :to => I18n.t(:remove, :scope => [:lesson_files]), :scope => [:lesson_files]) %>", "alert", "flash_messages");
    else 
      deleteNodes(selNodes);
  });

  jQuery("#btn-clean-lesson").click(function(){
    deleteNodes([jQuery("#tree").dynatree("getTree").getNodeByKey("_2")]); // deleta todos os nós
  });

  jQuery("#btn-rename").click(function(){
    if (folder_or_file_selected())
      editNode(selNodes[0]);
    else
      flash_message("<%=I18n.t(:item_must_be_selected, :scope => [:lesson_files])%>", "alert", "flash_messages");
  });

  /* caso nenhum arquivo/pasta tenha sido selecionado, exibe uma mensagem de erro dentro
  do proprio dropdown */

  $("#btn-move-node").click(function() {
    trigger = jQuery(this);
    target = jQuery(this).data('dropdown-alt');
    if(typeof selNodes == "undefined" || selNodes.length == 0) {
      jQuery("#folder_dropdown_alert").show();
      jQuery("#folder_dropdown_content").hide();
    } else {
      jQuery("#folder_dropdown_alert").hide();
      jQuery("#folder_dropdown_content").show();
    }
    jQuery(target)
      .toggle()
      .position({
        my: 'left top+8',
        at: 'left bottom',
        of: $(trigger)
      });
  });

  jQuery("#btn-cancel-move").click(function(){
    jQuery("#folder_dropdown").hide();
  });  

  jQuery("#btn-save-move").click(function(){
    saveMove(selNodes);
  });    

  jQuery("#lesson_new_file").click(function(){
    if(folder_or_file_selected() && selNodes[0].data.isFolder)
      jQuery("#fileupload").click();
    else
      flash_message("<%=I18n.t(:one_folder_must_be_selected, :scope => [:lesson_files])%>", "alert", "flash_messages");
  });

  jQuery(':file').change(function(){

    for(var i=0; i < this.files.length; i++){ 
      file = this.files[i];
      extension = file.name.split(".");
      extension = extension[extension.length-1];
      if(jQuery.inArray(extension, extensions) != -1)
        var extension_error = true;
      else if(file.size > "<%=1.gigabytes%>")
          var size_error = true
        else if(!validName(selNodes[0], file.name))
            var name_error = true
    }

    if(extension_error != true){
      if(size_error != true){
        if(name_error != true){

          var path     = getPath(selNodes[0]);
          jQuery("#path").attr("value", path);
          var formData = new FormData(jQuery('#file_form')[0]);

          jQuery.ajax({
              url: jQuery("#file_form").attr("action"),  //server script to process data
              type: 'PUT',
              data: formData,
              //Options to tell JQuery not to process data or worry about content-type
              cache: false,
              contentType: false,
              processData: false,
              // xhr: function() {  // custom xhr
              //     myXhr = jQuery.ajaxSettings.xhr();
              //     if(myXhr.upload){ // check if upload property exists
              //         myXhr.upload.addEventListener('progress',progressHandlingFunction, false); // for handling the progress of the upload
              //     }
              //     return myXhr;
              // },
              success: function(data){
                $("#lesson_file_management").html(data);
                //$("#lesson_file_management").html(data);
                deselect_all();
              },
              error: function() {
                flash_message("<%=I18n.t(:upload_error, :scope => [:lesson_files])%>", "alert", "flash_messages");
              }
          });

        }else
          flash_message("<%=I18n.t(:existing_file_error, :scope => [:lesson_files])%>", "alert", "flash_messages");
      }else
        flash_message("<%=I18n.t(:file_too_big_error, :scope => [:lesson_files])%>", "alert", "flash_messages");
    }else
      flash_message("<%=I18n.t(:bad_extension_error, :scope => [:lesson_files])%>", "alert", "flash_messages");
  });

  jQuery("#btn-initial-file").click(function(){
    if(folder_or_file_selected()){
      if(selNodes[0].data.isFolder)
        flash_message("<%=I18n.t(:must_be_a_file, :scope => [:lesson_files])%>", "alert", "flash_messages");
      else
        defineInitialFile(selNodes[0]);
    }else
      flash_message("<%=I18n.t(:item_must_be_selected, :scope => [:lesson_files])%>", "alert", "flash_messages");
  });

  /* Define estilo do nó para caso algum dos filhos esteja selecionado ou nenhum 
    Esta função não serve apenas para filhos diretos. Se há uma pasta com algum arquivo selecionado, a pasta deve estar sinalizada. 
    Entretanto, o "pai" desta pasta também deve ser sinalizado e assim consecutivamente. */
  function has_child_selected(node, look_down){
    descendantOfNode = jQuery.map(selNodes, function(node_selected){ 
        return (node_selected.isDescendantOf(node));
    });

    if((node.isSelected()) || (jQuery.inArray(true, descendantOfNode) != -1)) // tem filhos selecionados
      jQuery(jQuery(node.span).find("a").css("class", "dynatree-title")).attr("id", "some_child_selected");
    else // não tem filhos selecionados 
      jQuery(jQuery(node.span).find("a").css("class", "dynatree-title")).attr("id", "no_child_selected");

    if(node.parent != null)
      has_child_selected(node.parent);

    // no caso de um nó ser expandido, deve verificar seus filhos para "marcação" de filho selecionado
    if(look_down){
      for(var i = 0; i < node.childList.length; i++){
        has_child_selected(node.getChildren()[i]);
      }
    }

  }

  function folder_or_file_selected(){
    // verifica se algum nó foi selecionado E (se apenas um nó foi selecionado OU (se o item for uma pasta E a quantidade de filhos da pasta + a pasta é igual ao número de itens selecionados E a pasta não está expandida))
    return (typeof selNodes != "undefined" && selNodes.length > 0 && (selNodes.length == 1 || (selNodes[0].childList != null && selNodes[0].countChildren()+1 == selNodes.length && !selNodes[0].isExpanded())))
  }

  $('#btn-unzip').click(function(){
    // verificar se tem algum arquivo selecionado
    if (folder_or_file_selected()) {
      extension = selNodes[0].data.title.split(".");
      extension = extension[extension.length-1];

      if(selNodes[0].data.isFolder || extension != "zip") {
        flash_message("<%=I18n.t(:must_be_a_zip_file, :scope => [:lesson_files])%>", "alert", "flash_messages");
      } else {
        $.ajax({
          type: 'GET',
          url: $(this).data('unzip-path').replace(':file', getPath(selNodes[0])),
          success: function(data){
            $("#lesson_file_management").html(data);
            //$("#lesson_file_management").html(data);
            deselect_all();
          },
          error: function(data){
            eval('var msg = ' + data.responseText);
            flash_message(msg.msg, "alert", "flash_messages");
          }
        });
      }
    } else {
      flash_message("<%=I18n.t(:item_must_be_selected, :scope => [:lesson_files])%>", "alert", "flash_messages");
    }
  });

});

// function progressHandlingFunction(e){
//   if(e.lengthComputable){
//       jQuery('progress').attr({value:e.loaded,max:e.total});
//   }
// }

/* Retorna o caminho em que o nó se encontra */
function getPath(node){
  var path = []; 
  if(node.data.key != "_2") // se não for raiz
    path.unshift(node.data.title); 
  node.visitParents(function(node){ 
    if(node.parent && node.data.key != "_2")  // se não for raiz
      path.unshift(node.data.title); // cada novo título do nó é adicionado ao começo 
  }); 
  return path.join("/"); 
}

/* Retorna o caminho (path) selecionado (os elementos que foram selecionados) da hierarquia do arquivo inicial 
   Utilizado para quando for mover e deve ser verificado todo o caminho a ser movido pertencente ao arquivo inicial para alteração */
function getPartialPathInitialFile(){
  if(typeof initial_file_node != "undefined" && initial_file_node != null){
    if(initial_file_node.isSelected() == true){
      var path = [];
      path.unshift(initial_file_node.data.title);
      parent = initial_file_node.getParent();
      while(parent.isSelected() == true){
        path.unshift(parent.data.title);
        parent = parent.getParent();
      }
      return path.join("/"); 
    }else
      return false; // se nenhum elemento foi selecionado
  }else
    return false; // se não há arquivo inicial
}

/* Verifica se o nome do nó é um nome válido */
function validName(parent_node, name){
  var unique_name = true;
  if(parent_node.childList != null){
    for(var i = 0; i <= parent_node.childList.length-1; i++){
      if(parent_node.getChildren()[i].data.title == name) // verifica se nome escolhido já existe
        unique_name = false;
    }

  }
  return unique_name;
}

/* Função para excluir nós selecionados ou todos */
function deleteNodes(nodes){
  if( typeof nodes != "undefined" ){
    if(nodes[0].data.key != "_2"){ // remover selecionados
      if( typeof initial_file_node == "undefined" ) // não existe arquivo inicial
        initial_file_node = null;
      if(jQuery.inArray(initial_file_node, nodes) != -1) // se o arquivo inicial estiver na lista para remoção, não permite
        flash_message("<%= I18n.t(:cant_remove_initial_file, :to => I18n.t(:remove, :scope => [:lesson_files]), :scope => [:lesson_files]) %>", "alert", "flash_messages");
      else if(confirm("<%=I18n.t(:delete_confirm, :scope => [:lesson_files])%>")){
        for (var i = 0; i < nodes.length; i++){
          if (nodes[i].li != null && nodes[i].data.key != '_2')
            saveDeletion(nodes[i], false);
        }
      }else
        return false;
    }else{ // remover todos
      if (confirm("<%=I18n.t(:clean_lesson_confirm, :scope => [:lesson_files])%>"))
        saveDeletion(nodes[0], true);
      else
        return false;
    }
  }else
    flash_message("<%=I18n.t(:items_must_be_selected, :scope => [:lesson_files])%>", "alert", "flash_messages");
}

/* Renomear nó */
function editNode(node) {
  
  if (node.data.key == '_2') // raiz visivel
    return false;

  var prevTitle = node.data.title,
  tree = node.tree;
  tree.$widget.unbind(); // Disable dynatree mouse- and key handling
  jQuery(".dynatree-title", node.span).html("<input id='editNode' value='" + prevTitle + "'>"); // Replace node with <input>

  jQuery("input#editNode") // Focus <input> and bind keyboard handler
    .focus()
    .keydown(function(event) {
      switch( event.which ) {
        case 27: // [esc]
          jQuery("input#editNode").val(prevTitle); // discard changes on [esc]
          jQuery(this).blur();
          break;
        case 13: // [enter]
          var new_title = jQuery("input#editNode").val(); // Accept new value, when user leaves <input>
          node_path     = getPath(node); // recupera caminho do nó antes de mudar o título

          if(node.data.title != new_title){
            if(validName(node.parent, new_title) && new_title.length != 0){
              renameNode(node, new_title, node_path); // renomeia nó
              node.setTitle(new_title);
            }else{
              jQuery("input#editNode").val(node.data.title); // retorna ao antigo título
              flash_message("<%=I18n.t(:name_error, :scope => [:lesson_files])%>", "alert", "flash_messages");
            }             
          } else
            erase_flash_messages();

          jQuery(this).blur(); // simulate blur to accept new value
          break;
      }
    }).blur(function(event){
      // Se tela não for atualizada, foi porque não foi concluída a alteração. 
      // Logo, precisa, ao sair do foco, redefinir o valor exibido para o anterior.
      node.setTitle(node.data.title); 
      // Re-enable mouse and keyboard handlling
      tree.$widget.bind();
      node.focus();
    });

  if(node.isFolder && node.isExpanded)
    checkbox_node(node).hide();
}

/* Seta caminho visual para o arquivo inicial */
function set_initial_file_visual_path(){
  if(jQuery(initial_file_node.span).attr("id") != "initial_file"){
    jQuery(initial_file_node.span).attr("id", "initial_file"); // define como arquivo inicial visualmente

    parent = initial_file_node.getParent();
    while(getPath(parent) != "" && parent.span != "initial_file_parent"){ // varre os nós pais que já não foram definidos e que não são a raiz
      jQuery(parent.span).attr("id", "initial_file_parent"); // como parte do caminho do arquivo inicial
      parent = parent.getParent();
    }
  }
}

/* Inicia busca do arquivo inicial por toda a árvore */
function get_initial_file(){
  if(initial_file_address != ''){
    jQuery("#tree").dynatree("getRoot").visit(function(node) {
      initial_file = search_initial_file(node);
      if (initial_file != null) // caso encontre arquivo inicial
        return false; // encerra pesquisa
    });
  }else
    initial_file = null;
  return initial_file;
}

/* Procura arquivo inicial a partir de um nó */
function search_initial_file(node){
  if(node.childList != null){ // se for uma pasta com filhos
    for(var i = 0; i <= node.childList.length-1; i++){ // varre lista de filhos
      child_node = node.childList[i];
      if(child_node.childList != null) // se filho for outra pasta com filhos
        search_initial_file(child_node); // recursão
      else 
        return verify_initial_file(child_node); // define arquivo inicial caso necessário
    }
  }else // se for só um arquivo ou pasta sem filhos
    return verify_initial_file(node); // define arquivo inicial caso necessário
}

/* Verifica se é arquivo inicial. Se for, seta na variável. */
function verify_initial_file(node){
  if (getPath(node) == initial_file_address && initial_file_address != ""){ // se o caminho do nó for equivalente ao arquivo inicial e não for a raiz
    initial_file_node = node;
    return initial_file_node;
  }else
    return null;
}

/* Verifica nível dos checkboxes */
function expand_folder(flag, node){
  parent = node.parent;

  for(var i = 0; i <= parent.childList.length-1; i++){ // varre a subárvore do pai
    hide_checkboxes(flag, parent.childList[i]); // oculta ou exibe checkboxes para o nível do nó expandido/comprimido
  }

  if(!flag){ // se um nó for comprimido
    for(var i = 0; i <= node.childList.length-1; i++){ // varre os filhos do nó
      if(node.childList[i].isExpanded()) // se algum estiver expandido
        node.childList[i].expand(false); // comprime para, caso o usuário comprima um nível maior que o atual, ao expandir novamente não apareçam dois níveis com checkboxes
    }
  }
}

/* Retorna o elemento de checkbox de um nó */
function checkbox_node(node){
  return jQuery(node.li.children[0].children[1]); // elemento de checkbox do nó
}

/* Exibe ou não o checkbox de um nó */
function hide_checkboxes(flag, node){
  if(node.li){
    checkbox = checkbox_node(node);
    if(flag) // se nó foi expandido, esconde checkboxes do seu nível
      checkbox.hide();
    else // se comprimido, exibe
      checkbox.show().css('display', ''); // deve ter esta definição de css, porque só o show deixa "display: in-block" e assim, em alguns níveis, o checkbox não é exibido
  }
}

function deselect_all(){
  root = jQuery("#tree").dynatree("getRoot");
  if(!root.select())
    root.select(true); // seleciona toda a árvore
  root.select(false); // para deselecionar (se for só este direto, ele não executa pois a raiz pode não estar previamente selecionada)
}

/**** Métodos AJAX ****/

/* Salva a deleção de um nó */
function saveDeletion(node, root_node){
  url       = jQuery("#remove_path").attr("value"); // url para deleção
  node_path = getPath(node); // caminho do nó

  jQuery.ajax({
    type: 'DELETE',
    url: url,
    data: {
      "path": node_path,
      "root_node": root_node // informa se é a deleção do nó raiz, ou seja, de todos os arquivos da aula
    },
    success: function(data) {
      $("#lesson_file_management").html(data);
      //$("#lesson_file_management").html(data);
      deselect_all();
      if(root_node) // atualiza listagem para que esta aula vire, se necessário, rascunho
        $.get($('.list_lessons').data('link-list'), function(data){
          $('.list_lessons:first').replaceWith(data);
        });
    },
    error: function(data) {
      flash_message("<%=I18n.t(:delete_error, :scope => [:lesson_files])%>", "alert", "flash_messages");
    }
  });
}

/* Cria pasta */
function newFolder(path){
  url = jQuery("#lesson_new_folder").attr("data-path");

  jQuery.ajax({
    type: 'POST',
    url: url,
    data: { "path": path },
    success: function(data){
      $("#lesson_file_management").html(data);
      //$("#lesson_file_management").html(data);
      deselect_all();
    },
    error: function() {
      flash_message("<%=I18n.t(:new_folder_error, :scope => [:lesson_files])%>", "alert", "flash_messages");
    }
  });
}

/* Renomeia nó */
function renameNode(node, new_title, path){
  url = jQuery("#rename_path").attr("value");

  jQuery.ajax({
    type: 'PUT',
    url: url,
    data: {
      "path": path,
      "node_name": new_title,
      "previous_name": node.data.title
    },
    success: function(data){
      if(initial_file_node != null && initial_file_node == node)
        defineInitialFile(node);
      else{
        $("#lesson_file_management").html(data);
        //$("#lesson_file_management").html(data);
      }
      deselect_all();
    },
    error: function() {
      node.setTitle(node.data.title); // retorna ao antigo título
      flash_message("<%=I18n.t(:rename_error, :scope => [:lesson_files])%>", "alert", "flash_messages");
    }
  }); 
}

/* Salvar a movimentação de pastas/arquivos */
function saveMove(nodesToMove){
  var paths         = new Array;
  var nodesSelected = jQuery("#folders_tree").dynatree("getTree").getSelectedNodes();

  if (nodesSelected.length == 0)
    var error = true; // erro: nenhuma pasta destino selecionada
  else{
    var moveTo = getPath(nodesSelected[0]);  

    for(var i=0; i < nodesToMove.length; i++){ 
        
      // verifica se está movendo para o local atual e o nome da pasta a ser movida 
      if(getPath(nodesToMove[i].parent) == moveTo || !validName(nodesSelected[0], nodesToMove[i].data.title)){
        var invalid_name = true; // erro: já existe pasta de mesmo nome no destino
        i = nodesToMove.length; // concluir laço
      }else{
        if(getPath(nodesToMove[i]) == moveTo) 
          var same_folder = true; // erro: está movendo para ela mesma
        else{
          paths.push(getPath(nodesToMove[i])); // caminho do nó
          if(nodesToMove[i].countChildren() > 0) // verifica se é um nó pai selecionado
            i = i + nodesToMove[i].countChildren(); // pula filhos
        }
      }
    }
  }

  if(error == true)
    flash_message("<%= I18n.t(:destination_folder_error, :scope => [:lesson_files]) %>", "alert", "flash_messages");
  else{
    if(invalid_name == true) 
      flash_message("<%= I18n.t(:existing_folder_error, :scope => [:lesson_files]) %>", "alert", "flash_messages");
    else{
      if(same_folder == true) 
        flash_message("<%= I18n.t(:same_folder_error, :scope => [:lesson_files]) %>", "alert", "flash_messages");
      else{
        jQuery.ajax({
          type: 'PUT',
          url: jQuery("#move_path").attr("value"),
          data: {
            "paths_to_move": paths,
            "path_to_move_to": moveTo,
            "initial_file_path": getPartialPathInitialFile()
          },
          success: function(data) {
            $("#lesson_file_management").html(data);
            //$("#lesson_file_management").html(data);
            deselect_all();
          },
          error: function() {
            flash_message("<%= I18n.t(:move_error, :scope => [:lesson_files]) %>", "alert", "flash_messages");
          }
        });
      }
    }
  }

}

function defineInitialFile(node){
  jQuery.ajax({
    type: 'PUT',
    url: jQuery("#initial_file_path").attr("value"),
    data: { "path": getPath(node) },
    success: function(data){
      $("#lesson_file_management").html(data);
      //$("#lesson_file_management").html(data);
      deselect_all();
    },
    error: function(){
      flash_message("<%= I18n.t(:initial_file_error, :scope => [:lesson_files]) %>", "alert", "flash_messages");
    }
  });
}

