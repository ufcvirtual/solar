= javascript_include_tag "assignments"

/ classe utilizada em botões que podem ou não estar desabilitados
- btn_class        = @assignment.on_evaluation_period?(@allocation_tag, current_user.id) ? "btn btn_main" : "btn btn_disabled"
- btn_edit_class   = @assignment.on_evaluation_period?(@allocation_tag, current_user.id) ? "btn btn_default" : "btn btn_disabled"
- btn_cancel_class = @assignment.assignment_in_time?(@allocation_tag, current_user.id) ? "btn btn_caution" : "btn btn_disabled"

/ Participantes do grupo ou nome do aluno
- if @assignment.type_assignment == Assignment_Type_Group
  - unless @group.nil?
    .block_wrapper_groups
      .block_user
        .title_user= t("assignment.group_assignments.group") + ":"
        = @group.group_name
      .block_user
        .title_user= t("assignment.group_assignments.participants") + ":"
        - gp = GroupParticipant.all_by_group_assignment(@group_id)
        - unless gp.empty?
          %ul.participants_list
            - gp.each do |participant|
              %li
                = participant.user.name
                - unless @class_participants.include? participant.user.id
                  %span{:"data-tooltip" => t(".moved_allocation")}= content_tag :i, nil, class: "icon-warning moved_allocation" 
        - else
          = t("assignment.group_assignments.no_participant")
  / Se for trabalho individual e não for o aluno que estiver na página, exibir de qual aluno é o trabalho
- elsif @student_id.to_i != @user.id
  .block_wrapper_groups
    .block_user
      .title_user
        = t(:student)+":"
      = User.find(@student_id).name
-# Descricao da atividade 
.block_wrapper.assingment_info
  .block_title
    %h2
      %i.icon-suitcase
      = @assignment.name
    - if can? :evaluate, @assignment
      - if @sent_assignment.nil? or @sent_assignment.grade.nil? or @sent_assignment.grade.blank?
        = button_tag t(:evaluate, :scope => [:assignment, :evaluation]), :class => btn_class, :id => "btn_evaluate", :onclick => "javascript:btn_evaluate(this, ' ');", :disabled => (not @assignment.on_evaluation_period?(@allocation_tag, current_user.id))
      - else
        = button_tag t(:change_grade, :scope => [:assignment, :evaluation]), :class => btn_edit_class, :id => "btn_evaluate", :onclick => "javascript:btn_evaluate(this, '#{@sent_assignment.grade}');", :disabled => (not @assignment.on_evaluation_period?(@allocation_tag, current_user.id))
      = button_tag t(:save, :scope => [:assignment, :evaluation]), :class => "btn btn_main", :id => "btn_save_evaluation", :disabled => (not @assignment.on_evaluation_period?(@allocation_tag, current_user.id)), :"data-student-id" => @student_id, :"data-group-id" => @group_id, :"data-assignment-id" => @assignment.id, onclick: "javascript:update_evaluation();"

      = button_tag t(:cancel, :scope => [:assignment, :evaluation]), :class => "btn btn_caution", :id => "btn_cancel_evaluation", :onclick => "javascript:btn_cancel_evaluation();", :disabled => (not @assignment.on_evaluation_period?(@allocation_tag, current_user.id))
  .block_content
    %table.tb_list{:border => "0", :cellpadding => "0", :cellspacing => "0", :width => "100%"}
      %thead
        %tr.lines
          %th.no_sort=t(:description, :scope => [:assignment, :information])
          %th.date_column.no_sort= t(:begin, :scope => [:assignment, :information])
          %th.date_column.no_sort= t(:end, :scope => [:assignment, :information])
          %th.center.no_sort{:style => "width:68px"}= t(:situation, :scope => [:assignment, :information])
          %th.center.no_sort{:style => "width:50px"}= t(:grade, :scope => [:assignment, :information])
      %tbody
        %tr.lines
          %td= @assignment.enunciation
          %td{:align => "center"}= l(@assignment.schedule.start_date, :format => :normal)
          %td{:align => "center"}= l(@assignment.schedule.end_date, :format => :normal)
          %td{:align => "center", :class => "assignment_#{@situation}"}= t(@situation.to_sym)
          / Área de avaliação
          %td#evaluate_assignment_student
            .student_assignment_evaluate
              - if @sent_assignment.nil? or @sent_assignment.grade.nil? or @sent_assignment.grade.blank?
                = "-"
              - else
                = @sent_assignment.grade
            .student_assignment_evaluation
              = text_field_tag :evaluation_grade, @sent_assignment.nil? ? "" : @sent_assignment.grade, :size => 3

/ Arquivos enviados pelo professor
.block_wrapper
  .block_title
    %h2
      %i.icon-suitcase
      = t(:activity_files, :scope => [:assignment, :files])
    %span.download_all_icon
      - unless @assignment_enunciation_files.empty?
        = button_tag(:type => :button, :onclick => "javascript:window.location.href='#{download_files_assignments_path(:assignment_id => @assignment.id, :type => "enunciation", :zip => true)}'", :class => "btn btn_default") do
          = content_tag(:span, t(:download_all_files_zip, :scope => [:assignment, :files]))
          %i.icon-install
  .block_content
    - unless @assignment_enunciation_files.empty?
      %table.tb_list{:border => "0", :cellpadding => "0", :cellspacing => "0", :width => "100%"}
        %thead
          %tr.lines
            %th= t(:name, :scope => [:assignment, :files])
            %th{:align => "right", :style => "width: 30px;"}= t(:size, :scope => [:assignment, :files])
            %th.date_column= t(:sent_on, :scope => [:assignment, :files])
          - @assignment_enunciation_files.each do |file|
            %tr.lines
              %td
                = link_to image_tag( icon_attachment(file.attachment_file_name) ), download_files_assignments_path(:assignment_id => @assignment.id, :file_id => file.id, :type => "enunciation"), { :class => "file_icon", :alt => t(:download_file, :file_name => file.attachment_file_name, :scope => [:assignment, :files]) }
                = link_to file.attachment_file_name, download_files_assignments_path(:assignment_id => @assignment.id, :file_id => file.id, :type => "enunciation"), {:class => "link_content"}
              %td= format('%.2f KB', file.attachment_file_size/1024.0)
              %td{:align => "center"}= l(file.attachment_updated_at, :format => :at_date)
    - else
      .portfolio_div_padding= t(:itens_not_found)

/ Arquivos enviados pelo aluno
.block_wrapper
  .block_title
    %h2
      %i.icon-suitcase
      = t(:sent_files, :scope => [:assignment, :files])
    %span.download_all_icon
      - unless @sent_assignment_files.nil? or @sent_assignment_files.empty?
        = button_tag(:type => :button, :onclick => "javascript:window.location.href='#{download_files_assignments_path(:assignment_id => @assignment.id, :student_id => @student_id, :group_id => @group_id, :type => "assignment", :zip => true)}'", :class => "btn btn_default") do
          = content_tag(:span, t(:download_all_files_zip, :scope => [:assignment, :files]))
          %i.icon-install
  .block_content
    - unless @sent_assignment_files.nil? or @sent_assignment_files.empty?
      %table.tb_list{:border => "0", :cellpadding => "0", :cellspacing => "0", :width => "100%"}
        %thead
          %tr.lines
            %th= t(:name, :scope => [:assignment, :files])
            %th{:align => "right", :style => "width: 80px"}= t(:size, :scope => [:assignment, :files])
            - if @assignment.type_assignment == Assignment_Type_Group 
              %th{:align => "center", :style => "width: 70px"}= t(:sent_by, :scope => [:assignment, :files])
            %th.date_column= t(:sent_on, :scope => [:assignment, :files])
            - if can?(:delete_file, @assignment) and @assignment.user_can_access_assignment?(@allocation_tag, @user.id, @student_id, @group_id)
              %th.no_sort{:style => "width: 30px"}
        %tbody
          - @sent_assignment_files.each do |file|
            %tr.lines
              %td
                = link_to image_tag(icon_attachment(file.attachment_file_name)), download_files_assignments_path(:assignment_id => @assignment.id, :file_id => file.id, :student_id => @student_id, :group_id => @group_id, :type => "assignment"), {:class => "file_icon", :alt => " "}
                = link_to file.attachment_file_name, download_files_assignments_path(:assignment_id => @assignment.id, :file_id => file.id, :student_id => @student_id, :group_id => @group_id, :type => "assignment"), {:class => "link_content"}
              %td.right= format('%.2f KB', file.attachment_file_size/1024.0)
              - if @assignment.type_assignment == Assignment_Type_Group
                %td.center= file.user.nick
              %td.center= l(file.attachment_updated_at, :format => :at_date)
              - if can? :delete_file, @assignment and file.user_id == @user.id
                %td= button_to t(:delete, :scope => [:assignment, :files]), delete_file_assignments_path(assignment_id: params[:id], file_id: file.id, type: 'assignment'), confirm: t(:delete_msg, scope: [:assignment, :files]), method: :delete, class: btn_cancel_class, disabled: (not @assignment.assignment_in_time?(@allocation_tag, current_user.id))
    - else
      .portfolio_div_padding= t(:itens_not_found)
    / Enviar arquivos
    - if can? :upload_file, @assignment and @assignment.user_can_access_assignment?(@allocation_tag, @user.id, @student_id, @group_id)
      .assignment_inner_content.upload_files
        - if @assignment.assignment_in_time?(@allocation_tag, current_user.id)
          = link_to content_tag(:i, nil, :class=>'icon-plus'), '#', :class => "image_upload_file", :onclick => "javascript:toggle_upload_div();"
          = link_to t(:click_to_add_file, :scope => [:assignment, :files]), '#', :class => "link_content link_upload_file", :onclick => "javascript:toggle_upload_div();"
        - else
          .disabled.link_upload_file= t(:click_to_add_file, :scope => [:assignment, :files])
        .upload_assignment_files{:style => "padding-top:6px"}
          - group_assignment_id = @group_participants.first.group_assignment_id unless @group_participants.nil?
          = form_for(:assignment, :url => upload_file_assignments_path(:assignment_id => @assignment.id, :type => 'assignment'), :html => { :onsubmit => "return btn_upload_file();" }) do |f|
            %p
              = f.file_field :assignment_file, :name => :assignment_file
              .portfolio_title_button
                = f.submit t(:send), :class => (@assignment.assignment_in_time?(@allocation_tag, current_user.id) ? "btn btn_main" : "btn btn_disabled")
                = button_tag(:type => :button, :class => "btn btn_caution", :onclick => "javascript:toggle_upload_div();") do
                  = content_tag(:span, t(:cancel, :scope => [:assignment, :evaluation]))
            - if @assignment.assignment_in_time?(@allocation_tag, current_user.id)
              %p.block_content_gray
                = t(:send_file_obs, :scope => [:assignment, :files])
              %p.block_content_gray=raw t(:send_file_text, :scope => [:assignment, :files])

/ Área de comentários
.block_wrapper
  .block_title
    %h2
      %i.icon-comment
      = t(:comments, :scope => [:assignment, :comments])
    %span.portfolio_title_button
      - if can? :send_comment, AssignmentComment and can? :send_comment, @assignment
        = button_tag t(:new, :scope => [:assignment, :comments]), :class => btn_class, :id => "btn_comment", :onclick => "javascript:btn_comment();", :disabled => (not @assignment.on_evaluation_period?(@allocation_tag,current_user.id))
        = button_tag(:type => 'button', :class => "btn btn_caution", :id => "btn_cancel_comment", :alt => t(:cancel, :scope => [:assignment, :comments]), :onclick => "javascript:btn_cancel_comment('new');") do
          = content_tag(:span, t(:cancel, :scope => [:assignment, :comments]))
        = button_tag t(:save, :scope => [:assignment, :comments]), :class=>'btn btn_main', :id => "btn_save_comment_new", :onclick => "javascript:$('#comment_form').submit();"
  .assignment_comment_wrapper
    - display_comment = @error_message.nil? ? "display:none" : "display:block"
    .comment_form{:style => "#{display_comment}"}
      %table.assignment_comment{:border => "0", :cellpadding => "0", :cellspacing => "0", :width => "100%"}
        %tr
          %td.assignment_comment_head
            .assignment_user_comment= @user.nick
            .assignment_comment_date=l Date.current
        %tr
          %td.assignment_comment_form{:colspan => "2"}
            = form_for(:assignment_comment, :html => {:id => 'comment_form', :multipart => true}, :url => send_comment_assignment_path(@assignment.id, :student_id => @student_id, :group_id => @group_id)) do |f|
              .assignment_inner_content.comment_area= text_area_tag :comment, '', :rows => 4
              .forum_post_attachment
                %h3= t(:attached_files, :scope => [:assignment, :files])
                %ul.comments_files_div
                  = file_field_tag 'comment_files[]', :class => "comments_files"
                  %a.more_comment_files_link{:href => "#", :onclick => "javascript:more_files(this);"}
                    = t(:attach_another, :scope => [:assignment, :files])

    - unless @comments.nil? or @comments.empty?
      - @comments.each_with_index do |comment, idx|
        %table.assignment_comment.tb_comments{:class => "tb_comment_#{comment.id}", :border => "0", :cellpadding => "0", :cellspacing => "0", :width => "100%"}
          %tr
            %td.assignment_comment_head
              .assignment_user_comment= comment.user.nick
              .assignment_comment_date
                - unless comment.updated_at.blank?
                  = l(comment.updated_at, :format => :long)
                - else
                  = '-'
          %tr
            %td.assignment_comment_form.assignment_comment{:class => "comment_#{comment.id}", :colspan => "2"}
              .assignment_inner_content
                %span{class: "comment_#{comment.id}", :'data-value' => comment.comment}=simple_format comment.comment
                .portfolio_comment_button
                  - if can? :send_comment, comment
                    = button_tag t(:edit, :scope => [:assignment, :comments]), :class => btn_edit_class + " btn_edit_comment_#{comment.id}", :onclick => "javascript:btn_edit_comment(this, #{comment.id});", :disabled => (not @assignment.on_evaluation_period?(@allocation_tag, current_user.id))
                  - if can? :remove_comment, comment and can? :remove_comment, @assignment
                    - btn_remove = @assignment.on_evaluation_period?(@allocation_tag, current_user.id) ? "btn btn_caution" : "btn btn_disabled"
                    = button_tag t(:delete, :scope => [:assignment, :comments]), :class => btn_remove, :onclick => "javascript:remove_comment(#{comment.id}, #{@assignment.id});", :disabled => (not @assignment.on_evaluation_period?(@allocation_tag, current_user.id))
              .forum_post_attachment
                - unless comment.comment_files.empty?
                  %h3= t(:attached_files, :scope => [:assignment, :files])
                  %ul.comments_files_div
                    - comment.comment_files.each do |comment_file|
                      %li
                        = link_to image_tag(icon_attachment(comment_file.attachment_file_name)), download_files_assignments_path(:assignment_id => @assignment.id, :file_id => comment_file.id, :student_id => @student_id, :group_id => @group_id, :type => "comment"), {:class => "file_icon", :alt => t(:download_file, :file_name => comment_file.attachment_file_name, :scope => [:assignment, :files])}
                        = link_to comment_file.attachment_file_name, download_files_assignments_path(:assignment_id => @assignment.id, :file_id => comment_file.id, :student_id => @student_id, :group_id => @group_id, :type => "comment"), {:class => "link_content"}
                        .assignment_files_info= l(comment_file.attachment_updated_at, :format => :at_date)
                        .assignment_files_info= format('%.2f KB', comment_file.attachment_file_size/1024.0)

              %td.assignment_comment_form.form_comment{:class => "form_comment_#{comment.id}", :colspan => "2", :style => "display:none"}
                = form_for(:assignment_comment, :html => {:id => "comment_form_#{comment.id}", :multipart => true}, :url => send_comment_assignment_path(@assignment.id, :student_id => @student_id, :group_id => @group_id, :comment_id => comment.id)) do |f|
                  .forum_post_inner_content.assignment_inner_content
                    = text_area_tag :comment, comment.comment, rows: 4, :'data-comment-id' => comment.id
                    .portfolio_title_button
                      = button_tag(:type => 'button', :class => "btn btn_caution", :id => "btn_cancel_comment_#{comment.id}", :alt => t(:cancel, :scope => [:assignment, :comments]), :onclick => "javascript:btn_cancel_comment('#{comment.id}');") do
                        = content_tag(:span, t(:cancel, :scope => [:assignment, :comments]))
                      = button_tag t(:save, :scope => [:assignment, :comments]), :class => "btn btn_main", :onclick => "javascript:submit_edit_comment_form(#{comment.id});"
                  .forum_post_attachment
                    %h3= t(:attached_files, :scope => [:assignment, :files])
                    %ul.comments_files_div
                      - unless comment.comment_files.empty?
                        - comment.comment_files.each do |comment_file|
                          %li
                            = link_to image_tag(icon_attachment(comment_file.attachment_file_name)), download_files_assignments_path(:assignment_id => @assignment.id, :file_id => comment_file.id, :student_id => @student_id, :group_id => @group_id, :type => "comment"), {:class => "file_icon", :alt => t(:download_file, :file_name => comment_file.attachment_file_name, :scope => [:assignment, :files])}
                            = link_to comment_file.attachment_file_name, download_files_assignments_path(:assignment_id => @assignment.id, :file_id => comment_file.id, :student_id => @student_id, :group_id => @group_id, :type => "comment"), {:class => "link_content link_comment_#{comment_file.id}", :id => "#{comment_file.id}", :alt => t(:download_file, :file_name => comment_file.attachment_file_name, :scope => [:assignment, :files])}
                            .assignment_comment_date= l(comment_file.attachment_updated_at, :format => :at_date)
                            / = button_tag(:type => :button, :onclick => "javascript:remove_file(#{comment_file.id}, #{comment.id}, this);", :id => "remove_file_#{comment_file.id}", :class => "btn btn_default", :title => t(:remove_file, :file_name => comment_file.attachment_file_name, :scope => [:assignment, :files]), :alt => t(:remove_file, :file_name => comment_file.attachment_file_name, :scope => [:assignment, :files])) do
                            /   %i.icon-trash
                            = link_to (content_tag(:i, nil, :class=>'icon-cross-circle warning')), '#', :onclick => "javascript:remove_file(#{comment_file.id}, #{comment.id}, this);", :id => "remove_file_#{comment_file.id}", :title => t(:remove_file, :file_name => comment_file.attachment_file_name, :scope => [:assignment, :files])
                            = link_to (content_tag(:i, nil, :class=>'icon-restore')), '#', :onclick => "javascript:recover_file(#{comment_file.id}, #{comment.id}, this);", :id => "recover_file_#{comment_file.id}", :title => t(:recover_file, :file_name => comment_file.attachment_file_name, :scope => [:assignment, :files])
                      = hidden_field_tag 'deleted_files[]', "", {:id => "delete_file_#{comment.id}"}
                      = file_field_tag 'comment_files[]', :class => "comments_files"
                      %a.more_comment_files_link{:href => "#", :onclick => "javascript:more_files(this);"}= t(:attach_another, :scope => [:assignment, :files])
    - else
      .block_content.portfolio_div_padding#no_itens_message_comment
        = t(:itens_not_found)

:javascript
  function submit_edit_comment_form(comment_id){
    if(!confirm("#{t(:confirm_comment, :scope => [:assignment, :comments])}")) return;

    var deleted_files  = new Array();
    var disabled_files = $(".disabled_file_"+comment_id);
    $(disabled_files).each(function(i){
      deleted_files.push($(disabled_files)[i].id);
    });
    $("#delete_file_"+comment_id).val(deleted_files); 
    $("#comment_form_"+comment_id).submit();
  }

  function btn_cancel_comment(comment_id, comment_content){
    if (confirm('#{t(:cancel_comment, :scope => [:assignment, :comments])}')){
      undo_btn_comment_changes(comment_id);  
      flash_message('#{t(:comment_canceled, :scope => [:assignment, :comments])}', 'notice');
    }
  }

  function no_comments_div(){
    var dont_have_comments = $('.tb_comments').length == 0;
    var dont_already_have_message = $("#no_itens_message_comment").length == 0;
    if (dont_already_have_message){
      if(dont_have_comments){
        $('<div id="no_itens_message_comment" class="block_content portfolio_div_padding">#{t(:itens_not_found)}</div>').appendTo($(".assignment_comment_wrapper"));
      }else{
        $('#no_itens_message_comment').remove();
      }
    }
  }

  function remove_comment(comment_id){
    url = '#{remove_comment_assignment_path(@assignment.id)}';
    if (!confirm("#{t(:message_confirm)}")) return;
      $.ajax({
        type: "DELETE",
        url: url,
        data: {'comment_id': comment_id},
        success: function(data) {
          if (data.success == true) {
            $('.tb_comment_' + comment_id).remove();
          }
          flash_message(data.flash_msg, data.flash_class);
          no_comments_div();
        }
      }).error(function(){
        flash_message("#{t(:no_permission)}", "alert");
      });
  }
