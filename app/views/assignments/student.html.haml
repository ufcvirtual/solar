%section.block_wrapper_groups
  - unless @group.nil?
    = image_tag 'group.png', alt: t(:mysolar_alt_img_user)
    .block_user
      .title_user= t('.group')
      = @group.group_name
      %div
      .title_user= t('.participants')
      - participants = @group.users
      - unless participants.empty?
        %ul.participants_list
          - participants.each do |participant|
            %li
              = participant.name
              - unless @class_participants.include? participant.id
                %span{:"data-tooltip" => t('.moved_allocation'), :'aria-label' => t(".moved_allocation")}= content_tag :i, nil, class: 'icon-warning moved_allocation'
      - else
        = t(".no_participants")
  - else
    - user = User.find(@student_id)
    = image_tag user.user_photo(:forum), alt: t(:mysolar_alt_img_user) + ' ' + user.nick
    .block_user
      .title_user= t('.student')
      = user.name

%section.block_wrapper.assignment_info
  .title
    %h2
      %i.icon-suitcase
      = @assignment.name
  .block_content
    %table.tb_list{:summary=> t("assignments.list.summary_descricao")}
      %thead
        %tr.lines
          %th.no_sort=t('.description')
          - if !@group.nil? && @can_evaluate
            %th.no_sort
              .individually_graded_setter
                = t('.individually_graded')
                %a.individually_graded_link{href: "#void", remote: true, :'data-link' => individually_graded_assignment_path(group_id: @group.id)}= image_tag "#{@group.individually_graded ? 'released' : 'rejected'}.png"
      %tbody
        %tr.lines
          %td= @assignment.enunciation
    = render partial: 'info'

%section.assignment_files.files
  = render partial: 'files', locals: { files: @assignment.try(:enunciation_files) }

%section.comments
  = render partial: 'comments/list', locals: { comments: @acu.try(:comments), tool: @assignment, tool_type: 'Assignment' }

%section.student_files.files
  = render partial: 'assignment_files/list', locals: { files: @acu.try(:assignment_files), disabled: false }

%section.student_webconferences.files
  = render partial: 'assignment_webconferences/list', locals: { webconferences: @acu.try(:assignment_webconferences), disabled: false }

.block_wrapper{ style: 'float:left' }
  = link_to t(:back), :back, class: "btn", id: 'back'

:javascript
  $('#page_title').attr("tabindex", "0");
  $('#page_title').focus();

  function delete_file(button){
    $(button).nice_delete({
      parent: 'tr.lines'
    });
  }

  function add_file(button){
    if(!$(button).hasClass("disabled"))
      $(button).call_fancybox({
        href: "#{new_assignment_file_path(assignment_id: @assignment.id, student_id: @student_id, group_id: @group_id)}",
        open: true,
        element_selector: '#focu'
      });
  }

  $(function(){
    var mutex = { lock: 1 }; // Trava para garantir que o usuário faça 1 requisição por vez
    var message_confirm_individually_graded = "#{t('assignments.confirm_individually_graded')}";
    var message_confirm_group_graded = "#{t('assignments.confirm_group_graded')}";

    $(".link_send_msg").on('click', function(event){
      event.preventDefault();

      students_ids = []

      if($(".block_user span").data() != null){
        students_ids.push($(".block_user span").data().id)
      }

      $('.participants_list li').each(function(index, element){
        students_ids.push(element.dataset.id)
      });

      var url = $(this).data('url').replace(':user_ids', students_ids.join(","));
      $(this).call_fancybox({
        href: url,
        open: true
      });

    });

    $(".individually_graded_link").on('click', function(event){
      event.preventDefault();

      var link = this;
      var confirm_change = false;

      if($(link).find('img').attr('src') == '/assets/rejected.png') {
        var group_already_evaluated = !!$('.without_individually_graded').find('td.evaluation').find('.text').text().trim() || !!$('.without_individually_graded').find('td.frequency').find('.text').text().trim();

        if(group_already_evaluated) {
          var confirm_change = confirm(message_confirm_individually_graded);
          if(confirm_change) {
            individually_graded_toggle(link, mutex);
          }
        } else {
          individually_graded_toggle(link, mutex);
        }
      } else {
        var there_is_student_already_evaluated = false;

        $('.with_individually_graded').each(function() {
          if(!!$(this).find('td.evaluation').find('.text').text().trim() || !!$(this).find('td.frequency').find('.text').text().trim()) {
            there_is_student_already_evaluated = true;
            return;
          }
        });

        if(there_is_student_already_evaluated) {
          var confirm_change = confirm(message_confirm_group_graded);
          if(confirm_change) {
            individually_graded_toggle(link, mutex);
          }
        } else {
          individually_graded_toggle(link, mutex);
        }
      }
    });

  });

  function individually_graded_toggle(link, mutex) {
    $(link).find('img').addClass('individually_graded_link_cursor_wait');

    if( mutex.lock > 0 ) {
      mutex.lock -= 1;

      $.ajax({
        dataType: "json",
        method: "PUT",
        url: $(link).data("link"),
        data: {
          "individually_graded": $(link).find('img').attr('src') == '/assets/rejected.png' ? true : false
        },
        success: function(data) {
          var src = $(link).find('img').attr('src');

          if (src=='/assets/released.png'){
            var newsrc = '/assets/rejected.png';
          } else {
            var newsrc = '/assets/released.png';
          }

          $(link).find('img').attr('src', newsrc);
          $(link).find('img').removeClass('individually_graded_link_cursor_wait');

          flash_message(data.notice, 'notice');
          mutex.lock += 1;
        },
        error: function(data) {
          $(link).find('img').removeClass('individually_graded_link_cursor_wait');

          var data = $.parseJSON(data.responseText);
          if (typeof(data.alert) != "undefined")
            flash_message(data.alert, 'alert');

          mutex.lock += 1;
        }
      });
    }
  }
