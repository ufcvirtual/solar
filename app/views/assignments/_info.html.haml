- info = @assignment.info(@student_id, @allocation_tag_id, @group_id)
- acu_student = @individually_graded_acus.select { |acu| acu.user_id == @student_id.to_i }.first unless @individually_graded_acus.nil?
.responsive-table
  %table.tb_list{:summary=> t("assignments.list.summary_info")}
    %thead
      %tr.lines{ style: 'border-top: 1px solid #c0c0c0;' }
        %th.center.student_name.no_sort{class: @group.individually_graded && !@only_student_profile ? '' : 'hide'}= t(:student)
        %th.center.date_column.no_sort{id: "begin", :'aria-label' => t(".date_begin")}= t('.begin')
        %th.center.date_column.no_sort{id: "end", :'aria-label' => t(".date_end")}= t('.end')
        %th.center.no_sort{ style: 'width:20%', id: "situation" }= t('.situation')
        %th.center.no_sort{ style: 'width:15%', id: "grade" }= t('.grade')
        - if @ac.frequency
          %th.center.no_sort{ style: 'width:10%', id: "working_hours" }= t('.working_hours')
        - if @can_evaluate
          %th.center.no_sort{ style: 'width:20%',id: "evaluate" }
        %th.no_sort.to_hide{class: 'hide'}
    %tbody.info
      %tr.lines.without_individually_graded{class: @group.individually_graded && !@only_student_profile ? 'hide' : ''}
        = simple_form_for :academic_allocation_user, url: evaluate_assignment_path(@assignment), html: { method: :put } do |f|
          - if @assignment.start_hour.blank?
            %td.center{headers: "begin" }= l(@assignment.schedule.start_date, format: :normal)
            %td.center{headers: "end" }= l(@assignment.schedule.end_date, format: :normal)
          - else
            %td.center{headers: "begin" }= l(@assignment.schedule.start_date, format: :normal) + t(".at") + @assignment.start_hour
            %td.center{headers: "end" }= l(@assignment.schedule.end_date, format: :normal) + t(".at") + @assignment.end_hour
          %td.center{:class => "assignment_#{info[:situation]}", headers: "situation"}= t(info[:situation].to_sym)
          = f.input :user_id, as: :hidden, input_html: { value: @student_id }
          = f.input :group_id, as: :hidden, input_html: { value: @group_id }
          %td.center.evaluation{headers: "grade" }
            .student_assignment_evaluation
              .text
              - if !@group.nil? && @group.individually_graded
                = acu_student.try(:grade)
              - else
                = @acu.try(:grade)
              - if @can_evaluate && @in_time
                .input.invisible
                  = f.input :grade, required: true, as: :float, step: 0.01, label: false, input_html: {  value: @acu.try(:grade), min:0, max:10, style: 'width: 50px', :'aria-label' => t(".grade") }
          - if @ac.frequency
            %td.center.frequency{headers: "working_hours" }
              .student_assignment_evaluation
                .text
                - if !@group.nil? && @group.individually_graded
                  = acu_student.try(:working_hours)
                - else
                  = @acu.try(:working_hours)
                - if @can_evaluate && @in_time
                  .input.invisible
                    = f.input :working_hours, required: true, as: :float, label: false, input_html: { style: 'width: 90px', value: @acu.try(:working_hours), min:0, max: @ac.max_working_hours, :'aria-label' => t(".working_hours"), placeholder: t(:info_frequency, scope: [:chat_rooms, :user_messages], wh:@ac.max_working_hours.to_s ) }
          - if @can_evaluate && @in_time
            %td.center{headers: "evaluate" }
              .edit_button= link_to content_tag(:i, nil, class: 'icon-write'), "#void", onclick: 'edit_button(this)', class: "btn edit", :'aria-label' => t(".edit"), :"data-tooltip" => t(".edit")
              .evaluation_buttons.invisible
                = link_to content_tag(:i, nil, class: 'icon-checkmark'), "#void", onclick: 'finish_evaluation(this)', class: 'btn btn_main', :"data-tooltip" => t('.save'), :'aria-label' => t(".save")
                = link_to content_tag(:i, nil, class: 'icon-cross'), "#void", onclick: 'cancel_button(this)', class: "btn btn_caution cancel_evaluation", :"data-tooltip" => t('.cancel'), :'aria-label' => t(".cancel")
      - unless @individually_graded_acus.nil? || @individually_graded_acus.empty? || @only_student_profile
        - @individually_graded_acus.each do |acu|
          %tr.lines.with_individually_graded{class: @group.individually_graded ? '' : 'hide'}
            = simple_form_for :academic_allocation_user, url: evaluate_assignment_path(@assignment), html: { method: :put } do |f|
              %td.center{style: 'width: 20%'}= acu.user_name
              - if @assignment.start_hour.blank?
                %td.center{headers: "begin" }= l(@assignment.schedule.start_date, format: :normal)
                %td.center{headers: "end" }= l(@assignment.schedule.end_date, format: :normal)
              - else
                %td.center{headers: "begin" }= l(@assignment.schedule.start_date, format: :normal) + t(".at") + @assignment.start_hour
                %td.center{headers: "end" }= l(@assignment.schedule.end_date, format: :normal) + t(".at") + @assignment.end_hour
              %td.center{:class => "assignment_#{info[:situation]}", headers: "situation"}= t(info[:situation].to_sym)
              = f.input :user_id, as: :hidden, input_html: { value: acu.user_id }
              = f.input :group_id, as: :hidden, input_html: { value: acu.group_assignment_id }
              %td.center.evaluation{headers: "grade" }
                .student_assignment_evaluation
                  .text
                    = acu.grade
                  - if @can_evaluate && @in_time
                    .input.invisible
                      = f.input :grade, required: true, as: :float, step: 0.01, label: false, input_html: {  value: acu.grade, min:0, max:10, style: 'width: 50px', :'aria-label' => t(".grade") }
              - if @ac.frequency
                %td.center.frequency{headers: "working_hours" }
                  .student_assignment_evaluation
                    .text
                      = acu.working_hours
                    - if @can_evaluate && @in_time
                      .input.invisible
                        = f.input :working_hours, required: true, as: :float, label: false, input_html: { style: 'width: 90px', value: acu.working_hours, min:0, max: @ac.max_working_hours, :'aria-label' => t(".working_hours"), placeholder: t(:info_frequency, scope: [:chat_rooms, :user_messages], wh:@ac.max_working_hours.to_s ) }
              - if @can_evaluate && @in_time
                %td.center{headers: "evaluate" }
                  .edit_button= link_to content_tag(:i, nil, class: 'icon-write'), "#void", onclick: 'edit_button(this)', class: "btn edit", :'aria-label' => t(".edit"), :"data-tooltip" => t(".edit")
                  .evaluation_buttons.invisible
                    = link_to content_tag(:i, nil, class: 'icon-checkmark'), "#void", onclick: 'finish_evaluation(this)', class: 'btn btn_main', :"data-tooltip" => t('.save'), :'aria-label' => t(".save")
                    = link_to content_tag(:i, nil, class: 'icon-cross'), "#void", onclick: 'cancel_button(this)', class: "btn btn_caution cancel_evaluation", :"data-tooltip" => t('.cancel'), :'aria-label' => t(".cancel")

= javascript_include_tag "tooltip"

:javascript
  function cancel_button(btn){
    $(btn).parent().addClass("invisible");
    $(btn).closest('td').find('.edit_button').removeClass("invisible");
    $(btn).closest('tr').find('td .input').addClass('invisible');
    $(btn).closest('tr').find('td .text').removeClass('invisible');
  }

  function edit_button(btn){
    $(btn).parent().addClass("invisible");
    $(btn).closest('td').find('.evaluation_buttons').removeClass("invisible");
    $(btn).closest('tr').find('td .input').removeClass('invisible');
    $(btn).closest('tr').find('td .text').addClass('invisible');
  }

  function finish_evaluation(btn){
    var form = $(btn).closest('tr').find('form');
    $.put(form.attr('action'), form.serialize(), function(data){
      flash_message(data.notice, 'notice');
      var td = form.closest('tr').find('td.evaluation');
      td.find('.text').html(td.find('.input input').val());
      td = form.closest('tr').find('td.frequency');
      td.find('.text').html(td.find('.input input').val());

      cancel_button(btn);
    }).error(function(data){
      var data = $.parseJSON(data.responseText);
      if (typeof(data.alert) != "undefined")
        flash_message(data.alert, 'alert');
    });
  }
