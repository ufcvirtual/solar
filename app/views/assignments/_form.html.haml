.new_assignment

  = simple_form_for @assignment, html: { id: 'assignment_form' } do |f|
    %h1#lightBoxDialogTitle= t((@assignment.persisted? ? ".edit" : ".new"))
    %span.form_requirement= t(:required_fields)

    = hidden_field_tag :allocation_tags_ids, @allocation_tags_ids

    .form-inputs.block_content.assignments_box
      = f.input :name, required: true
      = f.input :enunciation, required: true

      = f.simple_fields_for :schedule do |s|
        .schedule_dates
          .left= s.input :start_date, as: :string, input_html: {id: 'assignment_start_date', value: l(@assignment.schedule.start_date.try(:to_date) || Date.today, format: :datepicker)}
          .right_form= s.input :end_date, as: :string, input_html: {id: 'assignment_end_date', value: l(@assignment.schedule.end_date.try(:to_date) || Date.today, format: :datepicker)}

        .schedule_dates.hour
          .left
            = f.input :start_hour
          .right_form
            = f.input :end_hour    

      - types = {:"#{t('.individual')}" => Assignment_Type_Individual, :"#{t('.group')}" => Assignment_Type_Group}
      = f.input :type_assignment, collection: types, include_blank: false, required: true

      .input.files
        = f.label t(".files")
        %i.icon-paperclip.new_file

      = f.simple_fields_for :enunciation_files do |files|
        .file_input
          = files.input :_destroy, as: :hidden, input_html: {value: 0, class: "destroy_input_file", :"data-file-id" => files.object.id}
          = files.input :attachment, label: false, input_html: {id: "fileupload"}

      .input.list_files_to_send
        - @assignment.enunciation_files.each do |ef|
          - if ef.persisted?
            .input.files
              %label
              %span#file{:"data-file-id" => ef.id}
                = ef.attachment_file_name
                %i.icon-cross-square.warning.remove_file
        - if @files_errors
          %span.field_with_errors.error= @files_errors

      = render "groups/codes"

      .right_buttons
        = button_to_function t(:cancel), "jQuery.fancybox.close()", class: "btn btn_default btn_lightbox", type: "button"
        = button_tag t(:save), :class => "btn btn_main btn_lightbox", type: "button", id: "save"

:css
  .schedule_dates .input input, #assignment_type_assignment {
    width: 85px;
  }

  .schedule_dates .left, .right {
    float: left;
  }

:javascript

  $("#assignment_start_date, #assignment_end_date").mask("#{I18n.t('date.formats.mask')}");
  $("#assignment_start_hour").mask("99:99");
  $("#assignment_end_hour").mask("99:99");

  jQuery(function($){

    if ($(".file_input:last").length)
      var nested_form = $(".file_input:first");

    // clona um arquivo existente e atualiza o nome
    function add_new_file() {
      var new_form = nested_form.clone();
      var forms_on_page = $(".file_input").length;
      var input_name = $("input[type='file']", new_form).attr("name");
      input_name = input_name.replace(new RegExp(/\[[0-9]+\]/), "[" + forms_on_page + "]");
      $("input", new_form).attr("name", input_name);

      $(new_form).insertAfter( nested_form.last() );
      $("input[type='file']", new_form).click();

      $("input[type='file']", new_form).change(function(){
        var new_file_name = "<div class='input files'> <label></label> <span id='file' data-input-file-name=" + input_name + ">" + this.files[0].name + "<i class='icon-cross-square warning remove_file'></i> </span> </div>";

        if ($(".list_files_to_send .files:last").lenght)
          $(".list_files_to_send .files:last").after(new_file_name);
        else
          $(".list_files_to_send").append(new_file_name);

        $(".remove_file").click(function(){
          var span_file = $(this).parents('span#file');

          $("[name='" + span_file.data("input-file-name") + "']").parents("div.file_input").remove();
          $(span_file).parents('div.input.files').remove();
        });
      });
    }

    //// edicao

    $(".remove_file").click(function(){
      var span_file = $(this).parents('span#file');

      $("[name='" + span_file.data("input-file-name") + "']").parents("div.file_input").remove(); // pra edicao nao serve
      $("input[data-file-id=" + span_file.data("file-id") + "]").val(1); // edicao: colocar o _destroy com valor 1
      $(span_file).parents('div.input.files').remove();
    });


    $(".new_file").click(function(e){
      e.preventDefault();
      add_new_file();
    });

    $('#save').click(function(){
      $('#assignment_form:last').serialize_and_submit({
        files: true,
        replace_list: (("#{escape_once(params[:calendar])}" == "") ? $(".list_assignments") : $(".calendar_schedules"))
      });
      setTimeout(function() {
        focuInpuErro();
      }, 700);  
    });

    // datepicker //

    /* se a data ficar vazia, recebe a data que veio ao carregar o formulário ou uma data permitida de acordo com a relação data final - data inicial */
    $('#assignment_end_date').blur(function(){
      if ($(this).datepicker("getDate") == null)
        $(this).datepicker("setDate", new Date("#{escape_once(@assignment.schedule.end_date)}"));
    });

    $('#assignment_start_date').blur(function(){
      if($(this).datepicker("getDate") == null)
        $(this).datepicker("setDate", new Date("#{escape_once(@assignment.schedule.start_date)}"));
    });

    var options = $.extend({}, $.datepicker.regional['#{I18n.locale}']);
    $('#assignment_start_date').datepicker( $.extend({}, options, { onSelect: function(selected) { $('#assignment_end_date').datepicker("option", "minDate", selected); } }) );
    $('#assignment_end_date').datepicker( $.extend({}, options, { onSelect: function(selected) { $('#assignment_start_date').datepicker("option", "maxDate", selected); } }) );

  });
