.block_wrapper#forum_description
  .block_title
    %h2
      %i.icon-forum
      = @discussion.name
  .block_content.block_content_text= sanitize @discussion.description

.block_wrapper
  = content_tag(:i, nil, class: 'icon-pluscircle.png')
  .block_title.forum_navigation
    %span#forum_new_message
      - if @can_interact
        - if @can_post
          = button_tag(type: 'button', onclick: "javascript:new_post(this);", class: 'btn btn_main', id: 'button_new_post', :'data-tooltip' => t(:forum_new_message), :'aria-label'=> t(:forum_new_message)) do
            = content_tag(:i, nil, class: 'icon-edit')
      - else
        #forum_closed= t("forum_closed")

    %span#forum_view_mode
      - class_l = (@display_mode == 'list') ? 'btn_pressed' : 'btn_default'
      - class_t = (@display_mode == 'tree') ? 'btn_pressed' : 'btn_default'

      .btn-group
        = link_to content_tag(:i, nil, class: 'icon-list'), discussion_posts_path(@discussion, {display_mode: 'list'}), {class: "btn #{class_l}", id: 'forum_view_mode-list', :"data-tooltip" => t(".show_plainlist"), :"aria-label" => t(".show_plainlist")}
        = link_to(content_tag(:i, nil, class: 'icon-flow-cascade'), discussion_posts_path(@discussion, {display_mode: 'tree'}), {class: "btn #{class_t}", id: 'forum_view_mode-thread', :"data-tooltip" => t(".show_thread"), :'aria-label' => t(".show_thread")})

    #forum_pagination
      = raw render_pagination_bar(@discussion.discussion_posts_count(@display_mode == "list", @allocation_tags).to_s, "display_mode=#{@display_mode}")
      .new_posts
        #new_post
          = form_for(:discussion_post, html: { id: 'new_post_form', :'action-to-edit' => discussion_post_path(@discussion.id, ':id'), :"action-default" => discussion_posts_path(@discussion.id), method: :put }) do |form|
            = hidden_field(:discussion_post, :parent_id, { value: '' })
            = hidden_field_tag(:display_mode, @display_mode, :id=>'display_mode_1')
            = hidden_field_tag(:current_page, @current_page, :id=>'current_page_1')
            = form.text_area :content
            = render partial: 'extra_tools/speech2text', locals: {class_name: 'left', ckeditor: true, div_id: 'discussion_post_content', number: '', field: ''}
            .new_post_dialog_buttons.btn-group
              = button_tag content_tag(:span, t(:cancel)), type: 'button', onclick: "cancel_posting(this)", class: 'btn btn_caution', id: 'btn_cancel_post'
              = button_tag t(:send), class: "btn btn_main", id: "submit_post", type: :button
    .forum_post_new

  .forum_posts_wrapper
    - @count = 0
    - @hash = { } unless @display_mode == 'list'
    - @posts = get_page_posts(@posts, @current_page) unless @display_mode == 'list'
    - @posts.each do |post|
      = render partial: 'post', locals: { post: post, display_mode: @display_mode, can_interact: @can_interact, can_post: @can_post, current_user: @user, new_post: false, number: '' }
.block_wrapper
  = link_to t(:back), :back, { class: 'btn' , id: 'back' }, :'aria-label' => t(:back)

= javascript_include_tag 'ckeditor/init', 'discussions', 'jwplayer/jwplayer.js', 'contextual_help/discussion_posts'

:javascript

  var locale = "#{I18n.locale}";
  $("#button_new_post").focus();

  $(function(){

    CKEDITOR_BASEPATH  = "#{request.env['RAILS_RELATIVE_URL_ROOT']}/assets/ckeditor/";
    var websocket_host = "#{YAML::load(File.open("config/global.yml"))[Rails.env.to_s]["websocket"]["host"]}";
    var websocket_port = "#{YAML::load(File.open("config/global.yml"))[Rails.env.to_s]["websocket"]["port"]}"

    $(".forum_button_attachment").call_fancybox({
      afterShow: function(){
        $('#focu').attr("tabindex", "0");
        $('#focu').focus();
      }
    });
    var display_list = ("#{escape_once(@display_mode) == 'list'}" == "true");
    var ac = "#{@academic_allocation_id}";

    $(".media").each(function(){
      var mediaId = $(this).attr('id');
      var mediaSrc = $(this).data('source');
      var type = $(this).data('type');

      if (type == 'm4a') {
        type = 'aac'
      }

      if (type == 'mp4') {
        mediaPlayer(mediaId, mediaSrc, 'mp4', 320, 240);
      } else {
        mediaPlayer(mediaId, mediaSrc, type, 240, 30);
      };
    });

    function mediaPlayer(id, source, type, width, height) {
      jwplayer(id).setup({
        playlist: [{
          sources: [{
            file: source,
            type: type
          }]
        }],
        width: width,
        height: height
      });
    }

    /*Conexão com o WebSocket*/
    var ws = new WebSocket('ws://'+websocket_host+':'+websocket_port+'/'+ac); // file websocket_server.rb
    ws.onopen = function (){ }; // ao iniciar ws
    ws.onclose = function () { }; // ao perder conexão com o ws
    ws.onerror = function (err) { }; // ao receber erro no ws

    // new messages
     ws.onmessage = function (msg) {
      var data = JSON.parse(msg.data);
      var post_table   = $("table#"+data.post_id);
      var parent_table = $("table#"+data.parent_id);
      // recover grandparent if has parent, but it doesn't exists at view (so it must render all tree of posts) and isn't list view and it is at first page
      var grandparent  = (data.parent_id != null && !parent_table.length && !display_list && (1 == parseInt("#{escape_once(@current_page)}")));

      $.get("#{discussion_post_path(@discussion.id, ':id', researcher: @researcher)}".replace(':id', data.post_id), {new_post: true, grandparent: grandparent}, function(data2){
        if (!!post_table.length) // if post exists
          post_table.html(data2);
        else
          if (!!parent_table.length && !display_list){ // if has parent and isn't list view
            $(parent_table.find("td.forum_post_content .forum_post_wrapper")[0]).after(data2);
            parent_table.find(".forum_post_buttons:first").find(".update_post:first, .forum_button_attachment:first, .btn_caution:first").remove();
          }else // if hasn't parent and is at the same page or is list view
            if (data.parent_id == null && (1 == parseInt("#{escape_once(@current_page)}")) || !!display_list || !!grandparent)
              $(".forum_posts_wrapper").prepend(data2);

        add_post_count_warning("#{escape_once(@current_page)}");
      });
    }

    $("#submit_post").click(function(){
      var form    = $($(this).parents("form")[0]);
      var content = CKEDITOR.instances["discussion_post_content"].getData();

      // get parent_id information
      if (form.attr("method") == "POST")
        var parent_table = $($(this).parents("table")[0]);
      if (parent_table == undefined)
        var parent_id = null;
      else
        var parent_id = parent_table.attr("id");

      $.ajax({
        type: form.attr("method"),
        url: form.attr("action"),
        data: {discussion_post: {parent_id: parent_id, content: content}},
        success: function(data){
          remove_ckeditor(); // remove ckeditor options

          $.get("#{discussion_post_path(@discussion.id, ':id')}".replace(':id', data.post_id), {can_post: "#{@can_post}"}, function(data2){
            var post_table = $("table#"+data.post_id);
            if (!!post_table.length)
              post_table.html(data2);
            else
              if (parent_table != undefined && !!parent_table.length && !display_list){
                $(parent_table.find("td.forum_post_content .forum_post_wrapper")[0]).after(data2);
                parent_table.find(".forum_post_buttons:first").find(".update_post:first, .forum_button_attachment:first, .btn_caution:first").remove();
              }else
                $(".forum_posts_wrapper").prepend(data2);
            $(".forum_button_attachment").call_fancybox({
              afterShow: function(){
                $('#focu').attr("tabindex", "0");
                $('#focu').focus();
              }
            });
            add_post_count_warning();
          });

          // only send message if is a new post
          if (form.attr("method") == "POST")
            ws.send(JSON.stringify({
              msg: content,
              post_id: data.post_id,
              parent_id: data.parent_id,
              academic_allocation_id: ac
            }));

        },
        error: function(data){
          var data = $.parseJSON(data.responseText);
          if (typeof(data.alert) != "undefined")
            flash_message(data.alert, 'alert');
          else
            flash_message("#{t('posts.create.not_created')}", "alert");
        }
      });
    });

  });
