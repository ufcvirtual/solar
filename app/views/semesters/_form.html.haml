- start_date, end_date = Date.today - 1.month, Date.today + 1.month
= simple_form_for @semester, html: {id: "semester_form"} do |f|
  %h1#lightBoxDialogTitle= t((@semester.persisted? ? :edit : :new), scope: "semesters.list")
  %span.form_requirement= t(:required_fields)

  .form-inputs.block_content
    = f.input :type_id, as: :hidden, input_html: {value: @type_id}

    %div{style: "margin-top: 5px"}= f.input :name

    %div
      = f.label :offer, required: true
      = f.simple_fields_for :offer_schedule, defaults: {label: false, as: :string, input_html: {size: 10}} do |s|
        .offer_schedule_dates= s.input :start_date, input_html: { id: 'offer_start_date', value: "#{l((@semester.offer_schedule.try(:start_date) || start_date).to_date, format: :datepicker)}" }
        .offer_schedule_dates.label= t(:to, scope: [:schedules])
        .offer_schedule_dates= s.input :end_date, input_html: { id: 'offer_end_date', value: "#{l((@semester.offer_schedule.try(:end_date) || end_date).to_date, format: :datepicker)}" }
      .offer_schedule_dates.error= @semester.offer_schedule.errors[:start_date].first || @semester.offer_schedule.errors[:end_date].first unless @semester.offer_schedule.errors.full_messages.empty?

    %div
      - dont_have_enroll_end_date = @semester.enrollment_schedule.try(:end_date).nil?
      = f.label :enrollment, required: true
      = f.simple_fields_for :enrollment_schedule, defaults: {label: false, as: :string, input_html: {size: 10}} do |s|
        .enrollment_schedule_dates= s.input :start_date, input_html: { id: 'enrollment_start_date', value: "#{l((@semester.enrollment_schedule.try(:start_date) || start_date).to_date, format: :datepicker)}" }
        %span#enrollment_schedule_end_date{class: (dont_have_enroll_end_date ? 'invisible' : '')}
          .enrollment_schedule_dates.label= t(:to, scope: [:schedules])
          .enrollment_schedule_dates= s.input :end_date, input_html: { id: 'enrollment_end_date' }
      .enrollment_schedule_dates.error= @semester.enrollment_schedule.errors[:start_date].first || @semester.enrollment_schedule.errors[:end_date].first unless @semester.enrollment_schedule.errors.full_messages.empty?
      .end_date_check_box.period_date
        = check_box_tag :have_end_date, true, not(dont_have_enroll_end_date)
        %span.checkbox_label= label_tag :have_end_date, t('.enable_end_date')

    .form-actions.right_buttons
      = button_to_function t(:cancel), "jQuery.fancybox.close()", class: "btn btn_default btn_lightbox", type: "button"
      = button_tag t(:save), class: "btn btn_main btn_lightbox", type: "button", alt: t(:save), id: "save"

:javascript

  $("#offer_start_date, #offer_end_date, #enrollment_start_date, #enrollment_end_date").mask("#{I18n.t('date.formats.masks')}");

  $(function(){
    // datepicker
    var options = $.extend({}, $.datepicker.regional['#{I18n.locale}']);

    // impede que o usu√°rio selecione uma data final menor que inicial e uma inicial maior que a final
    $('#offer_start_date').datepicker( $.extend({}, options, { onSelect: function(selected) { $('#offer_end_date').datepicker("option", "minDate", selected); } }) );
    $('#offer_end_date').datepicker( $.extend({}, options, { onSelect: function(selected) { $('#offer_start_date').datepicker("option", "maxDate", selected); } }) );

    $('#enrollment_start_date').datepicker( $.extend({}, options, { onSelect: function(selected) { $('#enrollment_end_date').datepicker("option", "minDate", selected); } }) );
    $('#enrollment_end_date').datepicker( $.extend({}, options, { onSelect: function(selected) { $('#enrollment_start_date').datepicker("option", "maxDate", selected); } }) );

    $('#enrollment_end_date').datepicker('setDate', "#{l((@semester.enrollment_schedule.try(:end_date) || end_date).to_date, format: :datepicker)}");
  });

  $('#save').click(function(){
    $('form#semester_form').serialize_and_submit({
      complement_success: function(data) {

        var semester_end = data.semester.end, semester_start = data.semester.start;
        var url = "#{semesters_path(period: 'period_param', curriculum_unit_id: 'curriculum_unit_param', course_id: 'course_param', type_id: @type_id)}".replace('period_param', $("#period").combobox('value')).replace('curriculum_unit_param', $("#curriculum_unit").combobox('value')).replace('course_param', $("#course").combobox('value')).replace(/null/g, "");

        $.get(url, function(data) {
          $('.semesters_list').html(data);
            // cria nova uc na lista
            if (!$('option[value='+semester_start+']').length)
              $("<option value="+semester_start+">"+semester_start+"</option>").appendTo("#period");

            // cria nova uc na lista
            if (!$('option[value='+semester_end+']').length)
              $("<option value="+semester_end+">"+semester_end+"</option>").appendTo("#period");
        });
      }
    });
  });

  $('input#have_end_date').click(function(){
    if($("input#have_end_date:checked").val() == 'true'){
      $('#enrollment_schedule_end_date').show();
      $('#enrollment_end_date').datepicker('setDate', "#{l((@semester.enrollment_schedule.try(:end_date) || end_date).to_date, format: :datepicker)}");
    }else{
      $('#enrollment_schedule_end_date').hide();
      $('#enrollment_end_date').datepicker('setDate', "");
    }
  });
