.block_wrapper.list_exams
  .block_title
    %h2
      %i.icon-suitcase
      = t(:title, scope: [:exams])
  - unless @exams.blank?
    %table.tb_list{summary: t('.summary')}
      %thead
        %tr.lines
          %th#e_description{style: 'width: 25%;'}= t('exams.index.description')
          %th#e_availability.center.medium= t('exams.index.availability')
          %th#e_duration.center.small= t('exams.index.duration')
          %th#e_status.medium= t('exams.index.status')
          %th#e_evaluative.center.small= t(:evaluative, scope: [:scores, :index])
          %th#e_frequency.center.small= t(:frequency, scope: [:scores, :info])
          - if @can_open
            %th#e_grade.center.small= t('exams.index.grade')
            %th#e_wh.center.small= t(:workload, scope: [:scores, :info])
          - elsif @can_evaluate
            %th#e_calcule.small.no_sort
      %tbody
        - @exams.each do |exam|
          - if exam.grade.blank? && exam.closed == 't' && !['to_answer', 'not_finished', 'retake', 'not_answered'].include?(exam.situation)
            - bt_correction = link_to_function (content_tag(:i, nil, class: 'icon-exam')), 'calculate_user_grade_exam(this)', :"data-tooltip" => t('exams.index.calculate'), :'data-url' => calculate_user_grade_exam_path(exam.academic_tool_id), :"aria-label" => t('exams.index.calculate'), class: 'ico-e'
          %tr.lines{ id: "tr_#{exam.id}" }
            %td{headers: 'e_description'}
              %div
                - if @can_open
                  - if !['to_answer', 'not_finished', 'retake'].include?(exam.situation)
                    .title= link_to exam.name, '#', disabled: true, :'aria-label' => exam.name + t('fancybox.open') +  t(:disabled), class: 'disabled'
                    - if (exam.closed == 't' || exam.situation == 'corrected')
                      = link_to t('.result'), result_user_exam_path(exam.academic_tool_id), class: 'link_content', class: 'open-exam-result', :'aria-label' => t('.result', exam: exam.name) + t('fancybox.open')
                      - if exam.situation == 'corrected'
                        |
                        = link_to t('.mirror_results'), open_exam_path(exam.academic_tool_id, allocation_tag_id: @allocation_tag_id, situation: exam.situation), class: 'link_open_exam', :'aria-label' => t('.mirror_results_alt', exam: exam.name) + t('fancybox.open')
                  - elsif exam.opened == 't' && exam.closed == 'f'
                    = link_to exam.name, pre_exam_path(exam.academic_tool_id, allocation_tag_id: @allocation_tag_id, situation: exam.situation), :'data-tooltip' => exam.name, class: 'link_content link_pre_exam', :'aria-label' => exam.name + t('fancybox.open')
                  - else
                    .title= link_to exam.name, '#', disabled: true, :'aria-label' => exam.name + t('fancybox.open') +  t(:disabled), class: 'disabled'
                - else
                  = link_to exam.name, preview_exam_path(exam.academic_tool_id, allocation_tags_ids: @allocation_tag_id), class: 'link_preview_exam'

                .description_exam
                  - if exam.description.size > 80
                    .description_slice= raw exam.description.slice(0..80) << "..."
                    .description_complete= raw exam.description
                    .more_or_less
                      %a.description_more.link_content{ href: '#', onkeydown: 'click_on_keypress(event, this);', :'aria-label' => t('common_between_pages.more_alt', tool: exam.name) }= t('common_between_pages.more')
                      %a.description_less.link_content{ href: '#', onkeydown: 'click_on_keypress(event, this);', :'aria-label' => t('common_between_pages.less_alt', tool: exam.name)}= t('common_between_pages.less')
                  - else
                    = raw exam.description
                .equivalent
                  - unless exam.eq_name.blank?
                    %a{ href: '#', :"data-dropdown" => "#dropdown_eq_#{exam.id}", onkeydown: 'click_on_keypress(event, this);', :'aria-label' => t('scores.info.equalities') + t(:of) + exam.name }
                      %i.icon-flow-parallel{:'aria-hidden' => 'true'}
                      = t('scores.info.equivalency')
                      %i.icon-arrow-down-triangle{:'aria-hidden' => 'true'}
                    .dropdown.dropdown-tip{id: "dropdown_eq_#{exam.id}"}
                      %ul{ class: 'dropdown-menu' }
                        = raw t('scores.info.equivalent', name: exam.eq_name)
                  - else
                    %a{ href: '#', :"data-dropdown" => "#dropdown_eq_#{exam.id}", :'data-url' => equalities_tools_path(tool_type: exam.academic_tool_type, ac_id: exam.id), onclick: 'open_dropdown(this);', onkeydown: 'click_on_keypress(event, this);', :'aria-label' => t('scores.info.equalities') + t(:of) + exam.name }
                      %i.icon-flow-parallel
                      =t('scores.info.equalities')
                      %i.icon-arrow-down-triangle
                    .dropdown.dropdown-tip{id: "dropdown_eq_#{exam.id}"}
                      %ul{ class: 'dropdown-menu' }
            %td.center{headers: 'e_availability'}
              %div= [l(exam.start_date.to_date), l(exam.end_date.to_date)].join(' - ')
              - unless exam.start_hour.blank?
                %div= [(exam.start_hour), (exam.end_hour)].join(' - ')
            %td.center{headers: 'e_duration'}= [exam.duration, t('.min')].join(' ')
            %td.center.situation{headers: 'e_status'}
              - if @can_open
                - if exam.situation == 'not_finished'
                  .equivalent
                    %a{ href: '#', :"data-dropdown" => "#dropdown_#{exam.id}", :'data-url' => percentage_exam_path(exam.academic_tool_id), onclick: 'open_dropdown(this);', onkeydown: 'click_on_keypress(event, this);', :'aria-label' => exam.name + I18n.t("scores.situation.#{exam.situation}") }
                      %span{class: "#{exam.situation}"}= I18n.t("scores.situation.#{exam.situation}")
                      %i.icon-arrow-down-triangle{:'aria-hidden' => 'true'}
                    .dropdown.dropdown-tip{id: "dropdown_#{exam.id}"}
                      %ul{ class: 'dropdown-menu' }
                - else
                  %div{class: "#{exam.situation}"}= I18n.t("scores.situation.#{exam.situation}", count: exam.count, count_all: exam.count_all)
              - else
                - if ['corrected', 'not_answered'].include? exam.situation
                  - status = 'finished'
                - elsif ['not_finished', 'finished', 'retake', 'to_answer'].include? exam.situation
                  - status = 'opened'
                - else
                  - status = 'not_started'
                %div{class: "assignment_#{status}"}= I18n.t("scores.situation.#{status}")
              = render partial: 'result_release', locals: {exam: exam, id: ''}
            %td.center{headers: 'e_evaluative'}=raw exam.final_exam ? t(exam.evaluative, scope: [:common_between_pages, :ev_final_exam]) : t(exam.evaluative, scope: [:scores, :info])
            %td.center{headers: 'e_frequency'}= raw t(exam.frequency, scope: [:common_between_pages, :frequency], hours: exam.max_working_hours)
            - if @can_open
              %td.center.activity_grade{headers: 'e_grade', :'aria-label' => exam.grade || t('.not_evaluated')}
                = exam.grade || bt_correction
              %td.center.wh.activity_grade{headers: 'e_wh', :'aria-label' => exam.working_hours || t('.not_evaluated')}
                = exam.working_hours
            - elsif @can_evaluate
              %td.center{headers: 'e_calcule'}
                - if exam.closed == 't'
                  = link_to_function content_tag(:i, nil, class: 'icon-exam'), 'calcule_grade_exam(this)', class: "ico-e", :'data-url' => calculate_grade_exam_path(exam.academic_tool_id), :"data-tooltip" => t('exams.index.calculate'), :"aria-label" => t('exams.index.calculate')
  - else
    .block_content_text.block_content_text_list.text_none= t(:none, scope: [:exams] )

:javascript

  $(function(){

    $(".link_open_exam, .link_preview_exam").call_fancybox({
      minWidth: '50%',
      minheigth: '50%',
      closeBtn : true,
      height: 'auto',
      maxHeight: '70%'
    });

    $(".link_pre_exam").call_fancybox({
      minWidth: '50%',
      closeBtn : true,
      height: 'auto'
    });

    $(".open-exam-result").call_fancybox({
      minWidth: '50%',
      minHeight: '50%',
      height: 'auto',
      closeBtn : true
    });

    $(".description_more").click(function(){
      $(".description_slice, .description_more", $(this).parent().parent()).css("display", "none");
      $(".description_complete, .description_less", $(this).parent().parent()).css("display", "block");
      focus_element($(".description_complete", $(this).parent().parent()));
      return false;
    });

    $(".description_less").click(function(){
      $(".description_slice, .description_more", $(this).parent().parent()).css("display", "block");
      $(".description_complete, .description_less", $(this).parent().parent()).css("display", "none");
      focus_element($(".description_slice", $(this).parent().parent()));
      return false;
    });


    if(location.hash == "#reload")
      focus_element('.list_exams .block_title h2');

  });

  function calculate_user_grade_exam(link){
    if ($(link).attr('disabled') == 'disabled'){
      flash_message("#{t('exams.error.calculate_grade')}", 'alert');
      return false;
    }

    $.put($(link).data('url'), function(data){
      var success = data.success;
      var grade = data.grade;
      var wh = data.wh;

      flash_message(data.notice, 'notice');
      $(link).attr('disabled', true);
      $(link).html("<span class='activity_grade'>"+grade+"</span");
      $('.wh', $(link).parents('tr')).html("<span class='activity_grade'>"+wh+"</span");
    }).error(function(data){
      var response = $.parseJSON(data.responseText);
      if (typeof(response.alert) != "undefined")
       flash_message(response.alert, 'alert');
    });
  }

  function calcule_grade_exam(link){
    $.put($(link).data('url'), function(data){
      var success = data.success;
      flash_message(data.notice, 'notice');
    }).error(function(data){
      var response = $.parseJSON(data.responseText);
      if (typeof(response.alert) != "undefined")
       flash_message(response.alert, 'alert');
    });
  }

  $(function(){
    focus_element_time('#flash_message_span');
  });
