.block_wrapper.list_exams
  .block_title
    %h2
      %i.icon-suitcase
      = t(:title, scope: [:exams])
  - unless @exams.blank?
    %table.tb_list
      %thead
        %tr.lines
          %th.large= t('exams.index.description')
          %th.medium= t('exams.index.availability')
          %th.small= t('exams.index.duration')
          - if @can_open
            %th.small= t('exams.index.status')
            %th.small= t('exams.index.grade')
      %tbody
        - @exams.each do |exam|
          - info = exam.info(current_user.id, @allocation_tags_ids)
          - if info[:grade].blank? && exam.ended? && exam.can_correct?(current_user, @allocation_tags_ids)
            - bt_correction = link_to_function (content_tag(:i, nil, class: 'icon-exam')), 'calcule_grade_user_exam(this)', :"data-tooltip" => t('exams.index.calculate'), :'data-url' => calcule_grade_user_exam_path(exam), class: 'ico-e'
          %tr.lines{ id: "tr_#{exam.id}" }
            %td
              %div
                - if @can_open
                  - unless ['to_answer', 'not_finished', 'retake'].include?(info[:situation])
                    .title= exam.name
                    - if info[:situation] == 'corrected'
                      = link_to I18n.t(:result, :scope => [:exams, :index]), result_user_exam_path(exam), class: 'link_content', class: 'open-exam-result'
                      |
                      = link_to I18n.t(:mirror_results, :scope => [:exams, :index]), open_exam_path(exam, allocation_tag_id: @allocation_tag_id, situation: info[:situation]), class: 'link_open_exam', id: 'open-result'
                  - else
                    = link_to exam.name, pre_exam_path(exam, allocation_tag_id: @allocation_tag_id, situation: info[:situation]), :'data-tooltip' => exam.name, class: 'link_content link_pre_exam', id: 'open-exam'
                - else
                  = link_to exam.name, preview_exam_path(exam, allocation_tags_ids: @allocation_tag_id), class: 'link_preview_exam' 
                 
                - if exam.description.size > 180
                  .description_exam
                    .description_slice= raw exam.description.slice(0..180) << "..."
                    .description_complete= raw exam.description
                    .more_or_less
                      %a.description_more.link_content{ href: '#' }= t('exams.index.more')
                      %a.description_less.link_content{ href: '#' }= t('exams.index.less')
                - else
                  = raw exam.description
            %td.center
              %div= [l(exam.start_date.to_date), l(exam.end_date.to_date)].join(' - ')
              %div= [(exam.start_hour), (exam.end_hour)].join(' - ')
            %td.center= [exam.duration, t('.min')].join(' ')
            - count = info[:count].nil? || info[:count]==0 ? "" : info[:count].to_s
            - if @can_open
              %td.center.situation
                %div{class: "#{info[:situation]}"}= I18n.t(info[:situation], :count => count, :scope => [:exams, :situation])

              %td.center
                %span.activity_grade= info[:grade] || bt_correction || "-"
              
  - else
    .block_content_text.block_content_text_list.text_none= t(:none, scope: [:exams] )

:javascript

  $(function(){

    $(".link_open_exam, .link_preview_exam").call_fancybox({
      minWidth: '50%',
      minheigth: '50%',
      closeBtn : true,
      height: 'auto',
      maxHeight: '70%'
    });

    $(".link_pre_exam").call_fancybox({
      minWidth: '50%',
      closeBtn : true,
      height: 'auto'
    });

    $(".open-exam-result").call_fancybox({
      minWidth: '50%',
      minHeight: '50%',
      height: 'auto',
      closeBtn : true
    });

    $(".description_more").click(function(){
      $(".description_slice, .description_more", $(this).parent().parent()).css("display", "none");
      $(".description_complete, .description_less", $(this).parent().parent()).css("display", "block");
      return false;
    });

    $(".description_less").click(function(){
      $(".description_slice, .description_more", $(this).parent().parent()).css("display", "block");
      $(".description_complete, .description_less", $(this).parent().parent()).css("display", "none");
      return false;
    });

  });
  function calcule_grade_user_exam(link){
    if ($(link).attr('disabled') == 'disabled'){
      flash_message("#{t('exams.error.calcule_grade')}", 'alert');
      return false;
    }
    
    $.put($(link).data('url'), function(data){
      var success = data.success;
      var grade = data.grade;
      
      flash_message(data.notice, 'notice');
      $(link).attr('disabled', true);
      $(link).html(grade);
    }).error(function(data){
      var response = $.parseJSON(data.responseText);
      if (typeof(response.alert) != "undefined")
       flash_message(response.alert, 'alert');
    });
  }
