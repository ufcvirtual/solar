.list_exams{ :'data-link-list' => list_exams_path(allocation_tags_ids: @allocation_tags_ids, offer_id: params[:offer_id], selected: @selected) }
  .title-warning=raw t('exams.warning.title')
  .btn_group
    .btn_item
      = link_to (content_tag(:i, nil, class: 'icon-exam big')), new_exam_path(allocation_tags_ids: @allocation_tags_ids), :'data-tooltip' => t('.new_exam'), class: 'link_new_exam btn', id: 'new-exam'
      = link_to t('.new_exam'), new_exam_path(allocation_tags_ids: @allocation_tags_ids), class: 'link_new_exam', id: 'new-exam'
    .btn_item
      = link_to_function (content_tag(:i, nil, class: 'icon-archive big')), 'import_questions(this)', :'data-url' => import_steps_exam_questions_path(allocation_tags_ids: @allocation_tags_ids), :'data-tooltip' => t('.import_q_e'), class: 'btn', :'data-can' => true
      = link_to_function t('.import_q_e'), 'import_questions(this)', :'data-url' => import_steps_exam_questions_path(allocation_tags_ids: @allocation_tags_ids), :'data-can' => true
    - if (can? :tool_management, Edition, {on: @allocation_tags_ids}) && @selected == 'GROUP'
      .btn_item
        = link_to_function (content_tag(:i, nil, class: 'icon-class big')), 'call_tool_management(this)', :'data-link' => discussion_tool_management_editions_path(allocation_tags_ids: @allocation_tags_ids), :'data-tooltip' => t('editions.evaluative_tools.exams_call'), class: 'btn'
        = link_to_function t('editions.evaluative_tools.exams_call'), 'call_tool_management(this)', :'data-link' => discussion_tool_management_editions_path(allocation_tags_ids: @allocation_tags_ids)
  - if @exams.any?
    = hidden_field_tag(:allocation_tags_ids, params[:allocation_tags_ids])
    = render partial: 'exams/list/exams', locals: { all_groups: @all_groups }
  - else
    .block_content_text_list.text_none
      = t(:item_search_no_found)

= javascript_include_tag 'tablesorter', 'tooltip', 'groups_tags', 'questions'

:javascript
  var div_list = $(".list_exams");
  var offer_id = "#{escape_once(params[:offer_id])}";

  jQuery(function($) {
    $(".expand, .compress").click(function(){
      $(this).parent().hide();
      $($(this).parent().siblings()[0]).show();
    });

    $("a.exam").click(function(e){
      e.preventDefault();
    });

    $(".btn_edit, .btn_del, .release_lessons, .download_lesson_zip, .manage_files_lesson").attr("disabled", true);

    $(".link_new_exam, .edit_exam").call_fancybox({
      width: '70%'
    });
  });

  function delete_exam(icon){
    if (!confirm("#{I18n.t(:message_confirm)}"))
      return false;
  
    $.delete($(icon).data('link-delete'), function(data){
      flash_message(data.message, data.type_message);
      $("#"+$(icon).data('parent')).fadeOut().remove();
    }).error(function(data){
      var data = $.parseJSON(data.responseText);
      if (typeof(data.alert) != "undefined")
        flash_message(data.alert, 'alert');
    });
  }