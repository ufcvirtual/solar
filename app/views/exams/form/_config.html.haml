.ckb
  = f.label :random_questions
  = f.input :random_questions, as: :boolean, label: false
  = link_to_function (image_tag "#{f.object.random_questions ? 'released' : 'rejected'}.png"), 'change(this)', onkeydown: 'click_on_keypress(event, this)', :'data-tooltip' => (f.object.random_questions ? t('.random') : t('.not_random')), :'data-id' => 'exam_random_questions', :'data-active' => t('.random'), :'data-not-active' => t('.not_random')
  - if @exam.errors[:random_questions].any?
    %span.field_with_errors.error= @exam.errors[:random_questions].first
.ckb
  = f.label :raffle_order
  = f.input :raffle_order, as: :boolean, label: false
  = link_to_function (image_tag "#{f.object.raffle_order ? 'released' : 'rejected'}.png"), 'change(this)', onkeydown: 'click_on_keypress(event, this)', :'data-tooltip' => (f.object.raffle_order ? t('.raffle') : t('.not_raffle')), :'data-id' => 'exam_raffle_order', :'data-active' => t('.raffle'), :'data-not-active' => t('.not_raffle')
  - if @exam.errors[:raffle_order].any?
    %span.field_with_errors.error= @exam.errors[:raffle_order].first
/ .ckb
/   = f.label :auto_correction
/   = f.input :auto_correction, as: :boolean, label: false
/   = link_to_function (image_tag "#{f.object.auto_correction ? 'released' : 'rejected'}.png"), 'change(this)', :'data-tooltip' => (f.object.auto_correction ? t('lessons.index.released') : t('lessons.index.draft')), :'data-id' => 'exam_auto_correction'
.ckb
  = f.label :block_content
  = f.input :block_content, as: :boolean, label: false
  = link_to_function (image_tag "#{f.object.block_content ? 'released' : 'rejected'}.png"), 'change(this)', onkeydown: 'click_on_keypress(event, this)', :'data-tooltip' => (f.object.block_content ? t('.block') : t('.dont_block')), :'data-id' => 'exam_block_content', :'data-active' => t('.block'), :'data-not-active' => t('.dont_block')
  - if @exam.errors[:block_content].any?
    %span.field_with_errors.error= @exam.errors[:block_content].first
.ckb
  = f.input :number_questions
.ckb
  = f.input :attempts
.ckb
  = f.input :attempts_correction, as: :select, collection: ([ [t('.greater'), Exam::GREATER], [t('.average'), Exam::AVERAGE], [t('.last'), Exam::LAST]]), include_blank: false
.ckb
  = f.label :result_email
  = f.input :result_email, as: :boolean, label: false
  = link_to_function (image_tag "#{f.object.result_email ? 'released' : 'rejected'}.png"), 'change(this)', onkeydown: 'click_on_keypress(event, this)', :'data-tooltip' => (f.object.result_email ? t('.send_mail') : t('.dont_send_mail')), :'data-id' => 'exam_result_email', :'data-active' => t('.send_mail'), :'data-not-active' => t('.dont_send_mail')
  - if @exam.errors[:result_email].any?
    %span.field_with_errors.error= @exam.errors[:result_email].first
.ckb
  = f.label :uninterrupted
  = f.input :uninterrupted, as: :boolean, label: false
  = link_to_function (image_tag "#{f.object.uninterrupted ? 'released' : 'rejected'}.png"), 'change(this)', onkeydown: 'click_on_keypress(event, this)', :'data-tooltip' => (f.object.uninterrupted ? t('.cant_interrupt') : t('.can_interrupt')), :'data-id' => 'uninterrupted', :'data-active' => t('.cant_interrupt'), :'data-not-active' => t('.can_interrupt')
  - if @exam.errors[:uninterrupted].any?
    %span.field_with_errors.error= @exam.errors[:uninterrupted].first
.ckb
  = f.label :controlled
  = f.input :controlled, as: :boolean, label: false
  = link_to_function (image_tag "#{f.object.controlled ? 'released' : 'rejected'}.png"), 'change(this, ["#without_control", "#with_control", "#controlled_step"])', onkeydown: 'click_on_keypress(event, this)', :'data-tooltip' => (f.object.controlled ? t('.environment_controlled') : t('.environment_not_controlled')), :'data-id' => 'controlled', :'data-active' => t('.environment_controlled'), :'data-not-active' => t('.environment_not_controlled')
  - if @exam.errors[:controlled].any?
    %span.field_with_errors.error= @exam.errors[:controlled].first

.form-actions.right_buttons#without_control
  = button_to_function t(:cancel), 'jQuery.fancybox.close()', class: 'btn btn_default cancel', type: 'button'
  = button_to_function t('.previous'), 'back(event)', class: 'btn btn_default btn_main', type: 'button', onkeypress: 'back(event)'
  = button_to_function t(:save), 'save_exam(event)', class: 'btn btn_main btn_main', alt: t(:save), type: 'button', onkeypress: 'save_exam(event)'

.form-actions.right_buttons.invisible#with_control
  = button_to_function t(:cancel), 'jQuery.fancybox.close()', class: 'btn btn_default btn_lightbox cancel', alt: t(:cancel), type: 'button', onkeydown: 'exit(event)'
  = button_to_function t('.previous'), 'back_to_info(event)', class: 'btn btn_default btn_main btn_lightbox', alt: t('.previous'), type: 'button', onkeypress: 'back_to_info(event)'
  = button_to_function t('.continue'), 'go_to_controls(event)', id: "__continue", class: 'btn btn_main btn_lightbox', alt: t('.continue'), type: 'button', onkeypress: 'go_to_controls(event)'

:javascript

  $(function(){

    if ($("#exam_attempts").val() <= 1){ $('#exam_attempts_correction').prop( "disabled", true ); }

    $("#exam_attempts").bind("keyup change", function() {
      if ($("#exam_attempts").val() > 1){
        $('#exam_attempts_correction').prop( "disabled", false );
      }
      else { $('#exam_attempts_correction').prop( "disabled", true ); }
    });
  });

  function back(event){
    var keynum = event.which || event.keyCode;
    if(keynum == 13 || event.type == 'click') {
      $('.step-info').removeClass('invisible');
      $('.step-config').addClass('invisible');
      $('li.info').addClass('active');
      $('#dot-info').addClass('active');
      $('li.config').removeClass('active');
      $('#dot-config').removeClass('active');
    }
  }

  function back_to_info(event){
    var keynum = event.which || event.keyCode;
    if(keynum == 13 || event.type == 'click') {
      $('.step-info').removeClass('invisible');
      $('.step-config').addClass('invisible');
      $('.step-control').addClass('invisible');

      $('li.info').addClass('active');
      $('#dot-info').addClass('active');
      $('li.config').removeClass('active');
      $('#dot-config').removeClass('active');
      $('li.control').removeClass('active');
      $('#dot-control').removeClass('active');
    }
  }

  function go_to_controls(event) {
    var keynum = event.which || event.keyCode;
    if(keynum == 13 || event.type == 'click') {
      $('.step-info').addClass('invisible');
      $('.step-config').addClass('invisible');
      $('.step-control').removeClass('invisible');

      $('li.info').removeClass('active');
      $('#dot-info').removeClass('active');
      $('li.config').removeClass('active');
      $('#dot-config').removeClass('active');
      $('li.control').addClass('active');
      $('#dot-control').addClass('active');
    }
  }
