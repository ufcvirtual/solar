.block_content
  - number_question = 0
  - link = @preview ? preview_exam_path(@exam) : open_exam_path(@exam, situation: 'corrected')
  - @exam_questions.each_with_index do |question, idx|
    - unless @preview
      - @exam_responses = find_exam_responses(@last_attempt, question.id)
      - @unique_id = ExamResponse.is_unique?(@exam_responses) ? ExamResponse.get_question_item_id(@exam_responses) : false rescue false
      - number_question = number_question+1
    - if @disabled
      - score = t('exams.open.scores', score: question.score)
    - if question.annulled
      - anull = t('exams.open.anull')
    %table.questions
      %thead
        %tr.question
          %td.number
            = number_question.to_s + ')'
          %td.enunciation
            = raw [question.enunciation, anull, score].compact.join(' ')
        - question_images = get_question_images(question.id)
        - @question_audios = get_question_audios(question.id)
        - unless question_images.nil?
          %tr.question_images
            - question_images.each do |q_image|
              %td.image{class: q_image.legend.blank? ? '' : 'legend'}
                .image
                  = image_tag q_image.image(get_image_size(question_images.count)), id: 'question_image', alt: q_image.img_alt
                - unless q_image.legend.blank?
                  .legend
                    = q_image.legend
                  %br
        - unless @question_audios.nil?
          %tr.question_audios    
            - @question_audios.each do |q_audio|
              - class_ = nil    
              - if !q_audio.description.blank? && !q_audio.audio_description.blank?
                - class_ = 1
              %td.audio.legend
                .audio
                  %span.hide=t(:audio_suggestions)
                  %audio{ src: q_audio.audio, autoplay: false, controls: true, name: 'audioQuestion', preload: 'none', onplay: 'check(this);', onclick: 'handleMediaErrorFirefox(this);', onkeypress: "return handleEnterKey(event, this);"}      
                    %p= t("errors.messages.audio")
                  = link_to_function content_tag(:i, nil, class: 'icon-backward2', :"data-tooltip" => t('questions.questions.up_down')), 'down_speed()'
                  = link_to_function content_tag(:i, nil, class: 'icon-forward3', :"data-tooltip" => t('questions.questions.up_speed')), 'up_speed()'
                .legend{class: class_.blank? ? '' : 'legend-description'}
                  - unless q_audio.description.blank?
                    %p= q_audio.description
                  - unless q_audio.audio_description.blank?  
                    = link_to_function content_tag(:i, nil, class: 'icon-arrow-down-triangle', :"data-tooltip" => t('questions.questions.show')), 'show_audio_description(this)', class: 'show_questions_description_ico'
                    = link_to_function content_tag(:i, nil, class: 'invisible icon-arrow-up-triangle', :"data-tooltip" => t('questions.questions.show')), 'show_audio_description(this)', class: 'invisible hide_questions_description_ico'
                    =link_to_function t('questions.questions.show'), "show_audio_description(this)"
                    %p
                      #text
                        = q_audio.audio_description          
                %br
                
        - if @preview
          = render 'exams/open/question_preview', { question: question }
        - else
          = render 'exams/open/question', { question: question }

.message_div_navigation
  - if @pdf != 1
    = will_paginate @exam_questions
- if @disabled && @exam.attempts_correction == Exam::AVERAGE && @pdf!=1
  = link_to t(:back), link, { class: 'btn link_open_exam', id: 'open-exam-result'}

= javascript_include_tag 'tooltip', 'audios'

:javascript
  $('.next_page').attr("aria-label", "#{t(:navigation_next_page)}");  
  $('.previous_page').attr("aria-label", "#{t(:navigation_previous_page)}"); 

  var time = parseInt(#{@total_time});
  
  var time_h = Math.floor(time/3600);
  var time_min = Math.floor((time%3600)/60);
  var time_s = (time%3600)%60;

  var clock_switch;

  jQuery(function($) {
    if (typeof clock_switch == 'undefined') {
      new updateTime("clock", [time_h, time_min, time_s]);
      clock_switch = true;
      }
  });

 