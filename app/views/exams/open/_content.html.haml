.block_content
  - number_question = 0
  - link = @preview ? preview_exam_path(@exam) : open_exam_path(@exam, situation: 'corrected', user_id: @user)
  - @exam_questions.each_with_index do |question, idx|
    - unless @preview
      - @exam_responses = find_exam_responses(@last_attempt, question.id)
      - @unique_id = ExamResponse.is_unique?(@exam_responses) ? ExamResponse.get_question_item_id(@exam_responses) : false rescue false
      - number_question = number_question+1
    - if @disabled || @preview
      - score = '<div class="scores">'+t('exams.open.scores', score: question.score)+'</div>'
    - if question.annulled
      - anull = '<div class="annulled">'+t('exams.open.anull')+'</div>'
    .questions
      - text = QuestionText.find(question.question_text_id).text.html_safe unless question.question_text_id.nil?
      - unless question.question_text_id.nil?
        %ul.question_texts
          %li#question_text
            .legend
              = link_to('#void', onclick: 'show_text(this)', class: 'invisible show_questions_description_ico', onkeydown: 'click_on_keypress(event, this);', :'aria-label' => t('questions.questions.show_alt')) do |l|
                =content_tag(:i, nil, class: 'icon-arrow-down-triangle', :"data-tooltip" => t('questions.questions.show_alt'), :'aria-hidden' => 'true')
                =t('questions.questions.associated_text')
              = link_to('#void', onclick: 'show_text(this)', class: 'show_questions_description_ico', onkeydown: 'click_on_keypress(event, this);', :'aria-label' => t('questions.questions.hide_alt')) do |l|
                =content_tag(:i, nil, class: 'icon-arrow-up-triangle', :"data-tooltip" => t('questions.questions.hide_alt'), :'aria-hidden' => 'true')
                =t('questions.questions.associated_text')
              .q_text
                = raw text
      %h3.question{:'data-shortcut'=> t("shortcut.exam.code.enunciation"), :'data-shortcut-name'=> t("shortcut.exam.name.enunciation"), :'data-shortcut-focus' => 'true'}
        %span.number= number_question.to_s + ')'
        %span.enunciation{id: "radio_#{number_question}"}= raw [question.enunciation, anull, score].compact.join(' ')
      - question_images = get_question_images(question.id)
      - @question_audios = get_question_audios(question.id)

      - unless question_images.nil?
        %ul.question_images
          - question_images.each do |q_image|
            %li.image
              - unless @pdf == 1
                - if q_image.image.exists?
                  .zoom
                    %p= t('exams.open.image_zoom')
                    = image_tag q_image.image.url(get_image_size(question_images.count)), class: 'item_image', alt: q_image.img_alt, :'aria-label' => t('exams.open.image', alt: q_image.img_alt) + (q_image.legend.blank? ? '' : t('exams.open.legend', legend: q_image.legend)), :"data-zoom-url" => q_image.image.url(:original)
                - else
                  - img_url = q_image.image.url
                  - img_url.gsub!('_original.', '.')
                  = image_tag img_url,  alt: q_image.img_alt, :'aria-label' => t('exams.open.image', alt: q_image.img_alt) + (q_image.legend.blank? ? '' : t('exams.open.legend', legend: q_image.legend))
                - unless q_image.legend.blank?
                  .legend{:'aria-hidden' => 'true'}= q_image.legend
              - else
                %p.image_pdf= [t('exams.open.image', alt: q_image.img_alt), (q_image.legend.blank? ? '' : t('exams.open.legend', legend: q_image.legend))].join(' ')
      - unless @question_audios.blank?
        %ul.question_audios
          - @question_audios.each do |q_audio|
            .visuallyhidden=t(:audio_suggestions)
            - class_ = nil
            - if !q_audio.description.blank? && !q_audio.audio_description.blank?
              - class_ = 1
            %li.audio{class: (@pdf == 1 ? '' : 'legend')}
              - unless @pdf == 1
                .audio
                  %audio{ src: q_audio.audio, autoplay: false, controls: true, name: 'audioQuestion', preload: 'none', onplay: 'check(this);', onclick: 'handleMediaErrorFirefox(this);', onkeypress: "return handleEnterKey(event, this);", :'aria-label' => (q_audio.description.blank? ? '' : t('exams.open.audio', alt: q_audio.description))}
                    %p= t("errors.messages.audio")
                  = link_to content_tag(:i, nil, class: 'icon-backward2', :"data-tooltip" => t('questions.questions.up_down'), :'aria-label' => t('questions.questions.up_down')), "#void", onclick: 'down_speed()'
                  = link_to content_tag(:i, nil, class: 'icon-forward3', :"data-tooltip" => t('questions.questions.up_speed'), :'aria-label' => t('questions.questions.up_speed')), "#void", onclick: 'up_speed()'
                .legend{class: class_.blank? ? '' : 'legend-description'}
                  - unless q_audio.description.blank?
                    %p{:'aria-hidden' => 'true'}= q_audio.description
                  - unless q_audio.audio_description.blank?
                    = link_to('#void', onclick: 'show_audio_description(this)', class: 'show_questions_description_ico', onkeydown: 'click_on_keypress(event, this);', :'aria-label' => t('questions.questions.show_alt')) do |l|
                      =content_tag(:i, nil, class: 'icon-arrow-down-triangle', :"data-tooltip" => t('questions.questions.show_alt'), :'aria-hidden' => 'true')
                      =t('questions.questions.show')
                    = link_to('#void', onclick: 'show_audio_description(this)', class: 'invisible show_questions_description_ico', onkeydown: 'click_on_keypress(event, this);', :'aria-label' => t('questions.questions.hide_alt')) do |l|
                      =content_tag(:i, nil, class: 'icon-arrow-up-triangle', :"data-tooltip" => t('questions.questions.hide_alt'), :'aria-hidden' => 'true')
                      =t('questions.questions.show')

                  %p.text= q_audio.audio_description
              - else
                .audio_pdf=t('exams.open.audio2', desc: q_audio.description) + (q_audio.audio_description.blank? ? '' : t('exams.open.audio_text', desc: q_audio.audio_description))
      - if @preview
        = render 'exams/open/question_preview', { question: question }
      - else
        = render 'exams/open/question', { question: question }

.message_div_navigation
  - if @pdf != 1
    = will_paginate @exam_questions
- if @disabled && @exam.attempts_correction == Exam::AVERAGE && @pdf!=1
  = link_to t(:back), link, class: 'btn link_open_exam open-exam-result'

= javascript_include_tag 'tooltip', 'audios', 'zoom/jquery.zoom'

:javascript

  var time = parseInt(#{@total_time});

  var time_h = Math.floor(time/3600);
  var time_min = Math.floor((time%3600)/60);
  var time_s = (time%3600)%60;

  var clock_switch;

  $(function() {

    if (typeof clock_switch == 'undefined') {
      new updateTime("clock", [time_h, time_min, time_s]);
      clock_switch = true;
    }

    $.fancybox.update();

  });

  $('.item_image').each(function(){
    var original_img_url = $(this).attr('data-zoom-url');
    $(this)
    .parent()
    .zoom({url: original_img_url, on: 'click'});
  });
