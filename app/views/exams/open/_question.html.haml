- disabled = @disabled || question.annulled
- audio_is = nil

.question_items
  = form_for(@exam_responses, html: { :method => :put, id: 'responses_form', :'data-duration' => @exam_responses.duration}, :url => exam_response_path(@exam_responses), :remote => true, :'data-disabled' => disabled) do |er|
    = er.hidden_field :exam_user_attempt_id, value: @last_attempt.id
    = er.hidden_field :question_id, value: question.id
    %ul{role: ((question.type_question.to_i == Question::UNIQUE) ? 'radiogroup' : nil), class: ((question.type_question.to_i == Question::UNIQUE) ? 'unique' : '')}
      - arr_alf = ('A'..'Z').to_a
      - arra_correted, arra_correted2 = [], []
      - if question.type_question.to_i == Question::UNIQUE
        - num_question = -1
        - right_answer = question.question_items.where(value: true).pluck(:id).first
        = er.nested_fields_for :exam_responses_question_items, wrapper_tag: :li do |i|
          - class_comment = 'comment-blue' #default
          - unless i.object.id.nil?
            - num_question =  num_question + 1
            - if @disabled
              - if right_answer==i.object.question_item_id
                - arra_correted.push(arr_alf[num_question])
              - if (i.object.value && right_answer==i.object.question_item_id)
                - class_label = "hit"
                - class_comment = 'comment-green'
              - elsif (!i.object.value && right_answer==i.object.question_item_id) || (i.object.value && right_answer!=i.object.question_item_id)
                - class_label = "incorrect"
                - class_comment = 'comment-red'
              - unless i.object.comment.blank?
                - coment = "<div class='#{class_comment}'> #{i.object.comment} </div>"
            = i.check_box :value, {disabled: disabled, onchange: 'change();', class: 'invisible', role: 'radio', :'aria-checked' => i.object.value}, true, ''
            = radio_button_tag "radio_exam_response_exam_responses_question_items_attributes_#{num_question}_value", :value, nil, {checked: i.object.value, class: "radio_exam_response_exam_responses_question_items_attributes_#{num_question}_value", disabled: disabled, name: "radio_exam_response_exam_responses_question_items_attributes", onchange: 'update_radio(this);'}

            = i.label :value, {for: "radio_exam_response_exam_responses_question_items_attributes_#{num_question}_value_value"}, class: class_label do
              %span= arr_alf[num_question]+') '
              = i.object.description.html_safe
            - if i.object.item_image?
              = render partial: 'exams/open/items_images', locals: {item: i, num_question: num_question, arr_alf: arr_alf}
            - unless @pdf == 1
              - if i.object.item_audio?
                .audio.legend
                  .audio
                    %audio{ src: i.object.item_audio.as_json, autoplay: false, controls: true,controlsList:"nodownload", name: 'audioQuestion', onplay: 'check(this);', onclick: 'handleMediaErrorFirefox(this);', onkeypress: "return handleEnterKey(event, this);", :'aria-label' =>  t('exams.open.audio_item', item: arr_alf[num_question]) + t(:audio_suggestions_item)}
                      %p= t("errors.messages.audio")
                    = link_to content_tag(:i, nil, class: 'icon-backward2', :"data-tooltip" => t('questions.questions.up_down'), :'aria-label' => t('questions.questions.up_down')), "#void", onclick: 'down_speed()'
                    = link_to content_tag(:i, nil, class: 'icon-forward3', :"data-tooltip" => t('questions.questions.up_speed'), :'aria-label' => t('questions.questions.up_speed')), "#void", onclick: 'up_speed()'
                    - audio_is = 1
                  - if i.object.audio_description?
                    .audio_description
                      = link_to('#void', onclick: 'show_audio_description(this)', onkeydown: 'click_on_keypress(event, this);', class: 'show_questions_description_ico', :'aria-label' => t('questions.questions.show_alt')) do |l|
                        =content_tag(:i, nil, class: 'icon-arrow-down-triangle', :"data-tooltip" => t('questions.questions.show_alt'), :'aria-hidden' => 'true')
                        =t('questions.questions.show')
                      = link_to('#void', onclick: 'show_audio_description(this)', onkeydown: 'click_on_keypress(event, this);', class: 'invisible show_questions_description_ico', :'aria-label' => t('questions.questions.hide_alt')) do |l|
                        =content_tag(:i, nil, class: 'icon-arrow-up-triangle', :"data-tooltip" => t('questions.questions.hide_alt'), :'aria-hidden' => 'true')
                        =t('questions.questions.show')
                      .text= raw i.object.audio_description.html_safe
            - else
              %p=t('exams.open.audio_item', item: arr_alf[num_question]) + (i.object.audio_description.blank? ? '' : t('exams.open.audio_text', desc: i.object.audio_description))
            = raw(coment)

        - if @disabled
          = t('exams.result_exam_user.itens_corrected') + arra_correted.join(", ")

      - elsif question.type_question.to_i == Question::MULTIPLE
        - num_question = -1
        - right_items = question.question_items.where(value: true).pluck(:id)
        = er.nested_fields_for :exam_responses_question_items, wrapper_tag: :li do |b|
          - class_comment = 'comment-blue' #default
          - unless b.object.id.nil?
            - num_question =  num_question + 1
            - if @disabled
              - coment = b.object.comment
              - if right_items.include?(b.object.question_item_id)
                - arra_correted.push(arr_alf[num_question])
              - if (b.object.value && right_items.include?(b.object.question_item_id))
                - class_label = "hit"
                - class_comment = 'comment-green'
              - elsif (b.object.value && !right_items.include?(b.object.question_item_id)) || (!b.object.value && right_items.include?(b.object.question_item_id))
                - class_label = "incorrect"
                - class_comment = 'comment-red'
              - unless b.object.comment.blank?
                - coment = "<div class='#{class_comment}'> #{b.object.comment} </div>"
            = b.check_box :value, {disabled: disabled, onchange: 'change();', role: 'checkbox', :'aria-checked' => b.object.value}, true, ''
            = b.label :value, class: class_label do
              %span= arr_alf[num_question]+') '
              = b.object.description.html_safe
            - if b.object.item_image?
              = render partial: 'exams/open/items_images', locals: {item: b, num_question: num_question, arr_alf: arr_alf}
            - unless @pdf == 1
              - if b.object.item_audio?
                .audio.legend
                  .audio
                    %audio{ src: b.object.item_audio.as_json, autoplay: false, controls: true,controlsList:"nodownload", name: 'audioQuestion', onplay: 'check(this);', onclick: 'handleMediaErrorFirefox(this);', onkeypress: "return handleEnterKey(event, this);", :'aria-label' =>  t('exams.open.audio_item', item: arr_alf[num_question]) + t(:audio_suggestions_item)}
                      %p= t("errors.messages.audio")
                    = link_to content_tag(:i, nil, class: 'icon-backward2', :"data-tooltip" => t('questions.questions.up_down'), :'aria-label' => t('questions.questions.up_down')), "#void", onclick: 'down_speed()'
                    = link_to content_tag(:i, nil, class: 'icon-forward3', :"data-tooltip" => t('questions.questions.up_speed'), :'aria-label' => t('questions.questions.up_speed')), "#void", onclick: 'up_speed()'
                    - audio_is = 1
                  - if b.object.audio_description?
                    .audio_description
                      = link_to('#void', onclick: 'show_audio_description(this)', onkeydown: 'click_on_keypress(event, this);', class: 'show_questions_description_ico',:'aria-label' => t('questions.questions.show_alt')) do |l|
                        =content_tag(:i, nil, class: 'icon-arrow-down-triangle', :"data-tooltip" => t('questions.questions.show_alt'), :'aria-hidden' => 'true')
                        =t('questions.questions.show')
                      = link_to('#void', onclick: 'show_audio_description(this)', onkeydown: 'click_on_keypress(event, this);', class: 'invisible show_questions_description_ico', :'aria-label' => t('questions.questions.hide_alt')) do |l|
                        =content_tag(:i, nil, class: 'icon-arrow-up-triangle', :"data-tooltip" => t('questions.questions.hide_alt'), :'aria-hidden' => 'true')
                        =t('questions.questions.show')
                      .text=raw b.object.audio_description.html_safe
            - else
              %p=t('exams.open.audio_item', item: arr_alf[num_question]) + (b.object.audio_description.blank? ? '' : t('exams.open.audio_text', desc: b.object.audio_description))
            = raw(coment)

        - if @disabled
          = t('exams.result_exam_user.itens_corrected') + arra_correted.join(", ")
      - else
        - num_question = -1
        - items = question.question_items
        - true_items = items.where(value: true).pluck(:id)
        - false_items = items.where(value: false).pluck(:id)
        = er.nested_fields_for :exam_responses_question_items, wrapper_tag: :li do |b|
          - class_comment = 'comment-blue' #default
          - unless b.object.id.nil?
            - num_question =  num_question + 1
            - selected = b.object.value
            - if @disabled
              - coment = b.object.comment
              - if true_items.include?(b.object.question_item_id)
                - arra_correted.push(arr_alf[num_question])
              - elsif false_items.include?(b.object.question_item_id)
                - arra_correted2.push(arr_alf[num_question])
              - if b.object.value.nil?
                - class_label = "incorrect"
                - class_comment = 'comment-red'
              - elsif ((b.object.value && true_items.include?(b.object.question_item_id)) || (!b.object.value && false_items.include?(b.object.question_item_id)))
                - class_label = "hit"
                - class_comment = 'comment-green'
              - else
                - class_label = "incorrect"
                - class_comment = 'comment-red'
              - unless b.object.comment.blank?
                - coment = "<div class='#{class_comment}'> #{b.object.comment} </div>"

            = b.select :value, options_for_select([['', nil], [t('questions.form.f_option'), false], [t('questions.form.t_option'), true]], b.object.value), {}, { disabled: disabled, onchange: 'change();' }
            = b.label :value, class: class_label do
              %span= arr_alf[num_question]+') '
              = b.object.description.html_safe
            - if b.object.item_image?
              = render partial: 'exams/open/items_images', locals: {item: b, num_question: num_question, arr_alf: arr_alf}
            - unless @pdf == 1
              - if b.object.item_audio?
                .audio.legend
                  .audio
                    %audio{ src: b.object.item_audio.as_json, autoplay: false, controls: true,controlsList:"nodownload", name: 'audioQuestion', onplay: 'check(this);', onclick: 'handleMediaErrorFirefox(this);', onkeypress: "return handleEnterKey(event, this);", :'aria-label' =>  t('exams.open.audio_item', item: arr_alf[num_question]) + t(:audio_suggestions_item)}
                      %p= t("errors.messages.audio")
                    = link_to content_tag(:i, nil, class: 'icon-backward2', :"data-tooltip" => t('questions.questions.up_down'), :'aria-label' => t('questions.questions.up_down')), "#void", onclick: 'down_speed()'
                    = link_to content_tag(:i, nil, class: 'icon-forward3', :"data-tooltip" => t('questions.questions.up_speed'), :'aria-label' => t('questions.questions.up_speed')), "#void", onclick: 'up_speed()'
                    - audio_is = 1
                  - if b.object.audio_description?
                    .audio_description
                      = link_to('#void', onclick: 'show_audio_description(this)', onkeydown: 'click_on_keypress(event, this);', class: 'show_questions_description_ico', :'aria-label' => t('questions.questions.show_alt')) do |l|
                        =content_tag(:i, nil, class: 'icon-arrow-down-triangle', :"data-tooltip" => t('questions.questions.show_alt'), :'aria-hidden' => 'true')
                        =t('questions.questions.show')
                      = link_to('#void', onclick: 'show_audio_description(this)', onkeydown: 'click_on_keypress(event, this);', class: 'invisible show_questions_description_ico', :'aria-label' => t('questions.questions.hide_alt')) do |l|
                        =content_tag(:i, nil, class: 'icon-arrow-up-triangle', :"data-tooltip" => t('questions.questions.hide_alt'), :'aria-hidden' => 'true')
                        =t('questions.questions.show')
                      .text= raw b.object.audio_description.html_safe
            - else
              %p=t('exams.open.audio_item', item: arr_alf[num_question]) + (b.object.audio_description.blank? ? '' : t('exams.open.audio_text', desc: b.object.audio_description))
            = raw(coment)

        - if @disabled
          = t('exams.result_exam_user.true_items') + arra_correted.join(", ")
          = t('exams.result_exam_user.false_items') + arra_correted2.join(", ")

    = er.hidden_field :duration, {id: 'duration'}

- if @question_audios || audio_is==1
  .question_audios{:'aria-hidden' => 'true'}
    .audio
      %form.hide
        %input.aPbr{id: 'aPbr', type: 'range', value: 1, min: 0, max: 5, step: 0.1 }
          %p
            = t(:control_audio, scope: [:questions, :questions])
            %span#aCurrentPbr= 1


= javascript_include_tag 'pagination'

:javascript

  $(function(){

    $.fancybox.update();

    $(document.body).on('change','select, input',function(){
      change();
    });

    $(".unique input[type='checkbox']").click(function(){
      $("input[type='checkbox']:checked").each(function(){
        $(this).prop('checked', false);
      });

      $("input[type='checkbox']#"+$(this).prop('id')).prop('checked', true);
      change();
    });

  });


  function change(){
    if("#{@disabled}" != 'true')
      save_question('#{@exam_responses.try(:duration)}');
  }

  function update_radio(checkbox){
    ckb = $('#'+$(checkbox).prop('id').replace('radio_', '').replace('value_value', 'value')+':first');
    ckb.prop('checked', $(checkbox).prop('checked'));
    ckb.prop('aria-checked', $(checkbox).prop('checked'));

    if(!!$(checkbox).prop('checked'))
      $('input[type="radio"]').each(function(){
        if($(this).prop('id') != $(checkbox).prop('id')){
          $(this).prop('checked', false);
          update_radio($(this));
        }
      });
  }