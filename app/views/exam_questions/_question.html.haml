- has_items   = (question.respond_to?(:count_items)  ? !question.count_items.to_i.zero? : question.question_items.any?)
- has_images  = (question.respond_to?(:has_images)   ? question.has_images : question.question_images.any?)
- has_audios  = (question.respond_to?(:has_audios)   ? question.has_audios : question.question_audios.any?)
- items       = (question.respond_to?(:count_items)  ? question.count_items : question.question_items.size)
- labels      = (question.respond_to?(:labels)       ? question.labels.delete('NULL').split(',') : question.question_labels.map(&:name))
- author_name = (question.respond_to?(:author_name)) ? question.author_name : question.user.name
- updated_by_name = (question.respond_to?(:updated_by_name)) ? question.updated_by_name : question.updated_by_user.try(:name)
- exam_question   = ExamQuestion.find(question.exam_question_id) if exam_question.nil?
- annulled    = question.respond_to?(:annulled) ? question.annulled : exam_question.annulled
%tr.lines{ id: "tr_#{question.id}", order: (question.respond_to?(:order) ? question.order : exam_question.order), exam_question_id: exam_question.id, :'data-id' => question.id }
  %td{ style: 'text-align:center;', class: hide_columns ? 'invisible' : '' }
    = check_box_tag("ckb_#{exam.id}", exam_question.id, false, { class: 'ckb_question', :'data-question-id' => exam_question.question_id })
  %td.center{ style: 'width: 50px;', class: hide_columns ? 'invisible' : '' }
    .lesson_arrows
      .lesson_arrow_up= link_to image_tag('lesson/up_arrow.png'), "#void", onclick: 'up_or_down(this)', class: 'up', :'data-url' => change_order_exam_question_path(':id1', ':id2', exam_id: exam.id)
      .lesson_arrow_down= link_to image_tag('lesson/down_arrow.png'), "#void", onclick: 'up_or_down(this)', class: 'down', :'data-url' => change_order_exam_question_path(':id1', ':id2', exam_id: exam.id)
  %td
    %div
      .title
        - if has_items
          = content_tag(:i, nil, class: 'icon-list', :'data-tooltip' => t('questions.question.has_items', count: items))
        - if has_images
          = content_tag(:i, nil, class: 'icon-pictures', :'data-tooltip' => t('questions.question.has_images'))
        - if has_audios
          = content_tag(:i, nil, class: 'icon-music', :'data-tooltip' => t('questions.question.has_audios'))
      .description
        .minimun
          - if question.enunciation.size > 100
            = strip_tags(question.enunciation.truncate(100)).html_safe
            = content_tag(:i, nil, class: 'expand icon-ellipsis', :"data-tooltip" => t('questions.question.expand_enunciation'), onclick: 'expand_or_compress_icon(this)')
          - else
            = raw question.enunciation.truncate(100)
        .complete.invisible
          = raw question.enunciation
          = content_tag(:i, nil, class: 'compress icon-arrow-up-triangle', :"data-tooltip" => t('questions.question.compress_enunciation'), onclick: 'expand_or_compress_icon(this)')
      .participants.equivalent
        %a{ href: '#', :"data-dropdown" => "#dropdown_1a_#{question.id}" }
          %i.icon-user
          = [t('questions.questions.author'), author_name.truncate(15)].join(': ')
          %i.icon-arrow-down-triangle
        .dropdown.dropdown-tip.dropdown-relative{id: "dropdown_1a_#{question.id}"}
          %ul{ class: 'dropdown-menu' }
            = author_name
      - unless updated_by_name.blank?
        .participants.equivalent
          %a{ href: '#', :"data-dropdown" => "#dropdown_2a_#{question.id}" }
            %i.icon-user
            = [t('questions.questions.updated_by'), updated_by_name.truncate(15)].join(': ')
            %i.icon-arrow-down-triangle
          .dropdown.dropdown-tip.dropdown-relative{id: "dropdown_2a_#{question.id}"}
            %ul{ class: 'dropdown-menu' }
              = updated_by_name
      - unless labels.blank?
        .group_label= render 'questions/labels', labels: labels
  %td{ style: 'text-align:center;' }= question.type
  %td{ style: 'text-align:center;' }= (question.try(:score) rescue exam_question.score)
  %td{ style: 'text-align:center;' }= l(question.updated_at, format: :normal)
  %td{ style: 'text-align:center;', class: hide_columns ? 'invisible' : '' }= link_to content_tag(:i, nil, class: 'icon-eye', :'data-tooltip' => t('questions.question.preview')), "#void", onclick: 'preview_question(this)', :'data-url' => question_path(question), class: 'preview_question', disabled: !(can_see_preview && question.can_see?(true))
  %td{ style: 'text-align:center;' }= question.privacy? ? content_tag(:i, nil, class: 'icon-lock', :'data-tooltip' => t('questions.question.private')) : content_tag(:i, nil, class: 'icon-minus', :"data-tooltip" => t('questions.question.public'))
  %td{ style: 'text-align:center;' }= check_box_tag exam_question.id, exam_question.id, annulled, onclick: 'annul(this)', disabled: (annulled ? true : false), :'data-url' => annul_exam_question_path(exam_question.id)
  %td{ style: 'text-align:center;' }= link_to (image_tag "#{question.status ? 'released' : 'rejected'}.png"), "#void", onclick: 'change_status_single(this)', :'data-tooltip' => (question.status ? t('lessons.index.released') : t('lessons.index.draft')), :'data-url' => change_status_question_path(question), class: "#{question.status ? 'released' : 'rejected'}"

:javascript
  $(function(){
    $.each($('[id^="all_questions_"]'), function(idx){
      $($('[id^="all_questions_"]')[idx]).nice_checkbox({
        can_enable_elements: true
      });
    });
  });
