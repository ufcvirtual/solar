- user_groups, curriculum_units = [], []

.allocations.filter
  .block_content
    .block_left
      .enrollment_left
        .filter_enrollment
          = label_tag t(".search"), nil, class: "enrollment_label_search"
          // select_tag UCs (js)

          = label_tag t(".of"), nil, class: "enrollment_label"
          = select_tag :type, options_from_collection_for_select(@uc_types, :id, :description)

          = button_tag content_tag(:i, nil, class: 'icon-search', id: "search"), class: 'btn'

.block_wrapper
  .block_title
    %h2= t('.enrolled')
  .block_content
    %table.tb_list.enrollment_list_enrolled
      - offer_enrolled = @user_requests.where(status: Allocation_Activated)
      - unless offer_enrolled.nil? or offer_enrolled.empty?
        %thead
          %tr.lines
            %th= t(".curriculum_unit")
            %th= t(".category")
            %th= t(:semester)
            %th= t(".group")
            %th.no_sort= t(:mysolar_mn_enrollment)
        %tbody
          - offer_enrolled.find_each do |allocation|

            - group = allocation.group
            - user_groups << group.id
            - offer_info = group.detailed_info
            - curriculum_units << [offer_info[:curriculum_unit], offer_info[:curriculum_unit].gsub(/\W/, '')]

            %tr.lines{class: "uc-#{offer_info[:curriculum_unit].gsub(/\W/, '')} uc-type-#{offer_info[:curriculum_unit_type].gsub(/\W/, '')}"}
              %td= offer_info[:curriculum_unit]
              %td= offer_info[:curriculum_unit_type]
              %td= offer_info[:semester]
              %td= group.code
              %td
                - period_start, period_end = group.offer.enrollment_period
                - if Time.now.between?(period_start, period_end)
                  = link_to t('.cancel'), cancel_allocation_path(allocation), class: 'btn btn_caution allocation_cancel_enroll'
                - else
                  = label_tag "lb_enrollm", t(".enrolled"), class: 'enrollment_label'
      - else
        .block_content_text_list.text_none 
          = t(:item_search_no_found)            

.block_wrapper
  .block_title
    %h2= t('.pending')
  .block_content
    %table.tb_list.enrollment_list_pending
      - offer_pending = @user_requests.where('status <> ?', Allocation_Activated)
      - unless offer_pending.nil? or offer_pending.empty?
        %thead
          %tr.lines
            %th= t(".curriculum_unit")
            %th= t(".category")
            %th= t(:semester)
            %th= t(".group")
            %th.no_sort
            %th.no_sort= t(:mysolar_mn_enrollment)
        %tbody
          - offer_pending.find_each do |allocation|

            - group = allocation.group
            - offer_info = group.detailed_info
            - user_groups << group.id
            - curriculum_units << [offer_info[:curriculum_unit], offer_info[:curriculum_unit].gsub(/\W/, '')]

            %tr.lines{class: "uc-#{offer_info[:curriculum_unit].gsub(/\W/, '')} uc-type-#{offer_info[:curriculum_unit_type].gsub(/\W/, '')}"}
              %td= offer_info[:curriculum_unit]
              %td= offer_info[:curriculum_unit_type]
              %td= offer_info[:semester]
              %td= group.code
              %td= link_to content_tag(:i, nil, class: 'icon-info'), group_enrollments_path(group.id), class: "btn", id: "enrollment_info_#{group.id}"
              %td
                - case allocation.try(:status)
                  - when Allocation_Pending.to_i, Allocation_Pending_Reactivate.to_i
                    = link_to t('.cancel_request'), cancel_request_allocation_path(allocation), class: 'btn btn_caution allocation_cancel_request'
                  - when Allocation_Cancelled.to_i
                    - if group.offer.is_active?
                      = link_to t('.enroll'), reactivate_allocation_path(allocation), class: 'btn btn_default request_enroll'
                    - else
                      \ -
                  - when Allocation_Rejected.to_i
                    = label_tag "lb_rejected", t(".rejected"), class: 'enrollment_label'
      - else
        .block_content_text_list.text_none 
          = t(:item_search_no_found)      

.block_wrapper
  .block_title
    %h2= t(".ucs_available")
  .block_content
    %table.tb_list.enrollment_list.table_ucs
      - unless @offers.nil? or @offers.empty?
        %thead.thead_ucs
          %tr.lines
            %th= t(".curriculum_unit")
            %th= t(".category")
            %th= t(:semester)
            %th= t(".group")
            %th.no_sort= t(".period")
            %th.no_sort
            %th.no_sort= t(:mysolar_mn_enrollment)
        %tbody
          - @offers.each do |offer|

            - offer_info = offer.detailed_info
            - curriculum_units << [offer_info[:curriculum_unit], offer_info[:curriculum_unit].gsub(/\W/, '')]
            - query = "groups.id NOT IN (?)" unless user_groups.empty?

            - Group.where(offer_id: offer.id).where(query, user_groups).find_each do |group|
              %tr.lines{class: "uc-#{offer_info[:curriculum_unit].gsub(/\W/, '')} uc-type-#{offer_info[:curriculum_unit_type].gsub(/\W/, '')}"}
                %td= offer_info[:curriculum_unit]
                %td= offer_info[:curriculum_unit_type]
                %td= offer_info[:semester]
                %td= group.code
                %td= [l(Date.parse(offer.enroll_start_date), format: :normal), l(Date.parse(offer.enroll_end_date))].join '-'
                %td= link_to content_tag(:i, nil, class: 'icon-info'), group_enrollments_path(group.id), class: "btn", id: "enrollment_info_#{group.id}"
                %td= link_to t('.enroll'), allocations_path(group_id: group.id), class: 'btn btn_default request_enroll'
        .block_content_text_list.text_none.empty_message.hide_message 
          = t(".no_curriculum_unit_found")
      - else
        .block_content_text_list.text_none 
          = t(".no_curriculum_unit_found")

:javascript

  $(function(){
    $('#{to_combobox(curriculum_units.uniq, "curriculum_unit")}').insertAfter('.filter_enrollment label:first');
  });

  //Exibir mensagem de tabela vazia caso clique pra pesquisar por uc e não tenha nenhuma disponível
  $(".btn").click(function () {
    var rowCount = $('.table_ucs>tbody>tr:visible').length;
    if (rowCount == 0){
      $('.thead_ucs').hide();
      $('.empty_message').removeClass("hide_message");
    }
    else{
      $('.thead_ucs').show();
      $('.empty_message').addClass("hide_message")
    }
  });

= javascript_include_tag "autocomplete", "enrollments"
= stylesheet_link_tag "autocomplete"
