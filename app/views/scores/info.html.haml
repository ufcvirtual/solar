.block_wrapper#assignments
  .block_title
    %h2
      %i.icon-suitcase
      = @user.name

  - unless @assignments.nil?
    .block_wrapper
      .block_title
        %h2= t(".assignments_sent")
      .block_content
        - unless @assignments.empty?
          %table.tb_list#assignments_list
            %thead
              %tr.lines
                %th{align: "left"}= t(".assignments")
                %th.center.date{style: "width: 24%;"}= t(".date_range")
                %th.center{style: "width: 12%;"}= t(".situation")
                %th.center{style: "width: 8%;"}= t(".grade")
            %tbody
              - @assignments.each do |assignment|
                - info = assignment.info(@user.id, @allocation_tag_id)
                - link = ((assignment.type_assignment == Assignment_Type_Group && info[:group_id].nil?) ? '' : student_assignment_path(assignment.id, student_id: @user.id, group_id: info[:group_id]))
                %tr.lines
                  %td{align: "left"}
                    - if link.blank?
                      .title= assignment.name
                    - else
                      = link_to assignment.name, link, {class: 'link_content'}
                  %td.center
                    = [l(assignment.schedule.start_date, format: :normal), l(assignment.schedule.end_date, format: :normal)].join(" - ")
                  %td.center{class: "assignment_#{info[:situation]}"}= t(info[:situation].to_sym)
                  %td.center= (info[:grade].nil?) ? '-' : info[:grade].to_f
        - else
          .block_content.block_content_text= t(:itens_not_found)

.block_wrapper
  .block_title
    %h2= t(".discussions_participation")
  .block_content
    - unless @discussions.empty?
      %table.tb_list
        %thead
          %tr.lines
            %th{style: "width: 80%;"}= t(".discussions")
            %th.center{style: "width: 7%;"}= t(".posts")
        %tbody
          - @discussions.each do |discussion|
            %tr.lines
              - link = user_discussion_posts_path(discussion.id, @user.id)
              %td.show_posts
                - if discussion.posts_count.to_i > 0
                  = link_to discussion.name, link, {class: 'link_content'}
                - else
                  = discussion.name
              %td.center.show_posts
                - if discussion.posts_count.to_i > 0
                  = link_to discussion.posts_count, link, {class: 'link_content'}
                - else
                  = discussion.posts_count
    - else
      .block_content.block_content_text= t(:itens_not_found)

.block_wrapper
  .block_title
    %h2= t(".exam")
  .block_content
    - unless @exams.empty?
      - is_user = (@user.id == current_user.id)
      %table.tb_list.list_exams
        %thead
          %tr.lines
            %th{align: "left"}= t(".exam")
            %th.center.date{style: "width: 40%;"}= t(".date_range")
            %th.center{style: "width: 20%;"}= t(".situation")
            %th.center{style: "width: 20%;"}= t(".grade")
          %tbody
            - @exams.each do |exam|
              - info = exam.info(@user.id, @allocation_tag_id)
              - link = open_exam_path(exam, allocation_tag_id: @allocation_tag_id, situation: info[:situation])
              - pre  = pre_exam_path(exam, allocation_tag_id: @allocation_tag_id, situation: info[:situation])
              %tr.lines
                %td{align: "left"}
                  - if !['to_answer', 'not_finished', 'retake'].include?(info[:situation])
                    .title= exam.name
                    - if exam.ended? || info[:situation] == 'corrected'
                      = link_to I18n.t(:result, :scope => [:exams, :index]), result_user_exam_path(exam, user_id: @user.id), class: 'link_content', class: 'exam-result'
                      - if is_user && info[:situation] == 'corrected'
                        |
                        = link_to I18n.t(:mirror_results, :scope => [:exams, :index]), link, class: 'open_exam', id: 'open-result'
                  - elsif is_user
                    = link_to exam.name, pre, :'data-tooltip' => exam.name, class: 'link_content link_pre_exam', id: 'open-exam'
                  - else
                    .title= exam.name
                %td.center
                  %div= [l(exam.start_date.to_date), l(exam.end_date.to_date)].join(' - ')
                  %div= [(exam.start_hour), (exam.end_hour)].compact.join(' - ')
                %td.center.situation
                  %div{class: "#{info[:situation]}"}= I18n.t(info[:situation], :scope => [:exams, :situation])
                %td.center.grade
                  - if info[:grade].blank? && exam.ended? && !['to_answer', 'not_finished', 'retake', 'not_answered'].include?(info[:situation])
                    - bt_correction = link_to_function (content_tag(:i, nil, class: 'icon-exam')), 'calcule_grade_user_exam(this)', :"data-tooltip" => t('exams.index.calculate'), :'data-url' => calcule_grade_user_exam_path(exam, user_id: @user.id), class: 'ico-e'
                  %span.activity_grade= info[:grade] || bt_correction || "-"
    - else
      .block_content.block_content_text= t(:itens_not_found)

.block_wrapper
  .block_title
    %h2= t(".history_access", amount: @access.count)
  .block_content.block_content_text
    #history_search_content
      %input{type: "text", id: "from-date", size: "9"}
      = t(:to)
      %input{type: "text", id: "until-date", size: "9"}
      %span= button_tag t(".search"), id: "bt-amount-history-access", class: "btn"
      #amount_found{style: "float: right; margin-top: 7px;"}
        %h2
    #history-body
      %table.tb_list
        = render partial: "access", locals: {access: @access}

.block_wrapper
  .block_title
    %h2= t(".public_files")
  .block_content
    - no_files = (@public_files.blank?)
    %table.tb_list
      %thead{style: (no_files ? "display: none" : "")}
        %tr.lines
          %th.no_sort
          %th= t(".file")
          %th= t(".size")
          %th= t(".sent_on")
          %th.no_sort
      %tbody.public_files
        - unless no_files
          - @public_files.each do |file|
            = render partial: "public_files/file", locals: {file: file, destroy: false}
    .text_none.empty_message{class: (no_files ? "" : "hide_message")}= t(:itens_not_found)

.block_wrapper{style: "float:left"}
  = link_to t(:back), :back, {class: "btn"}

:css
  .ui-datepicker { width: 15em; padding: .2em .2em 0; display: none; }

:javascript

  $(function(){
    
    var options = $.extend($.datepicker.regional["#{I18n.locale}"]);
    $('#from-date, #until-date').datepicker(options);
    $('#from-date, #until-date').mask("#{I18n.t(:mask, scope: "date.formats")}");

    $("#bt-amount-history-access").click(function(){
      var params = {
        'from-date': $('#from-date').val(),
        'until-date': $('#until-date').val()
      };
      $.get("#{amount_access_scores_path(user_id: @user.id)}", params, function(data){
        $("#history-body table").html(data);
        erase_flash_messages();
        $("#amount_found h2").html($("#history-body tbody:first tr").length + "#{t(".access_found")}");
        $("#history-body tbody").tablesorter();
      }).error(function(data){
        show_error(data);
      });
    });

    $("td.show_posts a").call_fancybox();

    $(".link_pre_exam, .open_exam").call_fancybox({
      minWidth: '50%',
      minheigth: '50%',
      closeBtn : true,
      height: 'auto',
      maxHeight: '70%'
    });

    $(".exam-result").call_fancybox({
      minWidth: '50%',
      minHeight: '50%',
      height: 'auto',
      closeBtn : true
    });

  });

  function calcule_grade_user_exam(link){
    if ($(link).attr('disabled') == 'disabled'){
      flash_message("#{t('exams.error.calcule_grade')}", 'alert');
      return false;
    }
    
    $.put($(link).data('url'), function(data){
      flash_message(data.notice, 'notice');
      var tr = $(link).parents('tr:first');
      $(tr).find('.situation:first').html(data.status);
      $(tr).find('.grade:first').html(data.grade);
    }).error(function(data){
      var response = $.parseJSON(data.responseText);
      if (typeof(response.alert) != "undefined")
       flash_message(response.alert, 'alert');
    });
  }