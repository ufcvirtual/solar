= stylesheet_link_tag 'autocomplete'
= javascript_include_tag 'autocomplete', 'edition'

%form
  .edition.block_content
    - without_required_message = without_required_message rescue nil
    - filter_number = filter_number rescue nil
    - unless without_required_message
      %p= t(:required_fields)
    %fieldset#allocation_tag_selection
      %legend= t('.filter')
      .filter#search_box_accesskey
        .curriculum_unit_type
          = label_tag :curriculum_unit_type, t('.type')
          = select_tag :curriculum_unit_type, options_from_collection_for_select(types, 'id', 'description', type_id), include_blank: true

        .course
          - course_optional = !(optionals.nil?) && optionals.include?('course')
          = label_tag :course, [t('.course'), course_optional ? '' : '*'].join
          = select_tag :course, nil, :'data-optional' => course_optional

        .curriculum_unit
          - uc_optional = !(optionals.nil?) && optionals.include?('curriculum_unit')
          = label_tag :curriculum_unit, [t('.curriculum_unit'), uc_optional ? '' : '*'].join
          = select_tag :curriculum_unit, nil, :'data-optional' => uc_optional

        .semester
          - s_optional = !(optionals.nil?) && optionals.include?('semester')
          = label_tag :semester, [t('.semester'), s_optional ? '' : '*'].join
          = select_tag :semester, nil, :'data-optional' => s_optional, :'data-permit-offer' => defined?(permit_offer).nil? ? true : permit_offer

        .offer_groups_options
          .radio_options
            = radio_button_tag "radio_option_offer_#{filter_number}", 'offer', false, name: 'radio[option]', disabled: true
            = label_tag "radio_option_offer_#{filter_number}_offer", t('.offer')

            = radio_button_tag "radio_option_group_#{filter_number}", 'group', false, name: 'radio[option]', disabled: true, :'data-number' => filter_number
            = label_tag "radio_option_group_#{filter_number}_group", t('.group')

          .groups

        = link_to t(:search), '#', { class: 'btn btn_main', :"data-url-search" => url, id: 'search', :"data-load-to" => "#{list_class}" }


    = hidden_field_tag :allocation_tag_id, @allocation_tag_id
    - unless @group.nil? || (defined?(ignore_tab).nil? ? false : ignore_tab)
      = hidden_field_tag :group_code,    @group.code
      = hidden_field_tag :semester_name, @group.offer.semester.name
      = hidden_field_tag :uc_name,       @group.offer.curriculum_unit.try(:name)
      = hidden_field_tag :course_name,   @group.offer.course.try(:name)
      = hidden_field_tag :uc_type,       @group.offer.curriculum_unit.try(:curriculum_unit_type).try(:description)


    .edition_content

      - if back
        .back.invisible
          = render 'editions/back_items'
          
      - if @allocation_tag_id.blank?
        - if @contacts.nil?
          %div{ class: "#{list_class}" }
        - else
          .user_contacts
            %h3.select= t('messages.contacts.select')
            .contacts-list
              .list_users_contacts
      - elsif @contacts.nil?
        = render 'editions/items'
      - else
        .user_contacts
          %h3.select= t('messages.contacts.select')
          .contacts-list
            = render partial: 'messages/users', object: @users = @contacts, object: @allocation_tags_ids = ''

      - if back
        .back.invisible
          = render 'editions/back_items'

:javascript
  $(function(){
    $(".back_btn").click(function(){
      erase_flash_messages();

      var data = {
        allocation_tags_ids: $("#allocation_tags_ids").val(),
        selected: $("#selected").val(),
        offer_id: $("#offer_id").val()
      };

      $.get($(this).attr("href"), data, function(data){ $(".edition_items").replaceWith(data); });
      $(".back").addClass("invisible");
      return false;
    });

    $(".ui-helper-hidden-accessible").removeAttr("display");

    $(".ui-autocomplete-input").on('keydown', function(){
      var that = this;
      setTimeout(function() {
        var text = null;
        var element = $(that).closest('.ui-combobox').find('.ui-helper-hidden-accessible');
        var qtd = element.text().replace(/[^0-9]/g,'');
        if(qtd==1){
          text = qtd + "#{I18n.t(:filter_result_singular, scope: "editions.content_filter")}";
        }else if(qtd>1){
          text = qtd +"#{I18n.t(:filter_result_plural, scope: "editions.content_filter")}";
        }else{
          text = "#{I18n.t(:not_result_filter, scope: "editions.content_filter")}";
        }
        element.text(text);
      }, 100);
    });  
  });
