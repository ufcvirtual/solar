.tool_management{ :'data-link-list' => tool_management_editions_path(allocation_tag_ids: @allocation_tag_ids) }
  %a{ onkeydown: 'click_on_keypress(event, this);', :'data-shortcut' => t("shortcut.editions.code.window"), :'data-shortcut-name' => t("shortcut.editions.name.window"), class: 'hidden open_window'}

  %a{ onkeydown: 'click_on_keypress(event, this);', :'data-shortcut' => t("shortcut.editions.code.analyzer_position"), :'data-shortcut-name' => t("shortcut.editions.name.analyzer_position"), :'data-shortcut-shift' => 'true', class: 'hidden analyzer_position'}

  .ui-widget-content{ id: 'draggable', :'data-tooltip' => t(".draggable_info")}
    %a{ href: '#void', :'aria-label' => t('.window_analyzer_home'), :title => t('.window_analyzer_home'), class: 'close_draggable', id: 'draggable_open_window'}
    .ui-widget-content_title
      %h2= t('.draggable_title')

      = link_to content_tag(:i, nil, class: "icon-cancel-circle"), "#void", class: 'close_draggable', :'data-tooltip' => t("draggable.close"), :'aria-label' => t("draggable.close")
    #content_draggable
      %ul{id: 'analise_errors'}
    %a{ href: '#void', :'aria-label' => t('.window_analyzer_end'), :title => t('.window_analyzer_end'), class: 'close_draggable'}
  .title-warning
    %div#how_it_works.how_it_works_title
      = link_to raw(t('.how_it_works_title')), "#how_it_works", onclick: 'hide_or_show_info(this)'
      = link_to content_tag(:i, nil, class: 'invisible icon-arrow-down-triangle', :"data-tooltip" => t('editions.tools.expand')), "#how_it_works", onclick: 'hide_or_show_info(this)'
      = link_to content_tag(:i, nil, class: 'icon-arrow-up-triangle', :"data-tooltip" => t('editions.tools.expand')), "#how_it_works", onclick: 'hide_or_show_info(this)'
    %div.how_it_works= raw t('.how_it_works')
  .title-warning
    %div#rules_and_info.rules_and_info_title
      = link_to raw(t('.rules_title')), "#rules_and_info", onclick: 'hide_or_show_info(this)'
      = link_to content_tag(:i, nil, class: 'invisible icon-arrow-down-triangle', :"data-tooltip" => t('editions.tools.expand')), "#rules_and_info", onclick: 'hide_or_show_info(this)'
      = link_to content_tag(:i, nil, class: 'icon-arrow-up-triangle', :"data-tooltip" => t('editions.tools.expand')), "#rules_and_info", onclick: 'hide_or_show_info(this)'
    %div.rules_and_info=raw t('.rules')
    %br
    - if @working_hours.blank?
      %div.rules_and_info=raw t('.rule_wh1')
    - else
      %div.rules_and_info=raw t('.rule_wh2', working_hours: @working_hours)
    %br
    %div.rules_and_info= raw t('.rule_passing_grade', passing_grade: (@course.try(:passing_grade) || t('.not_defined')))
    %br
    %div.rules_and_info= raw t('.rule_min_hours', min_hours: (@curriculum_unit.try(:min_hours) || @course.try(:min_hours) || t('.not_defined')))
    %br
    %div.rules_and_info= raw t('.rule_min_grade_to_final_exam', min_grade_to_final_exam: (@course.try(:min_grade_to_final_exam) || t('.not_defined')))
    %br
    %div.rules_and_info= raw t('.rule_min_final_exam_grade', min_final_exam_grade: (@course.try(:min_final_exam_grade) || t('.not_defined')))
    %br
    %div.rules_and_info= raw t('.rule_final_exam_passing_grade', final_exam_passing_grade: (@course.try(:final_exam_passing_grade) || t('.not_defined')))
    %br
    %div.rules_and_info= raw t('.rule_window_analyzer')
  .management

    = form_tag manage_tools_editions_path, id: 'form_manage_tools_editions', method: :put do

      - if @tools.any?
        %div
          .expand_hide
            = link_to content_tag(:i, nil, class: 'icon-resize-enlarge', :"data-tooltip" => t('.expand')), "#void", onclick: 'show_all()'
            .expand_link= link_to t('.expand'), "#void", onclick: 'show_all()'
            = link_to content_tag(:i, nil, class: 'icon-resize-shrink', :"data-tooltip" => t('.compress')), "#void", onclick: 'hide_all()'
            .compress_link= link_to t('.compress'), "#void", onclick: 'hide_all()'
        %div
          .frequency_equally
            - if !@working_hours.blank? && @groups.size == 1
              = link_to content_tag(:i, nil, class: 'icon-clock', :"data-tooltip" => t('.share_wh')), "#void", onclick: "equal_frequencies(#{@working_hours})"
              .frequency_link= link_to t('.share_wh'), "#void", onclick: "equal_frequencies(#{@working_hours})"
          .frequency_automatic
            = link_to content_tag(:i, nil, class: 'icon-clock', :"data-tooltip" => t('.automatic_wh_tooltip')), "#void", onclick: "automatic_frequencies()"
            .frequency_link= link_to t('.automatic_wh'), "#void", onclick: "automatic_frequencies()"
          .set_weight
            = link_to content_tag(:i, nil, class: 'icon-clipboard', :"data-tooltip" => t('.default_weight')), "#void", onclick: 'set_weight()'
            .weight_link= link_to t('.default_weight'), "#void", onclick: 'set_weight()'
          .set_final_weight

            = link_to content_tag(:i, nil, class: 'icon-clipboard', :"data-tooltip" => t('.default_final_weight')), "#void", onclick: 'set_final_weight()'
            .weight_link= link_to t('.default_final_weight'), "#void", onclick: 'set_final_weight()'
          .analyzer
            = link_to content_tag(:i, nil, class: 'icon-popup', :"data-tooltip" => t('.window_analyzer_home')), "#void", onclick: 'slideDraggable()'
            = link_to t('.analyzer'), "#void", onclick: 'slideDraggable()'
            = link_to content_tag(:i, nil, class: 'icon-clipboard'), "#void", onclick: "manage_automatic_tools(#{@allocation_tags_ids.flatten.uniq})"
            = link_to "Executar Gerência Automática", "#void", onclick: "manage_automatic_tools(#{@allocation_tags_ids.flatten.uniq})", id: 'automatic_management_link'

          - tools_ids = []
          - @tools.collect{|key, value| value}.flatten.each do |tool|
            - acs = tool.ids.to_s.delete('[]').split(',')
            - tool['acs'] = acs.uniq
            - tools_ids << acs
          - tools_ids = tools_ids.flatten.uniq

        - @tools.each do |key, value|
          = render partial: 'editions/tools_management/tools', locals: { tool_name: key, tools: value, wh: @working_hours.blank?, tools_ids: tools_ids }
        = button_tag t('.finish'), :type => 'button', :onclick => "manage_tools(this)", class: 'btn'
        = hidden_field_tag 'working_hours_input', @working_hours
      - else
        .text_none
          = t(:item_search_no_found)


:javascript
  $(document).ready(function(){
    if( $("#draggable").length ) {

      var $sidebar   = $("#draggable"),
          $window    = $(window),
          offset     = $sidebar.offset();
    }
    $('#draggable_open_window').focus();
  });
  $(function(){
    reload_shortcut_list();
    $('.open_window').on('click', function(){
      slideDraggable();
    });

    $('.analyzer_position').on('click', function(){
      $('#draggable').show();
      $("#draggable").css('top', '75%');
      $("#draggable").css('left', '28.5em');
      $('#draggable_open_window').focus();
    });

    setTimeout(function() {
      initializer_analizer();
    }, 800);

    $('.close_draggable').on('click', function(e){
      e.preventDefault();
      $('#draggable').hide();
      $('.management').focus();
      return false;
    });
  });

  function hide_or_show_info(name){
    var parent = $(name).parent();
    parent.siblings().slideToggle('slow', function() {
      parent.siblings().toggleClass('invisible');
    });

    if(parent.siblings().first().hasClass('invisible')){
      parent.find('i.icon-arrow-up-triangle').removeClass('invisible');
      parent.find('i.icon-arrow-down-triangle').addClass('invisible');
    }else{
      parent.find('i.icon-arrow-up-triangle').addClass('invisible');
      parent.find('i.icon-arrow-down-triangle').removeClass('invisible');
    }
  }

  function slideDraggable(){
    var status = $("#draggable").is(":visible")

    $('#draggable').slideToggle();
    if(!status){
      $('#draggable_open_window').focus();
    }else{
      $('#how_it_works_title').focus();
    }
  }

  function check_checkbox(event, object){
    var ckb = $('input', $(object)).last();
    if(event.target.tagName == 'TD'){
      if($(object).hasClass('f') && ckb.prop('disabled'))
        return true;
      ckb.click();
    }

    if($(object).hasClass('fe')){
      final_exam(ckb);
    }else{
      if($(object).hasClass('ev')){
        evaluative(ckb);
      }else{
        if($(object).hasClass('f')){
          frequency(ckb);
        }
      }
    }

    setTimeout(function() {
      initializer_analizer();
    }, 200);
  }
  function selected_equiv(){
    setTimeout(function() {
      initializer_analizer();
    }, 200);
  }

  function manage_tools(button){
    loading_page($(button));
    $(button).parents('form:first').serialize_and_submit({
      error_message: '',
      complement_success: function(data){
        $('tr.red').removeClass('red');
        $.fancybox.close();
      },
      complement_error: function(data) {
        $.fancybox.close();
        $('tr.red').removeClass('red');
        var data = $.parseJSON(data.responseText)

        if(!!data.acs.length)
          $.each(data.acs, function(idx){
            var divs = $('tr.ac_'+data.acs[idx]);
            divs.addClass('red');
            show(divs);
          });

        if(!!data.ats.length)
          $.each(data.ats, function(idx){
            var divs = $('tr.at_'+data.ats[idx]);
            divs.addClass('red');
            show(divs);
          });
      }
    });
  }

  $(".ui-widget-content").mouseover(function() {
    $(this).css("cursor","move");
  });

  function show_all(){
    $('.tools_by_tool_type').slideDown();
    $('.tools .icon-arrow-up').removeClass('invisible');
    $('.tools .icon-arrow-down').addClass('invisible');
  }

  function hide_all(){
    $('.tools_by_tool_type').slideUp();
    $('.tools .icon-arrow-down').removeClass('invisible');
    $('.tools .icon-arrow-up').addClass('invisible');
  }

  function equal_frequencies(total){
    if (!confirm("#{I18n.t(:are_you_sure)}"))
      return false;

    if(total == undefined)
      return false;

    var inputs = $('input[id$="max_working_hours"]').not(':disabled');
    if(!inputs.length){
      flash_message("#{I18n.t('evaluative_tools.warnings.no_frequency_tools')}", 'warning');
      return false;
    }

    var each_value = Number(total)/Number(inputs.length);
    var semitotal = +0;
    for (i = 0; i < inputs.length; i++) {
      if (i != (inputs.length - 1)){
        inputs[i].value = each_value.toFixed(2);
        semitotal = Number(Number(semitotal)+Number(each_value.toFixed(2)));
      }
      else {
        inputs[i].value = Number(Number(each_value.toFixed(2)) + Number(Number(total)-Number(semitotal)-Number(each_value.toFixed(2)))).toFixed(2);
      }
    }
    setTimeout(function() {
      initializer_analizer();
    }, 200);
  }

  function automatic_frequencies() {
    if (!confirm("#{I18n.t(:are_you_sure)}"))
      return false;

    $('td.af input').not(':disabled').prop('checked', true);
  }

  function set_weight(){
    if (!confirm("#{I18n.t(:are_you_sure)}"))
      return false;

    var inputs = $('td.weight input').not(':disabled');
    if(!inputs.length){
      flash_message("#{I18n.t('evaluative_tools.warnings.no_evaluative_tools')}", 'warning');
      return false;
    }

    inputs.val(1);
  }

  function set_final_weight(){
    if (!confirm("#{I18n.t(:are_you_sure)}"))
      return false;

    var inputs = $('td.final_weight input').not(':disabled');
    if(!inputs.length){
      flash_message("#{I18n.t('evaluative_tools.warnings.no_evaluative_tools')}", 'warning');
      return false;
    }
    inputs.val(100);
    setTimeout(function() {
      initializer_analizer();
    }, 200);
  }

  function final_exam(ckb){
    var parent = $(ckb).parents('tr');
    var value  = $(ckb).prop('checked');

    if(!value && parent.find("select[id$='equivalent_academic_allocation_id']").val() != '')
      return true;

    parent.find("input[id$='weight']").prop('disabled', value);
    parent.find("input[id$='final_weight']").prop('disabled', value);
    parent.find("input[id$='frequency']").prop('disabled', value);

    if((!value && parent.find("input[id$='frequency']").prop('checked')) || value)
      parent.find("input[id$='max_working_hours']").prop('disabled', value);
  }

  function frequency(ckb){
    var parent = $(ckb).parents('tr');
    var value  = $(ckb).prop('checked');


    if(parent.find("select[id$='equivalent_academic_allocation_id']").val() == '')
      parent.find("input[id$='max_working_hours']").prop('disabled', !value);

    parent.find("input[id$='frequency_automatic']").prop('disabled', parent.hasClass("Exam") ? true : !value);

    if(!$("#"+$(ckb).prop('id').replace('frequency', 'evaluative')).prop('checked')){
      parent.find("select[id$='equivalent_academic_allocation_id']").prop('disabled', !value);
      if(!value)
        parent.find("select[id$='equivalent_academic_allocation_id']").val('');
    }
  }

  function evaluative(ckb){
    var parent = $(ckb).parents('tr');
    var value  = !!$(ckb).prop('checked');

    if(parent.find("input[id$='final_exam']").prop('checked'))
      parent.find("input[id$='final_exam']").prop('checked', false);
    parent.find("input[id$='final_exam']").prop('disabled', !value);
    parent.find("input[id$='weight']").prop('disabled', !value);
    parent.find("input[id$='final_weight']").prop('disabled', !value);

    if(!$("#"+$(ckb).prop('id').replace('evaluative', 'frequency')).prop('checked')){
      parent.find("select[id$='equivalent_academic_allocation_id']").prop('disabled', !value);
      if(!value)
        parent.find("select[id$='equivalent_academic_allocation_id']").val('');
    }
  }

  function manage_automatic_tools(allocation_tags_ids){

    if(confirm("#{I18n.t('evaluative_tools.messages.execute_manage_tool')}")){
    
      loading_page($("#automatic_management_link"))

      $.ajax({
         url: '/editions/automatic_management',
         type: 'post',
         data: {allocation_tags_ids},
         success: function(resp) {
            if(resp.success){
              
              $.get('/editions/tool_management?allocation_tags_ids='+allocation_tags_ids.join(" "), function(data){
                  $(".edition_items").html(data);
                  $(".back").removeClass("invisible");
                  loadFocus();
                  $.fancybox.close()
                  flash_message(resp.msg, 'notice')

                  $(".block_title_exam.block_exam .icons a:first-child").each(function(index,link){hide_or_show(link)})
          
              }).error(function(data){
                  var data = $.parseJSON(data.responseText);
                  if (typeof(data.alert) != "undefined")
                    flash_message(data.alert, 'alert');
              });
            }
            else{
              console.log(resp.msg);
              $.fancybox.close();
              flash_message(resp.msg, 'alert');
            }
         },
         error: function( req, status, err ) {
           console.log("Error: " + status);
           $.fancybox.close();
           flash_message("Error: " + status, 'alert');
         }
      });
    }
    
  }
