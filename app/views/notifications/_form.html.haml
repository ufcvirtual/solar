:javascript
  CKEDITOR_BASEPATH = "#{request.env['RAILS_RELATIVE_URL_ROOT']}/assets/ckeditor_4/ckeditor/";

= javascript_include_tag 'ckeditor_4/ckeditor/ckeditor', 'ckeditor_config'

= simple_form_for(@notification, html: { multipart: true, id: 'notification_form' }) do |f|
  %span.form_requirement= t(:required_fields)
  %h1#lightBoxDialogTitle= t((f.object.persisted? ? :edit : :new), scope: [:notifications, :form])

  .form-inputs.block_content
    = hidden_field_tag :allocation_tags_ids, @allocation_tags_ids

    .inline_block
      = f.input :title
      = f.fields_for :schedule, defaults: {required: true} do |s|
        .schedule_dates
          - start_date = (s.object.start_date.nil?) ? nil : l(s.object.start_date.to_date, format: :datepicker)
          - end_date = (s.object.end_date.nil?) ? nil : l(s.object.end_date.to_date, format: :datepicker)

          .left= s.input :start_date, label: t(".day_from"), as: :string, input_html: {id: 'from-date', size: 10, value: start_date}
          .right_form= s.input :end_date, label: t(".day_to"), as: :string, input_html: {id: 'until-date', size: 10, value: end_date}
        - if @can_mark_as_mandatory
          .inline
            = f.label :mandatory_reading, t('.mandatory'), {:'data-tooltip' => t('.mandatory_explain'), :'aria-label' => t('.mandatory_explain'), class: 'string control-label form_label'}
            = f.input :mandatory_reading, label: false

    = f.input :description, as: :ckeditor, label: false

    .notification_files
      - if @files_errors
        %span.field_with_errors.error= @files_errors
      .files
        .input.string
          = label_tag t('notifications.list.files')
          = f.add_nested_fields_link :notification_files, t('.add_files'), class: 'btn'
        = render partial: 'notifications/file', locals: { f: f }

    .notification_profiles
      .profiles
        .input.string
          - profiles = f.object.profile_ids.any?
          = label_tag :profiles, t('.profiles'), {:'data-tooltip' => t('.profiles_explain'), :'aria-label' => t('.profiles_explain')}
          = check_box_tag :all, true, !profiles
          = label_tag :all, t('common_between_pages.all')
          #profiles_box{class: (profiles ? '' : 'invisible')}
            = f.collection_check_boxes :profile_ids, Profile.all, :id, :name, {multiple: true, item_wrapper_tag: 'div', item_wrapper_class: 'profile_ckb'}
      - if @profiles_errors
        %span.field_with_errors.error= @profiles_errors

    = render "groups/codes"

    .form-actions.right_buttons
      = button_tag t(:cancel), :type => 'button', :onclick => "jQuery.fancybox.close()", class: 'btn btn_default btn_lightbox', alt: t(:cancel)
      = button_tag t(:save), :type => 'button', :onclick => "save_notification()", class: 'btn btn_main btn_lightbox', alt: t(:save)


:javascript
  var locale = "#{I18n.locale}";

  CKEDITOR.on('instanceReady', function (ev) {

      ev.editor.dataProcessor.writer.setRules('br', {
        indent: false,
        breakBeforeOpen: false,
        breakAfterOpen: false,
        breakBeforeClose: false,
        breakAfterClose: false
     });
  });


  $(function(){
    $("#from-date, #until-date").mask("#{I18n.t(:mask, scope: "date.formats")}");
    $("#from-date, #until-date").datepicker();

    $('#all').change(function(){
      $('#profiles_box').toggle();
      if(!!$(this).prop('checked')){
        $('#profiles_box input').each(function(){
          $(this).prop('checked', false);
        });
      }
    });

    // remove previous observers to click to add files
    $(document).off('fields_added.nested_form_fields');
    // when click to add files
    $(document).on("fields_added.nested_form_fields", function(event) {
      // gets last file input - it will be a blank one
      var last_file = $('#notification_form #files input[type="file"]:last');
      // click to choose file
      last_file.click();
      // remove previous observers on file input
      $('#notification_form #files input[type="file"]').off('change');
      // observe file input
      last_file.change(function(){
        // when it changes, add choosen file to list as a name and with a remove button
        var last_form_input = $('#notification_form #files .duplicatable_nested_form:last .input');
        last_form_input.prepend("<div id='file'>"+this.files[0].name+" ( "+(this.files[0].size/1048576).toFixed(2)+"MB ) </div>");
        last_form_input.next('.info').removeClass('invisible');
      });
    });

  });
