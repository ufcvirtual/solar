.lesson.open
  .header
    .titlebar#lesson_header
      .inline
        .breadcrumb
          %span.course
            %h2#lesson_name{tabindex: 0}
              = t('lessons.open.you_are', name: @offer.parent_name)
              = " > "
              %span.modules#nav_modules{role: 'menubar'}
                %a.btn.btn_dropdown#module-selected{ href: 'javascript:toggle_modules()', :'aria-label' => t('lessons.open.lmodule_menu', lmodule: @lesson.lesson_module.name) }
                  = @lesson.lesson_module.name
                  %i.icon-arrow-down-triangle{:'aria-hidden' => 'true'}
                .dropdown.dropdown-tip.dropdown-relative#lmodule-options-dropdown
                  %ul.dropdown-menu
                    - @modules.each do |lmodule|
                      %li= link_to lmodule[:name], '#', :'data-id' => lmodule[:id], class: (lmodule[:id] == @lesson.lesson_module_id ? 'selected' : ''), onclick: 'change_module(event, this)', onkeydown: 'change_module(event, this)', :'data-ats' => @lesson.allocation_tags.map(&:id)
              = " > "
              %span.lessons#nav_lessons{role: 'menubar'}
                %a.btn.btn_dropdown#lesson-selected{ href: 'javascript:toggle_lessons()', :'aria-label' => t('lessons.open.lesson_menu', lesson: @lesson.name) }
                  = @lesson.name
                  %i.icon-arrow-down-triangle{:'aria-hidden' => 'true'}
                .dropdown.dropdown-tip.dropdown-relative#lesson-options-dropdown
                  %ul.dropdown-menu
                    - lessons_c = @lesson.lesson_module.lessons_to_open(current_user).map { |l| [l.name, l.id, { :'data-path' => l.path, :'data-draft' => l.is_draft? }] }
                    - lessons_c.each do |lesson|
                      %li{role: 'menuitem'}= link_to lesson[0], '#', {:'data-path' => lesson[2][:'data-path'], :'data-id' => lesson[1], class: (lesson[1] == @lesson.id ? 'selected' : ''), onclick: 'change_lesson(event, this)', onkeydown: 'change_lesson(event, this)', :'data-draft' => lesson[2][:'data-draft']}
              %span.lesson-file-download{role: 'menubar', style: (@lesson.is_video? ? '' : 'display: none;')}
                = link_to (content_tag(:i, nil, class: 'icon-download')), @lesson.path + "?download=true", class: 'btn', :'aria-label'=> t('lessons.open.download_file'), :'data-tooltip' => t('lessons.open.download_file')
              
              -if(!@path_audio.nil? || (can?(:change_status, @lesson) || current_user.admin?))
                %audio{ src: @path_audio, autoplay: false, controls: "controls", type: "audio/mpeg", name: 'audio_lesson', id: 'audio_lesson', preload: 'auto'}
              - if can?(:change_status, @lesson) || current_user.admin?
                = select_tag "Idioma", options_for_select(['', ['Português', 'pt-BR'], ['Espanhol', 'es-ES'], ['Inglês US', 'en-US']], selected: 'pt-BR'), include_blank: false, id: 'language_option'
                = link_to (content_tag(:i, nil, class: 'icon-music3')) + t('lessons.open.generate_audio'), '#', onclick: 'send_text_lesson(this)', :'data-url' => generate_audio_lesson_path(@lesson.id), :'aria-label'=>  t('lessons.open.generate_audio'), :'data-tooltip' =>  t('lessons.open.generate_audio'), id: "generate_audio"
                %span=t('lessons.open.used', count: @count_text_month.to_s)
                %span=t('lessons.open.available', count: @text_available.to_s)

      - if can?(:change_status, @lesson) || current_user.admin?
        .lesson_status
          %span.draft{ class: @lesson.is_draft? ? '' : 'invisible' }
            = image_tag 'rejected.png', :'aria-hidden' => 'true'
            %span.type= t('lessons.index.draft')
          %span.released{ class: @lesson.is_draft? ? 'invisible' : '' }
            = image_tag 'released.png', :'aria-hidden' => 'true'
            %span.type= t('lessons.index.released')

  .content{ :"data-url" => open_lesson_path(@lesson) }
    - if @lesson.valid_file? && @lesson.is_video?
      %span.hide=t(:audio_suggestions)
      %video{ src: @lesson.path, autoplay: false, controls: 'true', name: 'audioQuestion', preload: 'auto', onplay: 'check(this);', onclick: 'handleMediaErrorFirefox(this);', onkeypress: "return handleEnterKey(event, this);" }
        %track{ kind: "captions"}
        %track{ kind: "descriptions"}
    - else
      %iframe#content_lesson{ title: @lesson.name, src: @lesson.path, width: '100%', height: '100%', name: 'content_lesson', target: '_self', frameborder: 0, framespacing: 0 }

  #saving
    %h2= t('lessons.open.text_generate_audio')
    %img= image_tag('loading.gif')

= javascript_include_tag 'lessons', 'audios'

:javascript
  var get_lesson_url = "#{lesson_url('lesson_id')}";
  var get_module_lessons_url = "#{open_module_lessons_path('lesson_module_id', allocation_tags_ids: 'allocation_tags_ids_value')}";
  var array_topicos = new Array();
  var lesson_text;
  var array_topicos_missing = new Array();


  $(function(){
    
    setTimeout(function() {
      let menu = $("#content_lesson").contents().find("md-sidenav").find(".navigation").last();
     
      menu.find("li").each(function(i, li) {
        array_topicos.push(new Array($(li).text().trim()));
      });
      load_text();
      $("#content_lesson").contents().find("#root").on('click', function(e) {
        setTimeout(function () {
          load_text();
        },1000); 
      });
    }, 3000);

    function load_text(){
      let topico = $("#content_lesson").contents().find("#content").text().trim();
      let texto = $("#content_lesson").contents().find(".white-paper").text().replace(/\s{2,}/g,' ');
      texto = texto.replace(/\r?\n|\r/g,'').replace(/\s{2,}/g,' ');
      for (var i in array_topicos) {
        //verifica se o texto pertence ao tópico
        if(array_topicos[i][0]==topico){ 
          array_topicos[i][1] = texto;
          let idx = array_topicos_missing.indexOf(topico)
          if(idx != -1){
            delete array_topicos_missing[idx];
            array_topicos_missing = array_topicos_missing.filter(Boolean); 
          }
        }
      }
    }

    //document.domain = "#{YAML::load(File.open('config/global.yml'))[Rails.env.to_s]['domain']}";
    $(document).on("keydown", function(event){
      var keynum = event.which || event.keyCode;

      if(keynum == 27 && dropdownModulesIsOpen == false && dropdownLessonsIsOpen == false) {
        parent.$.fancybox.close();
      }
    });

    $("#module-selected, #lesson_name").on("keydown", function(event){
      var keynum = event.which || event.keyCode;

      if(keynum == 39) {
        if(dropdownModulesIsOpen) {
          hide_modules();
        }

        $("#lesson-selected").focus();
      }
    });

    $("#lesson-selected, #lesson_name").on("keydown", function(event){
      var keynum = event.which || event.keyCode;

      if(keynum == 37) {
        if(dropdownLessonsIsOpen) {
          hide_lessons();
        }

        $("#module-selected").focus();
      }
    });
  });

  function find_note(name){
    var comment = '';
    var data =  {
                  'lesson_note': {
                    'name': name,
                    'lesson_id': "#{@lesson.id}"
                  }
                };

    $.ajax({
      url: "#{find_lnotes_path}",
      data: data,
      method: 'GET',
      async: false,
      success: function(data){
        comment = data.content;
      },
      error: function(){
        alert("#{t('lesson_notes.error.cant_find_note')}");
      }
    });

    return comment;
  }

  function create_or_update_note(name, description){
    var data =  {
                  'lesson_note': {
                    'name': name,
                    'description': description,
                    'lesson_id': "#{@lesson.id}"
                  },
                  "#{request_forgery_protection_token}": "#{form_authenticity_token}"
                };

    $.post("#{create_or_update_lnotes_path}", data, function(data){
      alert("#{t('lesson_notes.success.created_updated')}");
    }).fail(function(data){
      alert("#{t('lesson_notes.error.cant_create_note')}");
    });
  }