= javascript_include_tag "edition"

= hidden_field_tag(:allocation_tags_ids, params[:allocation_tags_ids]) 
= button_tag t(:new, scope: [:lesson_modules, :buttons]), class: 'btn btn_default', id: "new_module"

- previous_allocation_tag = nil

- @allocation_tags.each_with_index do |allocation_tag, idxat|

  - allocation_tag_path = allocation_tag_path(allocation_tag, @what_was_selected)

  .block_wrapper.list_lessons
    - unless previous_allocation_tag == idxat
      - previous_allocation_tag = idxat
      .edition_allocation_tag_path= allocation_tag_path

    - unless allocation_tag.lesson_modules.empty?
      - allocation_tag.lesson_modules.each_with_index do |lesson_module, idxm|

        - lessons = lessons_by_module(lesson_module.id)
        .block_wrapper.list_lessons
          .block_title
            %h2
              = lesson_module.name
              = link_to (image_tag "lesson/edit.png", :alt => t(".edit_lesson_module")), "#", class: 'block_title_button edit_module', :value => edit_lesson_module_path(lesson_module, :allocation_tags_ids => params[:allocation_tags_ids])
              = link_to (image_tag "lesson/delete.png", :alt => t(".delete_lesson_module")), "#", class: 'block_title_button delete_module', :value => lesson_module_path(lesson_module, :allocation_tags_ids => params[:allocation_tags_ids])

          .block_content_toolbar
            .block_toolbar_left
              = link_to (image_tag "lesson/add_lesson.png"), "#", onclick: "javascript:open_lightbox('#{new_lesson_path(:lesson_module_id => lesson_module.id,:allocation_tags_ids => params[:allocation_tags_ids])}','#{t(:new_lesson, scope: [:lessons, :list])}',550,270);", class: 'btn btn_main'
              = link_to (image_tag "lesson/import_lesson.png"), "#", onclick: "javascript: alert('importar aula');", id: 'import_lesson', class: 'btn btn_main'

            .block_toolbar_right
              = link_to (image_tag "lesson/edit.png"), "#", onclick: "javascript: edit_lesson('#{lesson_module.id}');", id: 'edit_lesson', class: 'btn btn_default'
              = link_to (image_tag "lesson/manage_files.png"), "#", onclick: "", class: 'btn btn_default manage_files_lesson', :value => lesson_module.id
              = link_to (image_tag "lesson/delete.png"), "#", onclick:  "javascript: delete_lesson('#{lesson_module.id}');", id: 'delete_lesson', class: 'btn btn_default'
              = link_to (image_tag "lesson/download.png"), "#", onclick: "javascript: download_lesson_zip('#{lesson_module.id}');", id: 'download_lesson', class: 'btn btn_default'
              = link_to (image_tag "lesson/release_lessons.png"), "#", id: 'release_lessons', class: 'btn btn_default btn_spacing_left', "data-module_id" => lesson_module.id

          / Lessons list

          %table.tb_list
            %thead
              %tr.lines
                - unless lessons.nil? or lessons.empty?
                  %th{style: 'text-align:center;'}
                    = check_box_tag( 'all', 'all', false, {id: "all_m_#{lesson_module.id}", class: 'lesson_check_all'} )
                  %th{style: 'text-align:center;'}= t(".order")
                  %th= t(".name")
                  %th{style: 'text-align:center;'}= t(".availability")
                  %th{style: 'text-align:center;'}= t(".acceptance")

            %tbody
              - unless lessons.nil? or lessons.empty?
                - lessons.each_with_index do |lesson, idxl|

                  %tr.lines{lesson_name: lesson.name, lesson_id: lesson.id, lesson_order: lesson.order, lesson_status: lesson.status}
                    %td{style: "width: 25px;", align: 'center' }
                      = check_box_tag( "m_#{lesson_module.id}", lesson.id, false, {class: "m_#{lesson_module.id}", file_type: (lesson.type_lesson == Lesson_Type_File)} )
                    %td{style: "width: 50px;", align: 'center'}
                      .lesson_arrows
                        .lesson_arrow_up
                          = link_to (image_tag "lesson/up_arrow.png"), "#", class: 'up'
                        .lesson_arrow_down
                          = link_to (image_tag "lesson/down_arrow.png"), "#", class: 'down'

                    %td
                      %div
                        = link_to lesson.name, "#", {onclick: "javascript: alert('abre aula');", id: "lesson#{lesson.id}", class: 'link_content' }
                      - if lesson.description
                        %div
                          = lesson.description

                    %td{style: "width: 160px", align: 'center'}
                      = t(".since") unless !lesson.schedule.end_date.nil?
                      = l lesson.schedule.start_date, format: :normal
                      =' - '
                      - if lesson.has_end_date?
                        =l lesson.schedule.end_date, format: :normal
                      - else
                        = t(:no_end_date, :scope => [:lessons, :list])  

                    %td{style: "width: 70px", align: 'center'}
                      = link_to (image_tag "lesson/#{(lesson.status == Lesson_Test) ? 'rejected' : 'released'}_lesson.png"), "#", class: 'change_lesson_status', "data-lesson_id" => lesson.id, "data-status_to" => [Lesson_Test, Lesson_Approved].delete_if {|v| v == lesson.status}
              - else
                %tr.lines
                  %td.lesson_description{colspan:  5}
                    = t(:none, scope: [:lessons, :list])

    - else
      .block_content.block_content_text 
        = t(:none, scope: [:lesson_modules])

:javascript

  $(document).ready(function() {

    $('#release_lessons').click(function(){
      var lesson_ids = get_selected_lessons($(this).attr('data-module_id'));
      console.log(lesson_ids);
      if (lesson_ids == "")
        return false;

      var url = "#{change_status_lesson_path(':id', Lesson_Approved, allocation_tags_ids: params[:allocation_tags_ids])}".replace(':id', lesson_ids);
      update_object(url, '#{list_lessons_path(allocation_tags_ids: @allocation_tags_ids)}');

      return false;
    });

    $('.change_lesson_status').click(function() {
      var lesson_id = $(this).attr('data-lesson_id');
      var status_to = $(this).attr('data-status_to');
      var url = "#{change_status_lesson_path(':id', ':status', allocation_tags_ids: params[:allocation_tags_ids])}".replace(':id', lesson_id).replace(':status', status_to);

      update_object(url, '#{list_lessons_path(allocation_tags_ids: @allocation_tags_ids)}');

      return false;
    });

    $(".up, .down").click(function() {
      var row = $(this).parents("tr:first");
      var id1 = row.attr('lesson_id');

      if ($(this).is(".up")) {
        if (row.prev().attr('lesson_order') == undefined) return false;

        var id2 = row.prev().attr('lesson_id');
        var url = "#{change_order_lesson_path(':id1', ':id2')}".replace(':id1', id1).replace(':id2', id2);

        $.ajax({
          type: 'PUT',
          url: url,
          success: function() { row.insertBefore(row.prev()); }
        });
      } else { // down
        if (row.next().attr('lesson_order') == undefined) return false;

        var id2 = row.next().attr('lesson_id');
        var url = "#{change_order_lesson_path(':id1', ':id2')}".replace(':id1', id1).replace(':id2', id2);

        $.ajax({
          type: 'PUT',
          url: url,
          success: function(data, t, x) { row.insertAfter(row.next()); }
        });
      }
      return false;
    });

    $(".lesson_check_all").click(function() {
      var check  = this.checked;
      var module = this.id.slice(4);
      $("."+module).each(function(i) {
          $(this).attr("checked",check);
      });
    });

    $("#new_module").click(function(){
      open_lightbox4('#{new_lesson_module_path(:allocation_tags_ids => params[:allocation_tags_ids])}', '#{t(".new_module")}');
    });

    $(".edit_module").click(function(){
      open_lightbox4($(this).attr('value'), $($(this).children()[0]).attr('alt'));
    });

    $(".delete_module").click(function(){
      delete_object($(this).attr('value'), '#{list_lessons_path(:allocation_tags_ids => @allocation_tags_ids)}');
    });

    $(".manage_files_lesson").click(function(){
      var selected_lessons = get_selected_lessons($(this).attr('value'));
      if(selected_lessons.length == 1){
        lesson_has_file_type = $( "input:checked" ).attr("file_type");
        if(lesson_has_file_type == "true"){
          url = "#{lesson_files_path(lesson_id: 'lessons_ids')}".replace('lessons_ids', selected_lessons[0])
          showLightBoxURL(url, 550, 270, true, "#{I18n.t(:files_management, scope: [:lesson_files])}");
        }else
          alert("#{I18n.t(:lesson_must_have_file_type, scope: [:lesson_files])}");
      }else
        alert("#{I18n.t(:one_lesson_must_be_selected, scope: [:lesson_files])}");
    });

  });

  // função que retorna uma lista de ids das aulas selecionadas em determinado módulo
  function get_selected_lessons(module_id){
    lessons_ids = new Array;
    module_check_boxes = $('[name="m_'+module_id+'"]');
    // coloca, no array, todos os ids das aulas selecionadas para efetuar a ação do módulo
    module_check_boxes.map(function(){
      if(this.checked == true){ lessons_ids.push(this.value) }
    });
    return lessons_ids;
  }

  // verifica se pode realizar a ação (não permitirá e exibirá alerta se nenhuma aula tiver sido selecionada)
  function can_do_action(selected_lessons){
    if(selected_lessons.length == 0){
      alert('#{I18n.t(:must_select_lessons, scope: [:lessons, :notifications])}');
      return false;
    }else{
      return true;
    }
  }

  // download dos arquivos das aulas selecionadas em um módulo
  function download_lesson_zip(module_id){
    allocation_tags_ids = $("#allocation_tags_ids").val();
    lessons_ids         = get_selected_lessons(module_id);

    if(can_do_action(lessons_ids)){
      window.location.href='#{download_files_lessons_path}?lessons_ids='+lessons_ids+'&allocation_tags_ids='+allocation_tags_ids;
    }
  }

  function edit_lesson(module_id){
    lessons_ids = get_selected_lessons(module_id);
    allocation_tags_ids = $("#allocation_tags_ids").val();
    there_tab = lessons_ids.length > 1 ? true : false;
    
    if (!there_tab) {
      if (lessons_ids.length == 1) {
        var url = "#{edit_lesson_path(':id', :allocation_tags_ids => params[:allocation_tags_ids])}".replace(':id', lessons_ids);
        open_lightbox(url, "#{t(:edit_lesson, scope: [:lessons, :list])}", 550, 270);

      } else
        alert('#{I18n.t(:must_select_a_lesson, scope: [:lessons, :notifications])}');
    } else
      alert('#{I18n.t(:select_only_a_lesson, scope: [:lessons, :notifications])}');
  }

  function delete_lesson(module_id){
    lessons = get_selected_lessons(module_id);
    allocation_tags_ids = $("#allocation_tags_ids").val();

    if (lessons.length == 1){
      delete_object( "#{lesson_path(':id', :allocation_tags_ids => params[:allocation_tags_ids])}".replace(':id', lessons), '#{list_lessons_path(:allocation_tags_ids => @allocation_tags_ids)}'); 
      if ($('[name="m_'+module_id+'"]:checked').parents('tr').attr('lesson_status') == "1") {
        alert('#{I18n.t(:cant_delete, scope: [:lessons, :errors])}');
      }  
    } else {
       if(lessons.length <1){
          alert('#{I18n.t(:must_select_a_lesson, scope: [:lessons, :notifications])}');
        } else{
          alert('#{I18n.t(:select_only_a_lesson, scope: [:lessons, :notifications])}');
        }  
    }
  }



