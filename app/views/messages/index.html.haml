.block_wrapper.messages

  = render "header"

  .block_white.index
    .align-left.padding-checkbox
      %input#ckb_all{ type: "checkbox", :"data-children-names" => "checkbox_message" }
      = t(".filter_selected")
      %select.message_status
        %option.check_all= t(:select_all, scope: :messages)
        %option.check_read= t(:select_read, scope: :messages)
        %option.check_unread= t(:select_unread, scope: :messages)

    .align-middle.search_messages
      = text_field_tag :subject, nil, placeholder: t('.placeholder_subject')
      = text_field_tag :user, nil, placeholder: t('.placeholder_user')
      = link_to (content_tag(:i, nil, class: 'icon-search')), '#', class: 'btn', :'data-tooltip' => t(:search), id: 'search_messages', :'data-url' => search_messages_path

    .align-right.btn-group
      = link_to new_message_path, class: "btn btn_main", :"data-tooltip" => t(:new, scope: :messages) do
        %i.icon-plus
      - unless ['trashbox', 'outbox'].include?(@box)
        #mark_as_unread.btn{ "data-tooltip" => t(:mark_as_unread, scope: :messages), :"data-new-status" => 'unread', :"data-link-udpate-status" => change_status_message_path(id: ':id', new_status: 'unread', box: @box) }
          %i.icon-mail
        #mark_as_read.btn{ "data-tooltip" => t(:mark_as_read, scope: :messages), :"data-new-status" => 'read', :"data-link-udpate-status" => change_status_message_path(id: ':id', new_status: 'read', box: @box) }
          %i.icon-mail-read
      - unless @box == "trashbox"
        #remove_message.btn{:"data-tooltip" => t(:delete, scope: :messages), :"data-new-status" => 'trash', :"data-link-udpate-status" => change_status_message_path(id: ':id', new_status: 'trash', box: @box)}
          %i.icon-trash
      - else
        #restore_message.btn{:"data-tooltip" => t(:restore, scope: :messages), :"data-new-status" => 'restore', :"data-link-udpate-status" => change_status_message_path(id: ':id', new_status: 'restore', box: @box)}
          %i.icon-restore

  .messages_list
    = render partial: 'list'

:javascript

  $(function(){
    message_menu_dropdown();

    function search_messages(){
      $.get($('#search_messages').data('url'), { subject: $('#subject').val(), user: $('#user').val(), box: "#{@box}" }, function(data){
        $('.messages_list').html(data);
      });
    }

    $('input#user, input#subject').keyup(function(e) {
      if (e.keyCode == 13) { // when pressend enter
        search_messages();
        return false;
      }
    });

    $('#search_messages').click(function(){
      search_messages();
    });

    $('#ckb_all').nice_checkbox();

    $('div#mark_as_read, div#mark_as_unread, div#remove_message, div#restore_message').click(function(){
      var message_ids = selected_messages();
      if (!message_ids.length)
        return false;

      var url = $(this).data('link-udpate-status').replace(':id', message_ids);
      var new_status = $(this).data('new-status');
      var msgs = $('[type=checkbox]:checked.selected_messages');

      $.put(url, function(response){
        if ($.inArray(new_status, ['trash', 'restore']) != -1) // comportamento diferente
          msgs.parents('tr').fadeOut(500, function(){ $(this).remove() });
        else {
          var links = $('.td_subject a', msgs.parents('tr'));
          if (new_status == "read")
            links.addClass('message_read').removeClass('message_unread');
          else
            links.addClass('message_unread').removeClass('message_read');
        }
      }).complete(function(){
        // contar msgs da caixa de entrada
        $.get("#{count_unread_messages_path}", function(data){
          $('span#count_msgs_unread').html(['(', data.unread, ')'].join(''));
        });
      });
    });
  });
