.block_wrapper.messages

  = render "header"

  .block_white
    .align-left.padding-checkbox
      %input#ckb_all{ type: "checkbox", :"data-children-names" => "checkbox_message" }
      = t(".filter_selected")
      %select.message_status
        %option.check_all= t(:select_all, scope: :messages)
        %option.check_read= t(:select_read, scope: :messages)
        %option.check_unread= t(:select_unread, scope: :messages)

    .align-right.btn-group
      = link_to new_message_path, class: "btn btn_main", :"data-tooltip" => t(:new, scope: :messages) do
        %i.icon-plus
      - unless ['trashbox', 'outbox'].include?(@box)
        #mark_as_unread.btn{ "data-tooltip" => t(:mark_as_unread, scope: :messages), :"data-new-status" => 'unread', :"data-link-udpate-status" => change_status_message_path(id: ":id", new_status: 'unread', box: @box) }
          %i.icon-mail
        #mark_as_read.btn{ "data-tooltip" => t(:mark_as_read, scope: :messages), :"data-new-status" => 'read', :"data-link-udpate-status" => change_status_message_path(id: ":id", new_status: 'read', box: @box) }
          %i.icon-mail-read
      - unless @box == "trashbox"
        #remove_message.btn{:"data-tooltip" => t(:delete, scope: :messages), :"data-new-status" => 'trash', :"data-link-udpate-status" => change_status_message_path(id: ":id", new_status: 'trash', box: @box)}
          %i.icon-trash
      - else
        #restore_message.btn{:"data-tooltip" => t(:restore, scope: :messages), :"data-new-status" => 'restore', :"data-link-udpate-status" => change_status_message_path(id: ":id", new_status: 'restore', box: @box)}
          %i.icon-restore

  .block_content
    - if @messages.any?
      %table.message_div_list
        - @messages.each do |message|
          - msg_path = message_path(id: message.id, box: @box)
          %tr.message_line
            %td.message_line_check
              = check_box_tag 'checkbox_message', message.id, checked = false, {class: 'selected_messages', :"data-message-id" => message.id}
              - css_class = message.was_read != '0' ? 'message_read' : 'message_unread'
              = hidden_field_tag 'message_style', css_class
            %td.td_subject
              - message.labels(current_user.id, system_label = @show_system_label).each do |label|
                %span.message_label= label
              = link_to message.subject, msg_path, class: css_class

            %td.td_attachment= content_tag(:i, nil, class: 'icon-paperclip') if message.count_files != '0'
            %td.td_sender= link_to message.sent_by_name, msg_path
            %td.td_time= link_to l(message.created_at, format: :short), msg_path
    - else
      .text_none= t(:none, scope: :messages)

  .message_div_navigation
    = will_paginate @messages

:javascript

  $(function(){
    message_menu_dropdown();

    $('#ckb_all').nice_checkbox();

    $('div#mark_as_read, div#mark_as_unread, div#remove_message, div#restore_message').click(function(){
      var message_ids = selected_messages();
      if (!message_ids.length)
        return false;

      var url = $(this).data('link-udpate-status').replace(':id', message_ids);
      var new_status = $(this).data('new-status');
      var msgs = $('[type=checkbox]:checked.selected_messages');

      $.put(url, function(response){
        if ($.inArray(new_status, ['trash', 'restore']) != -1) // comportamento diferente
          msgs.parents('tr').fadeOut(500, function(){ $(this).remove() });
        else {
          var links = $('.td_subject a', msgs.parents('tr'));
          if (new_status == "read")
            links.addClass('message_read').removeClass('message_unread');
          else
            links.addClass('message_unread').removeClass('message_read');
        }
      }).complete(function(){
        // contar msgs da caixa de entrada
        $.get("#{count_unread_messages_path}", function(data){
          $('span#count_msgs_unread').html(['(', data.unread, ')'].join(''));
        });
      });
    });
  });
