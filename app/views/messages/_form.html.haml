.message_external_div{ :'data-link-list' => messages_path }
  = render 'header'
  = simple_form_for @message, html: { id: 'form_message_text' } do |f|

    - if @original
      = f.input :original, as: :hidden, input_html: { value: @original.id }
    - if params[:support].blank?
      = f.input :contacts, as: :hidden, input_html: { value: [@reply_to].flatten.compact.map { |c| c[:id] }.join(', ') }
    = hidden_field_tag :support, params[:support]
    = hidden_field_tag :allocation_tag_id, @allocation_tag_id

    .block_content
      .message_header_new
        .message_new_text_to
          .label.align-left
            = label_tag :message_to, t('.message_to')
          .input.align-right
            = text_field_tag :message_to, [@reply_to].flatten.compact.map { |c| c[:resume] }.join(', '), disabled: true
            = link_to t('.add_contacts'), '#void', :'aria-label' => (t('.add_contacts') + t('fancybox.open')), onkeydown: 'click_on_keypress(event, this);', class: 'message_new_textbox', :'data-url' => contacts_messages_path(allocation_tag_id: @allocation_tag_id, reply_to: 'reply_params'), onclick: 'open_contacts_selection(this);', id: '_add_contacts'

        .message_new_text_to
          .label.align-left= label_tag :subject, t('.subject'), for: 'message_subject', id: 'subject'
          .input.align-right
            = f.input :subject, label: false, input_html: { class: 'message_new_textbox' }
            = render partial: 'extra_tools/speech2text', locals: {class_name: 'inline', ckeditor: false, div_id: 'message_subject', number: '', field: t('.subject_speech')}

        .message_new_upload

          #new_message_file
            .label.align-left= label_tag t('.attach')

            %button#link_upload.btn.btn_default.duplicate_nested_form{ :'data-tooltip' => t('.attach_file'),  :'aria-label' => t('.attach_file') }
              %i.icon-paperclip{:'aria-hidden' => 'true'}

            - if @files
              .list_files_to_send.original_files
                %ul
                  - @files.each do |file|
                    %li
                      .attach
                        = hidden_field :message, :original_files, value: file.id, multiple: true
                        = link_to ['-', file.attachment_file_name].join, download_file_messages_path(file_id: file.id)
                        = link_to content_tag(:i, nil, class: 'icon-minus-square'), '#', remote: true, class: 'destroy_original_file', :'aria-label' => t('.remove_attachment', file: file.attachment_file_name , size: file.attachment_file_size), :'data-tooltip' => t('.remove_attachment', file: file.attachment_file_name , size: file.attachment_file_size)
                    %br

            .invisible
              = f.simple_fields_for :files do |f_file|
                .duplicatable_nested_form
                  .inline
                    = f_file.file_field :attachment

            .list_files_to_send
              %ul.files_to_send{:'aria-label' => t('.attachment_list')}


    #div_new_message
      .visuallyhidden= label_tag :content, t('.content'), id: 'content'
      .visuallyhidden= link_to t('.go_to_ckeditor'), '#void', onclick: "CKEDITOR.instances['message_content'].focus();", onkeydown: "CKEDITOR.instances['message_content'].focus();"
      = f.input :content, as: :ckeditor, label: false

    = render partial: 'extra_tools/speech2text', locals: {class_name: 'left', ckeditor: true, div_id: 'message_content', number: '2', field: t('.content_speech')}
    .message_new_action
      = f.submit t(".send"), id: "send_message", class: "btn btn_main", alt: t(".send")
      = link_to t('.discard'), inbox_messages_path, { class: 'btn btn_caution' }

= javascript_include_tag 'ckeditor/init', 'messages'

:javascript

  CKEDITOR_BASEPATH = "#{request.env['RAILS_RELATIVE_URL_ROOT']}/assets/ckeditor/";

  $(function(){

    CKEDITOR.editorConfig = function(config) {
      config.toolbar =
        [
          { name: 'clipboard', items : [ 'Cut','Copy','Paste','PasteText','PasteFromWord','-','Undo','Redo' ] },
          { name: 'styles', items : [ 'Styles', 'Format', 'Font', 'TextColor'] },
          { name: 'basicstyles', items : [ 'Bold', 'Italic', 'Underline', 'Strike', '-', 'RemoveFormat' ] },
          { name: 'paragraph', items : [ 'NumberedList', 'BulletedList', '-', 'Outdent', 'Indent' ] },
          { name: 'links', items : [ 'Link', 'Unlink', 'Smiley' ] },
          { name: 'insert', items : ['EqnEditor'] }
        ];

        config.extraPlugins = 'eqneditor,smiley';
        config.autoParagraph = false;
    };

    $("#send_message").click(function(event){
      if ($('#message_to').val() == ""){
        event.preventDefault();
        alert("#{I18n.t(:without_recipient, scope: [:messages, :form])}");
        $('#_add_contacts').focus();
      }
    });

    // retirar anexos da msg original
    $(".destroy_original_file").click(function(){
      $(this).closest('div.attach').slideUp().remove();
    });
  });

  function focus_editor(){ 
    CKEDITOR.instances['message_content'].focus();
  }

  // add files
  jQuery(function($) {
    var nestedForm;
    if ($('.duplicatable_nested_form').length)
      nestedForm = $('.duplicatable_nested_form').last().clone();

    $('.duplicate_nested_form').click(function(e) {
      var formsOnPage, lastNestedForm, newNestedForm;
      e.preventDefault();

      lastNestedForm = $('.duplicatable_nested_form').last();
      newNestedForm = $(nestedForm).clone();

      formsOnPage = $('.duplicatable_nested_form').length;

      $(newNestedForm).find('label').each(function() {
        var newLabel, oldLabel;
        oldLabel = $(this).attr('for');
        newLabel = oldLabel.replace(new RegExp(/_[0-9]+_/), "_" + formsOnPage + "_");
        return $(this).attr('for', newLabel);
      });

      $(newNestedForm).find('select, input').each(function() {
        var newId, newName, oldId, oldName;
        oldId = $(this).attr('id');
        newId = oldId.replace(new RegExp(/_[0-9]+_/), "_" + formsOnPage + "_");
        $(this).attr('id', newId);
        oldName = $(this).attr('name');
        newName = oldName.replace(new RegExp(/\[[0-9]+\]/), "[" + formsOnPage + "]");
        return $(this).attr('name', newName);
      });

      $(newNestedForm).insertAfter(lastNestedForm);

      // abrindo escolha de arquivos diretamente
      var newfile = $('input[type="file"]', $(newNestedForm));
      newfile.click();

      $(newfile).change(function(){
        // verificando tamanho do arquivo
        if ((this.files[0].size/1024/1024) > ("#{MessageFile::MAX_FILE_SIZE/1024/1024}")) {
          alert("#{t(:file_too_big, scope: :messages)}");
          $(newNestedForm).remove();
          return false;
        }

        var file_size = (this.files[0].size/1024).toFixed(2) + "KB";
        var remove_file_label = "#{t('messages.form.remove_attachment', file: 'file', size: 'size')}".replace('file', this.files[0].name).replace('size', file_size);

        var new_file_name = "<li class='input files file_attached'>" + this.files[0].name + "(" + file_size + ") <a href='#' aria-label='"+remove_file_label+" data-dropdown='"+remove_file_label+"' onkeydown='click_on_keypress(event, this);' class='remove-file'><i class='icon-minus-square'></i></i> </span> </li>";
        $(".files_to_send").append(new_file_name);
        setTimeout(function() {
          $("ul.files_to_send").click();
        }, 100);
          
        $('.remove-file:last').click(function(){
          $(this).closest('.files.file_attached').slideUp().remove();
          $(newfile).closest('.duplicatable_nested_form').slideUp().remove();
          //focus_element('ul.files_to_send');
          setTimeout(function() {
            $("ul.files_to_send").click();
          }, 100);
        });
      });

    });
  });
  
  function open_contacts_selection(link){
    var url = $(link).data('url').replace('reply_params', $("#message_contacts").val().replace( /\s/g, ""));
    $(link).call_fancybox({
      href: url,
      open: true
    });
  }
  $(function(){
    inputFocuErroMsg();
  });

  function inputFocuErroMsg(){
    if (typeof($(".error")) !== "undefined") {
      $(".error").each( function(index, value){   
          var label = $(this).closest('.message_new_text_to').find('label');
          var text = $(label).text()+': '+$(this).text();
          $(label).attr("aria-label", text);
      });
      var lab = $(".error").closest('.message_new_text_to').find('label');
      setTimeout(function() {
        if($(lab).length==1){
          $(lab).focus();
        }else{
            focus_editor(); 
        }
      }, 300);   
    }  
  }