- exams       = (question.respond_to?(:count_exams)  ? question.count_exams : question.exams.count)
- can_delete  = exams.to_i.zero?
- has_items   = (question.respond_to?(:count_items)  ? !question.count_items.to_i.zero? : question.question_items.any?)
- has_images  = (question.respond_to?(:has_images)   ? (question.has_images == 't') : question.question_images.any?)
- has_audios  = (question.respond_to?(:has_audios)   ? (question.has_audios == 't') : question.question_audios.any?)
- items       = (question.respond_to?(:count_items)  ? question.count_items : question.question_items.count)
- labels      = (question.respond_to?(:labels)       ? question.labels.delete('NULL').split(',') : (question.question_labels.map(&:name) rescue ''))
- author_name = (question.respond_to?(:author_name)) ? question.author_name : question.user.name
- updated_by_name = (question.respond_to?(:updated_by_name)) ? question.updated_by_name : question.updated_by_user.try(:name)
%tr.lines{ id: "tr_#{question.id}", :'data-id' => question.id }
  %td{ style: 'text-align:center;' }
    = check_box_tag('ckb_question', question.id, false, { class: 'ckb_question', :'data-can-delete' => can_delete, :'data-question-id' => question.id })
  %td
    %div
      .title
        - if has_items
          = content_tag(:i, nil, class: 'icon-list', :'data-tooltip' => t('.has_items', count: items))
        - if has_images
          = content_tag(:i, nil, class: 'icon-pictures', :'data-tooltip' => t('.has_images'))
        - if has_audios
          = content_tag(:i, nil, class: 'icon-music', :'data-tooltip' => t('questions.question.has_audios'))
      .description
        .minimun
          - if question.enunciation.size > 100
            = strip_tags(question.enunciation.truncate(100)).html_safe
            = content_tag(:i, nil, class: 'expand icon-ellipsis', :"data-tooltip" => t('.expand_enunciation'))
          - else
            = raw question.enunciation.truncate(100)
        .complete.invisible
          = raw question.enunciation
          = content_tag(:i, nil, class: 'compress icon-arrow-up-triangle', :"data-tooltip" => t('.compress_enunciation'))
      .participants.equivalent
        %a{ href: '#', :"data-dropdown" => "#dropdown_1a_#{question.id}" }
          %i.icon-user
          = [t('questions.questions.author'), author_name.truncate(15)].join(': ')
          %i.icon-arrow-down-triangle
        .dropdown.dropdown-tip{id: "dropdown_1a_#{question.id}"}
          %ul{ class: 'dropdown-menu' }
            = author_name
      - unless updated_by_name.blank?
        .participants.equivalent
          %a{ href: '#', :"data-dropdown" => "#dropdown_2a_#{question.id}" }
            %i.icon-user
            = [t('questions.questions.updated_by'), updated_by_name.truncate(15)].join(': ')
            %i.icon-arrow-down-triangle
          .dropdown.dropdown-tip{id: "dropdown_2a_#{question.id}"}
            %ul{ class: 'dropdown-menu' }
              = updated_by_name
      - unless labels.blank?
        .group_label= render 'labels', labels: labels
  %td{ style: 'text-align:center;' }= question.type
  %td{ style: 'text-align:center;' }= l(question.updated_at, format: :normal)
  %td{ style: 'text-align:center;' }= link_to_function content_tag(:i, nil, class: 'icon-eye', :'data-tooltip' => t('.preview')), 'preview_question(this)', :'data-url' => question_path(question), class: 'preview_question', disabled: !@can_see_preview
  %td{ style: 'text-align:center;' }= question.privacy? ? content_tag(:i, nil, class: 'icon-lock', :'data-tooltip' => t('.private')) : content_tag(:i, nil, class: 'icon-minus', :"data-tooltip" => t('.public'))
  %td{ style: 'text-align:center;' }= exams
  %td{ style: 'text-align:center;' }= link_to_function (image_tag "#{question.status ? 'released' : 'rejected'}.png"), 'change_status_single(this)', :'data-tooltip' => (question.status ? t('lessons.index.released') : t('lessons.index.draft')), :'data-url' => change_status_question_path(question), class: "#{question.status ? 'released' : 'rejected'}"

= javascript_include_tag 'tooltip'

:javascript
  $(function(){
    $(".compress").click(function(){
      $(this).parents('.complete:first').hide();
      $(this).parents('.description:first').find('.minimun').show();
    });

    $(".expand").click(function(){
      $(this).parents('.minimun:first').hide();
      $(this).parents('.description:first').find('.complete').show();
    });

    $('#all_questions').nice_checkbox({
      can_enable_elements: true,
      objects_to_change_status: ['.btn_copy', '.export_question', '.change_status_ckb'],
      parent_div: $('.list_questions')
    });
  });
