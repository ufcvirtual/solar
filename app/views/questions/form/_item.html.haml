#items
  - count = 0
  - count_items = f.object.question_items.count
  = f.nested_fields_for :question_items, wrapper_tag: :div do |i|
    - if (f.object.new_record? || i.object.persisted? || count == count_items + 1)
      - count += 1
      .duplicatable_nested_form
        = i.remove_nested_fields_link content_tag(:i, nil, class: 'icon-trash', :'data-tooltip' => t('questions.form.items.remove'))
        = link_to_function content_tag(:i, nil, class: 'icon-comment'), 'add_comment(this)', class: 'comment', :'data-tooltip' => t('questions.form.items.comments')
        = link_to_function content_tag(:i, nil, class: 'icon-pictures'), 'add_image(this)', class: 'image_icon', :'data-tooltip' => t('questions.form.items.images')
        .inline
          .inputs
            = i.check_box :value
            = i.select :value, ([ ['V', true], ['F', false]]), include_blank: false
            .obs= t('questions.form.items.choose_correct')
          .label= i.label :description
          .desc
            = i.input :description, label: false, class: 'ckeditor'
          .comment_area{ class: i.object.comment.blank? ? 'hide' : '' }
            = i.input :comment, as: :text, label: t('questions.form.items.comment')
          .image.hide
            .upload-preview
              - if i.object.item_image_file_name.blank?
                %img{ src: '' }
              - else
                %img{ src: i.object.item_image.as_json, id: 'image_item' }
              = i.input :item_image, as: :file, label: false
              - if i.object.item_image_file_name
                = link_to_function content_tag(:i, nil, class: 'icon-trash'), 'remove_image_item(this)', :'data-url' => remove_image_item_exam_question_path(i.object, exam_question_id: @exam_question.id)
                = link_to_function content_tag(:i, nil, class: 'icon-trash'), 'remove_image_item_tmp(this)', class: 'trash-tmp', style: 'display: none'
              - else
                = link_to_function content_tag(:i, nil, class: 'icon-trash'), 'remove_image_item_tmp(this)'

              = link_to_function t('questions.form.items.add_image'), 'add_file(this)', class: 'btn btn_main add_file'

            .info
              = i.input :img_alt, label: t('questions.form.items.alt')
              = i.label t('questions.form.items.alt_desc'), class: 'alt'
    -else
      - count += 1

= javascript_include_tag 'ckeditor/init', 'tooltip'

:javascript
  $(function(){
    CKEDITOR_BASEPATH = "#{request.env['RAILS_RELATIVE_URL_ROOT']}/assets/ckeditor/";

    CKEDITOR.editorConfig = function (config) {
      config.toolbar =
        [
          { name: 'clipboard', items : [ 'Copy', 'Paste', 'PasteText', '-', 'Undo', 'Redo' ] },
          { name: 'insert', items : ['EqnEditor'] },
          { name: 'basicstyles', items : [ 'Bold', 'Italic', 'Underline', 'Strike', '-', 'RemoveFormat' ] },
          { name: 'paragraph', items : [ 'NumberedList', 'BulletedList', '-', 'Outdent', 'Indent' ] }
        ];

        config.extraPlugins = 'eqneditor,oembed';
        config.resize_enabled = false;
        config.height = '80px';
        config.width = '500px';
    };

    $("#items").on("fields_added.nested_form_fields", function(event) {
      change_inputs(true, "#{f.object.nil? ? false : f.object.type_question}");

      $('.new_question .obs').unbind('click');

      $('.new_question .obs').click(function(){
        var ckb = $(this).parent().find('input[type="checkbox"]');
        ckb.prop('checked', !ckb.prop('checked'));
      });
    });

    $('#items .duplicatable_nested_form').each(function(idx) {
      var id = $('[id*="_question_items_attributes_'+idx+'_description"]:first').attr('id');
      append_rich_text(id);
    });

    set_image_input();


    $('.new_question .obs').click(function(){
      var ckb = $(this).parent().find('input[type="checkbox"]');
      ckb.prop('checked', !ckb.prop('checked'));
    });
  });

  function add_comment(btn){
    $(btn).parents('.duplicatable_nested_form:first').find('.comment_area').fadeToggle(function(){
      if ($(this).is(':visible'))
        $(this).css('display','inline-block');
      $(this).toggleClass('hide');
    });
  }

  function remove_image_item(link){
    if (!confirm("#{I18n.t('question.form.items.confirm_image_removal')}"))
      return false;

    $.put($(link).data('url'), function(data){
      var success = data.success;
      flash_message(data.notice, 'notice', 'new_question');

      $(link).hide();
      $(link).next().show();
      $('#image_item').attr('src','');
      
    }).error(function(data){
      var response = $.parseJSON(data.responseText);
      if (typeof(response.alert) != "undefined")
       flash_message(response.alert, 'alert', 'new_question');
    });
  }

  function remove_image_item_tmp(link){
    $(link).parents('.upload-preview:first').find('img').attr('src', '');
    $(link).parents('.upload-preview:first').find('input.file').val('');
  }

  function add_image(btn){
    $(btn).parents('.duplicatable_nested_form:first').find('.image').fadeToggle(function(){
      if ($(this).is(':visible'))
        $(this).css('display','inline-block');
      $(this).toggleClass('hide');
    });
  }

  