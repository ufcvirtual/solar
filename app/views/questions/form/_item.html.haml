#items
  - count = 0
  - count_items = f.object.question_items.count
  = f.nested_fields_for :question_items, wrapper_tag: :div do |i|
    - if (f.object.new_record? || i.object.persisted? || count == count_items + 1)
      - count += 1
      %fieldset.duplicatable_nested_form
        %legend#question_images_label
          = f.label t('questions.form.items.item'), id: 'fs_legend_item'
        = i.remove_nested_fields_link content_tag(:i, nil, class: 'icon-trash', :'data-tooltip' => t('questions.form.items.remove'))
        = link_to content_tag(:i, nil, class: 'icon-comment'), "#void", onclick: 'add_comment(this)', class: 'comment', :'data-tooltip' => t('questions.form.items.comments')
        = link_to content_tag(:i, nil, class: 'icon-pictures'), "#void", onclick: 'add_image(this)', class: 'image_icon', :'data-tooltip' => t('questions.form.items.images')
        = link_to content_tag(:i, nil, class: 'icon-music'), "#void", onclick: 'add_audio(this)', class: 'audio_icon', :'data-tooltip' => t('questions.form.items.audios')
        .inline
          .inputs
            = i.check_box :value
            = i.select :value, ([ ['V', true], ['F', false]]), include_blank: false
            .obs= t('questions.form.items.choose_correct')
          .label= i.label :description
          .desc
            = i.input :description, label: false, class: 'ckeditor'
          .comment_area{ class: i.object.comment.blank? ? 'hide' : 'comment_item' , :style=>"display:none;"}
            = i.input :comment, as: :text, label: t('questions.form.items.comment')
          .image.hide{:style=>"display:none;"}
            .upload-preview
              - if i.object.item_image_file_name.blank?
                %img{ src: '' }
              - else
                %img{ src: i.object.item_image.as_json, id: 'image_item' }

              = i.input :item_image, as: :file, label: false
              - if i.object.item_image_file_name
                = link_to content_tag(:i, nil, class: 'icon-trash'), "#void", onclick: "remove_file_item(this, 'img')", :'data-url' => remove_image_item_exam_question_path(i.object, question_id: i.object.question.id)
                = link_to content_tag(:i, nil, class: 'icon-trash'), "#void", onclick: 'remove_file_item_tmp(this, "img")', class: 'trash-tmp', style: 'display: none'
              - else
                = link_to content_tag(:i, nil, class: 'icon-trash'), "#void", onclick: 'remove_file_item_tmp(this, "img")'

              = link_to t('questions.form.items.add_image'), "#void", onclick: 'add_file(this)', class: 'btn btn_main add_file'

            .info
              = i.input :img_alt, label: t('questions.form.items.alt')
              = i.label t('questions.form.items.alt_desc'), class: 'alt'
          .audio.hide{:style=>"display:none;"}
            .upload-preview
              - if i.object.item_audio_file_name.blank?
                %audio{ src: '' }
              - else
                %audio{ src: i.object.item_audio.as_json, autoplay: false, controls: true, name: 'audioQuestion', id: 'audio_item'}
                  %p= t("errors.messages.audio")
              = i.input :item_audio, as: :file, label: false
              - if i.object.item_audio_file_name
                = link_to content_tag(:i, nil, class: 'icon-trash'), "#void", onclick: 'remove_file_item(this, "audio")', :'data-url' => remove_audio_item_exam_question_path(i.object, question_id: i.object.question.id)
                = link_to content_tag(:i, nil, class: 'icon-trash'), "#void", onclick: "remove_file_item_tmp(this, 'audio')", class: 'trash-tmp', style: 'display: none'
              - else
                = link_to content_tag(:i, nil, class: 'icon-trash'), "#void", onclick: "remove_file_item_tmp(this, 'audio')"

              = link_to t('questions.form.items.add_audio'), "#void", onclick: 'add_file(this)', class: 'btn btn_main add_file'
            .info
              = i.input :audio_description, as: :text, label: t('questions.form.items.audio_description')
              = i.label t('questions.form.audio.aud_desc'), class: 'alt'
    -else
      - count += 1

= javascript_include_tag 'ckeditor/init', 'tooltip'

:javascript
  $(function(){
    CKEDITOR_BASEPATH = "#{request.env['RAILS_RELATIVE_URL_ROOT']}/assets/ckeditor/";

    CKEDITOR.editorConfig = function (config) {
      config.toolbar =
        [
          { name: 'clipboard', items : [ 'Copy', 'Paste', 'PasteText', '-', 'Undo', 'Redo' ] },
          { name: 'insert', items : ['EqnEditor'] },
          { name: 'basicstyles', items : [ 'Bold', 'Italic', 'Underline', 'Strike', '-', 'RemoveFormat' ] },
          { name: 'paragraph', items : [ 'NumberedList', 'BulletedList', '-', 'Outdent', 'Indent' ] }
        ];

        config.extraPlugins = 'eqneditor,oembed';
        config.resize_enabled = false;
        config.height = '80px';
        config.width = '500px';
        config.autoParagraph = false;
        config.pasteFromWord_inlineImages = false;
    };

    $("#items").on("fields_added.nested_form_fields", function(event) {
      change_inputs(true, "#{f.object.nil? ? false : f.object.type_question}");

      $('.new_question .obs').unbind('click');

      $('.new_question .obs').click(function(){
        var ckb = $(this).parent().find('input[type="checkbox"]');
        ckb.prop('checked', !ckb.prop('checked'));
      });
    });

    $('#items .duplicatable_nested_form').each(function(idx) {
      var id = $('[id*="_question_items_attributes_'+idx+'_description"]:first').attr('id');
      append_rich_text(id);
    });

    set_image_input();
    set_audio_input();

    $('.new_question .obs').click(function(){
      var ckb = $(this).parent().find('input[type="checkbox"]');
      ckb.prop('checked', !ckb.prop('checked'));
    });

    expand_existing_options();
  });

  function add_comment(btn){
    $(btn).parents('.duplicatable_nested_form:first').find('.comment_area').fadeToggle(function(){
      if ($(this).is(':visible'))
        $(this).css('display','inline-block');
      $(this).toggleClass('hide');
    });
  }

  function remove_file_item(link, type){
    if(type == 'audio'){
      if (!confirm("#{I18n.t('questions.form.items.confirm_audio_removal')}"))
        return false;
    }else{
      if (!confirm("#{t('questions.form.items.confirm_image_removal')}"))
        return false;
    }

    $.put($(link).data('url'), function(data){
      var success = data.success;
      flash_message(data.notice, 'notice', 'new_question');
      $(link).hide();
      $(link).next().show();

      remove_file_item_tmp($(link), type);
      
    }).fail(function(data){
      var response = $.parseJSON(data.responseText);
      if (typeof(response.alert) != "undefined")
       flash_message(response.alert, 'alert', 'new_question');
    });
  }

  function remove_file_item_tmp(link, type){
    $(link).parents('.upload-preview:first').find(type).attr('src', '');
    $(link).parents('.upload-preview:first').find('input.file').val('');

    if(type == 'audio')
      $(link).parents('.upload-preview:first').parent().find('.info .text textarea').val('');
    else
      $(link).parents('.upload-preview:first').parent().find('.info .string input').val('');
  }

  function add_image(btn){
    $(btn).parents('.duplicatable_nested_form:first').find('.image').fadeToggle(function(){
      if ($(this).is(':visible'))
        $(this).css('display','inline-block');
      $(this).toggleClass('hide');
    });
  }

  function add_audio(btn){
    $(btn).parents('.duplicatable_nested_form:first').find('.audio').fadeToggle(function(){
      if ($(this).is(':visible'))
        $(this).css('display','inline-block');
      $(this).toggleClass('hide');
    });
  }

  function expand_existing_options(){
    $(".duplicatable_nested_form #image_item").map(function(){
      $(this).parents(".duplicatable_nested_form").find('.image_icon').click();
    });
    $(".duplicatable_nested_form #audio_item").map(function(){
      $(this).parents(".duplicatable_nested_form").find('.audio_icon').click();
    });
    $(".duplicatable_nested_form .comment_item").map(function(){
      $(this).parents(".duplicatable_nested_form").find('.comment').click();
    });
  }

  function rename_items(){
    var count = 1;
    var visible = $(".duplicatable_nested_form #fs_legend_item").map(function(){
      if ($(this).parents(".nested_fields:visible").length != 0){
        $(this).text("Item " + count);
        count++;
      }
    });
  }