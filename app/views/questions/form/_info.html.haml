= javascript_include_tag 'ckeditor/init'

:javascript

  $(function(){
    CKEDITOR_BASEPATH = "#{request.env['RAILS_RELATIVE_URL_ROOT']}/assets/ckeditor/";

    CKEDITOR.editorConfig = function (config) {
      config.toolbar =
        [
          { name: 'clipboard', items : [ 'Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo' ] },
          { name: 'insert', items : ['EqnEditor'] },
          { name: 'basicstyles', items : [ 'Bold', 'Italic', 'Underline', 'Strike', '-', 'RemoveFormat' ] },
          { name: 'paragraph', items : [ 'NumberedList', 'BulletedList', '-', 'Outdent', 'Indent' ] }
        ];

        config.extraPlugins = 'eqneditor,oembed';
        config.resize_enabled = false;
        config.height = '80px';
        config.width = '500px';
    };

    change_inputs(true, "#{f.object.nil? ? false : f.object.type_question}");

    $('select#exam_question_question_attributes_type_question').on('change', function () {
      change_inputs(false);
    });

    $('select#question_type_question').on('change', function () {
      change_inputs(false);
    });


    $(document).on("fields_added.nested_form_fields", function(event) {
      set_image_input();
      set_audio_input();
      if($(event.currentTarget.activeElement).hasClass('add_options')){
        var name = $(".desc textarea[id*='_question_items_']:visible:last").attr('id');      
        var ckeditor = CKEDITOR.instances[name];
        //if (!ckeditor)
        append_rich_text(name);
        $.getScript("/assets/tooltip.js");
      }
    });

    $(document).on("fields_removed.nested_form_fields", function(event, param) {
      if($('.nested_fields.nested_question_question_images:visible').length < 4){
        $('.question_images .add_nested_fields_link').show();
        $('.question_audios .add_nested_fields_link').show();
      }
      if($(event.currentTarget.activeElement).hasClass('add_options')){
        append_rich_text($(".desc textarea[id*='_question_items_']:visible:last").attr('id'));
      }
    });
    
  });

  function set_image_input(){
    $("#images input[type='file'], .image input[type='file']").each(function(idx){

    });

    $("#images input[type='file'], .image input[type='file']").change(function(event){
      var input = $(event.currentTarget);
      var file = input[0].files[0];
      var reader = new FileReader();
      input.parent().find('.add_file').hide();
      reader.onload = function(e){
         image_base64 = e.target.result;
         input.parent().parent().find('img').attr("src", image_base64);
      };
      reader.readAsDataURL(file);
    });

    if($('.nested_fields.nested_question_question_images:visible').length == 4){
      $('.question_images .add_nested_fields_link').hide();
    }
  }

  function set_audio_input(){
    $("#audios input[type='file'], .audio input[type='file']").each(function(idx){

    });

    $("#audios input[type='file'], .audio input[type='file']").change(function(event){
      var input = $(event.currentTarget);
      var file = input[0].files[0];
      var reader = new FileReader();
      input.parent().find('.add_file').hide();
      reader.onload = function(e){
         audio_base = e.target.result;
         input.parent().parent().find('audio').attr("src", audio_base);
         input.parent().parent().find('audio').attr("controls", "controls");
      };
      reader.readAsDataURL(file);
    });

    if($('.nested_fields.nested_question_question_audios:visible').length == 4){
      $('.question_audios .add_nested_fields_link').hide();
    }
  }

  function upFocus(p1, p2){
    var i = 0;
    var total = 6;
    while(i<total){
      if($("#"+p1+i+p2).is(":visible") && ($("#"+p1+i+p2).val()=='')){
        $("#"+p1+i+p2).focus();
        return true;
      }
      i++;
    }    
  }

.question_type
  = f.label t('questions.new.privacy')
  = f.select :privacy, ([ [t('questions.new.public'), 0], [t('questions.new.private'), 1] ]), include_blank: false

.question_type
  = f.label t('questions.new.type_question')
  - if f.object.persisted?
    = f.hint f.object.type
  - else
    = f.select :type_question, ([ [t('questions.new.multiple_choice'), Question::MULTIPLE], [t('questions.new.unique_choice'), Question::UNIQUE], [t('questions.new.true_or_false'), Question::TRUE_FALSE]]), include_blank: false

  - unless eq.nil?
    = eq.input :score, input_html: { step: '0.5' }

.labels
  = f.label t('questions.questions.labels'), class: 'label_labels'
  = render partial: 'questions/form/label', locals: { f: f }
  .input.string
    = f.add_nested_fields_link :question_labels, t('.add_labels'), class: 'btn'

= f.input :enunciation, as: :ckeditor

= label_tag 'question_enunciation', '', id: 'exam_question_question_enunciation'


.question_images
  .visuallyhidden= label_tag :img_alt, '', id: 'exam_question_question_question_images_img_alt', onfocus: 'upFocus("exam_question_question_attributes_question_images_attributes_", "_img_alt")', tabindex: '0'
  .visuallyhidden= label_tag :img_alt, '', id: 'exam_question_question_question_images_image_content_type'
  .visuallyhidden= label_tag :img_alt, '', id: 'question_question_images_img_alt', onfocus: 'upFocus("question_question_images_attributes_", "_img_alt")', tabindex: '0'
  .visuallyhidden= label_tag :img_alt, '', id: 'question_question_images_image_content_type'
  
  = render partial: 'questions/form/image', locals: { f: f, eq: nil }
  .input.string
    = f.add_nested_fields_link :question_images, t('.add_images'), class: 'btn'

.question_audios
  .visuallyhidden= label_tag :audio_description, '', id: 'exam_question_question_question_audios_description', onfocus: 'upFocusDescAudio("exam_question_question_attributes_question_audios_attributes_", "_audio_description")', tabindex: '0'
  .visuallyhidden= label_tag :audio_description, '', id: 'exam_question_question_question_audios_audio_content_type'
  .visuallyhidden= label_tag :audio_description, '', id: 'question_question_audios_description', onfocus: 'upFocusDescAudio("question_question_audios_attributes_", "_audio_description")', tabindex: '0'
  .visuallyhidden= label_tag :audio_description, '', id: 'question_question_audios_audio_content_type'
  .visuallyhidden= label_tag :audio_description, '', id: 'exam_question_question_question'


  = render partial: 'questions/form/audio', locals: { f: f, eq: nil }
  .input.string
    = f.add_nested_fields_link :question_audios, t('.add_audios'), class: 'btn'

.form-actions.right_buttons
  = button_to_function t(:cancel), 'jQuery.fancybox.close()', class: 'btn btn_default btn_lightbox', type: 'button'
  = button_to_function t('.continue'), 'go_to_items()', class: 'btn btn_main btn_lightbox', alt: t(:save), type: 'button'
