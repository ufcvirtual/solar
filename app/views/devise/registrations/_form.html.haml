#register
  #register-header
    %p.label-register
      = t(:signup)
  #register-content
    #register-steps
      %ul
        %li.active
          = t(:new_user_personal_data)
          .dot.active#dot-personal-data
        %li#inactive-access
          = t(:new_user_access_data)
          .dot#dot-access
        %li#inactive-contact
          = t(:new_user_contact_data)
          .dot#dot-contact
        %li#inactive-other
          = t(:new_user_other_info)
          .dot#dot-other

    #form
      = simple_form_for @user do |f|
        = f.error_notification
        #personal-data.form-panel
          .field
            = f.input :name, :input_html => { autofocus: true}
          #inputCpf.field
            - if params[:cpf].present?
              = f.input :cpf, readonly: true, input_html: {value: params[:cpf], required: true}
            - else
              = f.input :cpf
          #birthdate.field
            = f.input :birthdate, as: :string, input_html: {id: 'user_birthdate', value: Date.today, format: :datepicker}
          #gender.field
            = f.input :gender do
              = f.select :gender, ([[t(:m), true], [t(:f), false]])
          #special_needs.field
            %div
              %label.string.optional.form_label
                = t(:form_special_needs)
              = f.collection_radio_buttons :has_special_needs, [[true, t('special_needs_yes')] ,[false, t('special_needs_no')]], :first, :last, default: false do |b|
                = b.label(:"data-value" => b.value, :'aria-label' => t(:form_special_needs)+ ': '+ b.text) { b.radio_button + b.text }

          #special_needs_line.field.invisible
            = f.input :special_needs

          %p.required_info
            = t(:required_fields)
          .buttons
            %a.next#next_1{href: '#', onclick: "up_focus('user_nick')", keydown: "up_focus('user_nick')"}
              = t(:registration_next)

        #access.form-panel
          .field
            = f.input :nick
          #warning_login.required_info.invisible=t(:form_login_notice)
          #username.field.clear
            = f.input :username
          #password.field
            = f.input :password, required: true
          #confirm-password.field
            = f.input :password_confirmation, required: true
          #email.field
            = f.input :email, required: true
          #confirmEmail.field
            = f.input :email_confirmation, required: true
          #alternate-email.field
            #span.hint_text
            = f.input :alternate_email
          %p.required_info
            = t(:required_fields)
          .buttons
            %a.btn.back{href: "#", onclick: "up_focus('user_name')", keydown: "up_focus('user_name')"}
              = t(:registration_previous)
            %a.btn.next{href: "#", onclick: "up_focus('user_address')", keydown: "up_focus('user_address')"}
              = t(:registration_next)

        #contact.form-panel
          #address.contact.field
            = f.input :address
          #number.contact2.field
            = f.input :address_number
          #complement.contact2.field
            = f.input :address_complement
          #neighborhood.contact2.field
            = f.input :address_neighborhood
          #zipcode.contact2.field
            = f.input :zipcode
          #country.contact2.field
            = f.input :country, as: :string, input_html: {size: 10}
          #state.contact2.field
            = f.input :state do
              = f.select :state, ([["AC", "AC"], ["AL", "AL"], ["AP", "AP"], ["AM", "AM"], ["BA", "BA"], ["CE", "CE"], ["DF", "DF"], ["ES", "ES"], ["GO", "GO"], ["MA", "MA"], ["MT", "MT"], ["MS", "MS"], ["MG", "MG"], ["PA", "PA"], ["PB", "PB"], ["PR", "PR"], ["PE", "PE"], ["PI", "PI"], ["RJ", "RJ"], ["RN", "RN"], ["RS", "RS"], ["RO", "RO"], ["RR", "RR"], ["SC", "SC"], ["SP", "SP"], ["SE", "SE"], ["TO", "TO"], [t(:state_other),t(:state_other)]]), :include_blank => true
          #city.contact.field
            = f.input :city
          #cell.contact2.field
            = f.input :telephone
          #cell1.contact2.field
            = f.input :cell_phone
          .buttons
            %a.btn.back{href: "#", onclick: "up_focus('user_nick')", keydown: "up_focus('user_nick')"}
              = t(:registration_previous)
            %a.btn.next{href: "#", onclick: "up_focus('user_institution')", keydown: "up_focus('user_institution')"}
              = t(:registration_next)

        #other.form-panel
          #institution.contact.field
            = f.input :institution
          .buttons
            %a.btn.back{href: "#", onclick: "up_focus('user_address')", keydown: "up_focus('user_address')"}
              = t(:registration_previous)
            %button#complete{type: :submit, :value => t(:registration_done)}
              = t(:registration_done)

.flash_message_wrapper
  - flash.each do |name, msg|
    #flash_message{class: name}= content_tag :span, msg

#cancel
  %a{href: "/"}
    = t(:registration_cancel)

= javascript_include_tag 'jquery.ui.datepicker-pt-BR', 'jquery.ui.datepicker-en-US'

:javascript

  $('#user_name').focus();
  $("#user_birthdate").mask("#{I18n.t('date.formats.mask')}");

  $(function(){
    $('#accesskey_maincontent').prop('href', '#register-header');

    $("#user_username").on("keyup focusout",function(){
      var login = $(this).val();
      var pattern = /[^a-zA-Z0-9@_]/g;

      if( pattern.test(login) ) {
        $("#warning_login").removeClass("invisible");
      } else {
        $("#warning_login").addClass("invisible");
      }
    });

    var options = $.extend($.datepicker.regional["#{I18n.locale.to_s.gsub('_', '-')}"]);
    $("#user_birthdate").datepicker(options);

    setTimeout(function(){
      focuErro();
    }, 400);

  });

  function up_focus(id){
    setTimeout(function() {
      $('#'+id).focus();
      focuErro();
    }, 100);


  }

  function focuErro(){

    if($(".error").val() != undefined) {
      $(".error").each( function(index, value) {
        var label = $(this).siblings()[0];
        var text = $(label).text()+': '+$(this).text();
        $(label).attr("aria-label",text);
      });

      var el = $(".error").siblings()[0];
      if($(el).is(":visible")){
        $(".error").siblings()[0].focus();
      }else{
        if(typeof($("#next_1")) !== "undefined" && $("#next_1").is(":visible")){
          $("#next_1").click();
          if ($(el).is(":visible")) {
            $(".error").siblings()[0].focus();
          }
        }
      }
    }
  }
